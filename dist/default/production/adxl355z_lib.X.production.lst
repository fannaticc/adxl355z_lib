

Microchip Technology PIC18 PRO Macro Assembler V1.40 build -251452761 
                                                                                               Mon Sep 09 09:48:03 2019

Microchip Technology Omniscient Code Generator v1.40 (PRO mode) build 201612010151
     1                           	processor	18F2520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    62                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    63                           	psect	pa_nodes,global,class=CODE,delta=1
    64  0000                     
    65                           ; Version 1.40
    66                           ; Generated 01/12/2016 GMT
    67                           ; 
    68                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution.
    82                           ; 
    83                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    84                           ;        software without specific prior written permission.
    85                           ; 
    86                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    87                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    88                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    89                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    90                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    91                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    92                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    93                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    94                           ; 
    95                           ; 
    96                           ; Code-generator required, PIC18F2520 Definitions
    97                           ; 
    98                           ; SFR Addresses
    99  0000                     tblptru	equ	0xFF8
   100                           tblptrh	equ	0xFF7
   101                           tblptrl	equ	0xFF6
   102                           tablat	equ	0xFF5
   103                           prodh	equ	0xFF4
   104                           prodl	equ	0xFF3
   105                           indf0	equ	0xFEF
   106                           plusw0	equ	0xFEB
   107                           fsr0h	equ	0xFEA
   108                           fsr0l	equ	0xFE9
   109                           wreg	equ	0xFE8
   110                           indf2	equ	0xFDF
   111                           postinc2	equ	0xFDE
   112                           postdec2	equ	0xFDD
   113                           plusw2	equ	0xFDB
   114                           fsr2h	equ	0xFDA
   115                           fsr2l	equ	0xFD9
   116                           status	equ	0xFD8
   117                           
   118                           	psect	idataBANK0
   119  005E57                     __pidataBANK0:
   120                           	opt stack 0
   121                           
   122                           ;initializer for _dh_function_set
   123  005E57  38                 	db	56
   124                           tblptru	equ	0xFF8
   125                           tblptrh	equ	0xFF7
   126                           tblptrl	equ	0xFF6
   127                           tablat	equ	0xFF5
   128                           prodh	equ	0xFF4
   129                           prodl	equ	0xFF3
   130                           indf0	equ	0xFEF
   131                           plusw0	equ	0xFEB
   132                           fsr0h	equ	0xFEA
   133                           fsr0l	equ	0xFE9
   134                           wreg	equ	0xFE8
   135                           indf2	equ	0xFDF
   136                           postinc2	equ	0xFDE
   137                           postdec2	equ	0xFDD
   138                           plusw2	equ	0xFDB
   139                           fsr2h	equ	0xFDA
   140                           fsr2l	equ	0xFD9
   141                           status	equ	0xFD8
   142                           
   143                           	psect	mediumconst
   144  007EB6                     __pmediumconst:
   145                           	opt stack 0
   146  007EB6  00                 	db	0
   147  007EB7                     __npowers_:
   148                           	opt stack 0
   149  007EB7  0000               	dw	0
   150  007EB9  3F80               	dw	16256
   151  007EBB  CCCD               	dw	52429
   152  007EBD  3DCC               	dw	15820
   153  007EBF  D70A               	dw	55050
   154  007EC1  3C23               	dw	15395
   155  007EC3  126F               	dw	4719
   156  007EC5  3A83               	dw	14979
   157  007EC7  B717               	dw	46871
   158  007EC9  38D1               	dw	14545
   159  007ECB  C5AC               	dw	50604
   160  007ECD  3727               	dw	14119
   161  007ECF  37BD               	dw	14269
   162  007ED1  3586               	dw	13702
   163  007ED3  BF95               	dw	49045
   164  007ED5  33D6               	dw	13270
   165  007ED7  CC77               	dw	52343
   166  007ED9  322B               	dw	12843
   167  007EDB  705F               	dw	28767
   168  007EDD  3089               	dw	12425
   169  007EDF  E6FF               	dw	59135
   170  007EE1  2EDB               	dw	11995
   171  007EE3  E508               	dw	58632
   172  007EE5  1E3C               	dw	7740
   173  007EE7  4260               	dw	16992
   174  007EE9  0DA2               	dw	3490
   175  007EEB                     __end_of__npowers_:
   176                           	opt stack 0
   177  007EEB                     __powers_:
   178                           	opt stack 0
   179  007EEB  0000               	dw	0
   180  007EED  3F80               	dw	16256
   181  007EEF  0000               	dw	0
   182  007EF1  4120               	dw	16672
   183  007EF3  0000               	dw	0
   184  007EF5  42C8               	dw	17096
   185  007EF7  0000               	dw	0
   186  007EF9  447A               	dw	17530
   187  007EFB  4000               	dw	16384
   188  007EFD  461C               	dw	17948
   189  007EFF  5000               	dw	20480
   190  007F01  47C3               	dw	18371
   191  007F03  2400               	dw	9216
   192  007F05  4974               	dw	18804
   193  007F07  9680               	dw	38528
   194  007F09  4B18               	dw	19224
   195  007F0B  BC20               	dw	48160
   196  007F0D  4CBE               	dw	19646
   197  007F0F  6B28               	dw	27432
   198  007F11  4E6E               	dw	20078
   199  007F13  02F9               	dw	761
   200  007F15  5015               	dw	20501
   201  007F17  78EC               	dw	30956
   202  007F19  60AD               	dw	24749
   203  007F1B  F2CA               	dw	62154
   204  007F1D  7149               	dw	29001
   205  007F1F                     __end_of__powers_:
   206                           	opt stack 0
   207  007F1F                     _dpowers:
   208                           	opt stack 0
   209  007F1F  0001               	dw	1
   210  007F21  0000               	dw	0
   211  007F23  000A               	dw	10
   212  007F25  0000               	dw	0
   213  007F27  0064               	dw	100
   214  007F29  0000               	dw	0
   215  007F2B  03E8               	dw	1000
   216  007F2D  0000               	dw	0
   217  007F2F  2710               	dw	10000
   218  007F31  0000               	dw	0
   219  007F33  86A0               	dw	34464
   220  007F35  0001               	dw	1
   221  007F37  4240               	dw	16960
   222  007F39  000F               	dw	15
   223  007F3B  9680               	dw	38528
   224  007F3D  0098               	dw	152
   225  007F3F  E100               	dw	57600
   226  007F41  05F5               	dw	1525
   227  007F43  CA00               	dw	51712
   228  007F45  3B9A               	dw	15258
   229  007F47                     __end_of_dpowers:
   230                           	opt stack 0
   231  007F47  F3EC               	dw	62444
   232  007F49  484A               	dw	18506
   233  007F4B  9535               	dw	38197
   234  007F4D  C795               	dw	51093
   235  007F4F  C117               	dw	49431
   236  007F51  45DC               	dw	17884
   237  007F53  DBFD               	dw	56317
   238  007F55  C36D               	dw	50029
   239  007F57  B372               	dw	45938
   240  007F59  4033               	dw	16435
   241  007F5B                     __end_ofsin@coeff_a:
   242                           	opt stack 0
   243  007F5B  342B               	dw	13355
   244  007F5D  4801               	dw	18433
   245  007F5F  9D7F               	dw	40319
   246  007F61  45B0               	dw	17840
   247  007F63  FFE7               	dw	65511
   248  007F65  42D9               	dw	17113
   249  007F67  0000               	dw	0
   250  007F69  3F80               	dw	16256
   251  007F6B                     __end_ofsin@coeff_b:
   252                           	opt stack 0
   253  0000                     _ADCON1	set	4033
   254  0000                     _BAUDCON	set	4024
   255  0000                     _CMCON	set	4020
   256  0000                     _OSCCON	set	4051
   257  0000                     _RCSTA	set	4011
   258  0000                     _SPBRG	set	4015
   259  0000                     _SSPADD	set	4040
   260  0000                     _SSPBUF	set	4041
   261  0000                     _SSPCON1	set	4038
   262  0000                     _SSPCON1bits	set	4038
   263  0000                     _SSPCON2	set	4037
   264  0000                     _SSPCON2bits	set	4037
   265  0000                     _SSPSTAT	set	4039
   266  0000                     _SSPSTATbits	set	4039
   267  0000                     _TRISA	set	3986
   268  0000                     _TRISB	set	3987
   269  0000                     _TRISC	set	3988
   270  0000                     _TRISCbits	set	3988
   271  0000                     _TXREG	set	4013
   272  0000                     _TXSTA	set	4012
   273  0000                     _TXSTAbits	set	4012
   274  007F6B                     STR_2:
   275  007F6B  4C                 	db	76	;'L'
   276  007F6C  53                 	db	83	;'S'
   277  007F6D  46                 	db	70	;'F'
   278  007F6E  4F                 	db	79	;'O'
   279  007F6F  20                 	db	32
   280  007F70  20                 	db	32
   281  007F71  20                 	db	32
   282  007F72  20                 	db	32
   283  007F73  20                 	db	32
   284  007F74  20                 	db	32
   285  007F75  20                 	db	32
   286  007F76  20                 	db	32
   287  007F77  20                 	db	32
   288  007F78  20                 	db	32
   289  007F79  20                 	db	32
   290  007F7A  50                 	db	80	;'P'
   291  007F7B  55                 	db	85	;'U'
   292  007F7C  43                 	db	67	;'C'
   293  007F7D  2D                 	db	45
   294  007F7E  52                 	db	82	;'R'
   295  007F7F  69                 	db	105	;'i'
   296  007F80  6F                 	db	111	;'o'
   297  007F81  0A                 	db	10
   298  007F82  00                 	db	0
   299  007F83                     STR_1:
   300  007F83  41                 	db	65	;'A'
   301  007F84  44                 	db	68	;'D'
   302  007F85  58                 	db	88	;'X'
   303  007F86  4C                 	db	76	;'L'
   304  007F87  33                 	db	51	;'3'
   305  007F88  35                 	db	53	;'5'
   306  007F89  35                 	db	53	;'5'
   307  007F8A  5A                 	db	90	;'Z'
   308  007F8B  20                 	db	32
   309  007F8C  73                 	db	115	;'s'
   310  007F8D  65                 	db	101	;'e'
   311  007F8E  6E                 	db	110	;'n'
   312  007F8F  73                 	db	115	;'s'
   313  007F90  6F                 	db	111	;'o'
   314  007F91  72                 	db	114	;'r'
   315  007F92  20                 	db	32
   316  007F93  74                 	db	116	;'t'
   317  007F94  65                 	db	101	;'e'
   318  007F95  73                 	db	115	;'s'
   319  007F96  74                 	db	116	;'t'
   320  007F97  65                 	db	101	;'e'
   321  007F98  72                 	db	114	;'r'
   322  007F99  0A                 	db	10
   323  007F9A  00                 	db	0
   324  007F9B                     STR_6:
   325  007F9B  54                 	db	84	;'T'
   326  007F9C  65                 	db	101	;'e'
   327  007F9D  6D                 	db	109	;'m'
   328  007F9E  70                 	db	112	;'p'
   329  007F9F  3A                 	db	58	;':'
   330  007FA0  20                 	db	32
   331  007FA1  25                 	db	37
   332  007FA2  30                 	db	48	;'0'
   333  007FA3  36                 	db	54	;'6'
   334  007FA4  2E                 	db	46
   335  007FA5  32                 	db	50	;'2'
   336  007FA6  66                 	db	102	;'f'
   337  007FA7  B0                 	db	-80
   338  007FA8  43                 	db	67	;'C'
   339  007FA9  0A                 	db	10
   340  007FAA  00                 	db	0
   341  007FAB                     STR_3:
   342  007FAB  58                 	db	88	;'X'
   343  007FAC  3A                 	db	58	;':'
   344  007FAD  20                 	db	32
   345  007FAE  25                 	db	37
   346  007FAF  2B                 	db	43
   347  007FB0  30                 	db	48	;'0'
   348  007FB1  38                 	db	56	;'8'
   349  007FB2  2E                 	db	46
   350  007FB3  35                 	db	53	;'5'
   351  007FB4  66                 	db	102	;'f'
   352  007FB5  47                 	db	71	;'G'
   353  007FB6  20                 	db	32
   354  007FB7  20                 	db	32
   355  007FB8  00                 	db	0
   356  007FB9                     STR_4:
   357  007FB9  59                 	db	89	;'Y'
   358  007FBA  3A                 	db	58	;':'
   359  007FBB  20                 	db	32
   360  007FBC  25                 	db	37
   361  007FBD  2B                 	db	43
   362  007FBE  30                 	db	48	;'0'
   363  007FBF  38                 	db	56	;'8'
   364  007FC0  2E                 	db	46
   365  007FC1  35                 	db	53	;'5'
   366  007FC2  66                 	db	102	;'f'
   367  007FC3  47                 	db	71	;'G'
   368  007FC4  20                 	db	32
   369  007FC5  20                 	db	32
   370  007FC6  00                 	db	0
   371  007FC7                     STR_5:
   372  007FC7  5A                 	db	90	;'Z'
   373  007FC8  3A                 	db	58	;':'
   374  007FC9  20                 	db	32
   375  007FCA  25                 	db	37
   376  007FCB  2B                 	db	43
   377  007FCC  30                 	db	48	;'0'
   378  007FCD  38                 	db	56	;'8'
   379  007FCE  2E                 	db	46
   380  007FCF  35                 	db	53	;'5'
   381  007FD0  66                 	db	102	;'f'
   382  007FD1  47                 	db	71	;'G'
   383  007FD2  20                 	db	32
   384  007FD3  20                 	db	32
   385  007FD4  00                 	db	0
   386  007FD5                     STR_10:
   387  007FD5  54                 	db	84	;'T'
   388  007FD6  3A                 	db	58	;':'
   389  007FD7  2B                 	db	43
   390  007FD8  25                 	db	37
   391  007FD9  2B                 	db	43
   392  007FDA  36                 	db	54	;'6'
   393  007FDB  2E                 	db	46
   394  007FDC  32                 	db	50	;'2'
   395  007FDD  66                 	db	102	;'f'
   396  007FDE  43                 	db	67	;'C'
   397  007FDF  00                 	db	0
   398  007FE0                     STR_7:
   399  007FE0  58                 	db	88	;'X'
   400  007FE1  25                 	db	37
   401  007FE2  2B                 	db	43
   402  007FE3  30                 	db	48	;'0'
   403  007FE4  37                 	db	55	;'7'
   404  007FE5  2E                 	db	46
   405  007FE6  34                 	db	52	;'4'
   406  007FE7  66                 	db	102	;'f'
   407  007FE8  47                 	db	71	;'G'
   408  007FE9  00                 	db	0
   409  007FEA                     STR_8:
   410  007FEA  59                 	db	89	;'Y'
   411  007FEB  25                 	db	37
   412  007FEC  2B                 	db	43
   413  007FED  30                 	db	48	;'0'
   414  007FEE  37                 	db	55	;'7'
   415  007FEF  2E                 	db	46
   416  007FF0  34                 	db	52	;'4'
   417  007FF1  66                 	db	102	;'f'
   418  007FF2  47                 	db	71	;'G'
   419  007FF3  00                 	db	0
   420  007FF4                     STR_9:
   421  007FF4  5A                 	db	90	;'Z'
   422  007FF5  25                 	db	37
   423  007FF6  2B                 	db	43
   424  007FF7  30                 	db	48	;'0'
   425  007FF8  37                 	db	55	;'7'
   426  007FF9  2E                 	db	46
   427  007FFA  34                 	db	52	;'4'
   428  007FFB  66                 	db	102	;'f'
   429  007FFC  47                 	db	71	;'G'
   430  007FFD  00                 	db	0
   431                           
   432                           ; #config settings
   433  007FFE  00                 	db	0	; dummy byte at the end
   434  0000                     tblptru	equ	0xFF8
   435                           tblptrh	equ	0xFF7
   436                           tblptrl	equ	0xFF6
   437                           tablat	equ	0xFF5
   438                           prodh	equ	0xFF4
   439                           prodl	equ	0xFF3
   440                           indf0	equ	0xFEF
   441                           plusw0	equ	0xFEB
   442                           fsr0h	equ	0xFEA
   443                           fsr0l	equ	0xFE9
   444                           wreg	equ	0xFE8
   445                           indf2	equ	0xFDF
   446                           postinc2	equ	0xFDE
   447                           postdec2	equ	0xFDD
   448                           plusw2	equ	0xFDB
   449                           fsr2h	equ	0xFDA
   450                           fsr2l	equ	0xFD9
   451                           status	equ	0xFD8
   452                           
   453                           	psect	cinit
   454  005F76                     __pcinit:
   455                           	opt stack 0
   456  005F76                     start_initialization:
   457                           	opt stack 0
   458  005F76                     __initialization:
   459                           	opt stack 0
   460                           
   461                           ; Initialize objects allocated to BANK0 (1 bytes)
   462                           ; load TBLPTR registers with __pidataBANK0
   463  005F76  0E57               	movlw	low __pidataBANK0
   464  005F78  6EF6               	movwf	tblptrl,c
   465  005F7A  0E5E               	movlw	high __pidataBANK0
   466  005F7C  6EF7               	movwf	tblptrh,c
   467  005F7E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   468  005F80  6EF8               	movwf	tblptru,c
   469  005F82  0009               	tblrd		*+	;fetch initializer
   470  005F84  CFF5 F0DA          	movff	tablat,__pdataBANK0
   471  005F88                     end_of_initialization:
   472                           	opt stack 0
   473  005F88                     __end_of__initialization:
   474                           	opt stack 0
   475  005F88  0E00               	movlw	low (__Lmediumconst shr (0+16))
   476  005F8A  6EF8               	movwf	tblptru,c
   477  005F8C  0100               	movlb	0
   478  005F8E  EF16  F036         	goto	_main	;jump to C main() function
   479                           tblptru	equ	0xFF8
   480                           tblptrh	equ	0xFF7
   481                           tblptrl	equ	0xFF6
   482                           tablat	equ	0xFF5
   483                           prodh	equ	0xFF4
   484                           prodl	equ	0xFF3
   485                           indf0	equ	0xFEF
   486                           plusw0	equ	0xFEB
   487                           fsr0h	equ	0xFEA
   488                           fsr0l	equ	0xFE9
   489                           wreg	equ	0xFE8
   490                           indf2	equ	0xFDF
   491                           postinc2	equ	0xFDE
   492                           postdec2	equ	0xFDD
   493                           plusw2	equ	0xFDB
   494                           fsr2h	equ	0xFDA
   495                           fsr2l	equ	0xFD9
   496                           status	equ	0xFD8
   497                           
   498                           	psect	dataBANK0
   499  0000DA                     __pdataBANK0:
   500                           	opt stack 0
   501  0000DA                     _dh_function_set:
   502                           	opt stack 0
   503  0000DA                     	ds	1
   504                           tblptru	equ	0xFF8
   505                           tblptrh	equ	0xFF7
   506                           tblptrl	equ	0xFF6
   507                           tablat	equ	0xFF5
   508                           prodh	equ	0xFF4
   509                           prodl	equ	0xFF3
   510                           indf0	equ	0xFEF
   511                           plusw0	equ	0xFEB
   512                           fsr0h	equ	0xFEA
   513                           fsr0l	equ	0xFE9
   514                           wreg	equ	0xFE8
   515                           indf2	equ	0xFDF
   516                           postinc2	equ	0xFDE
   517                           postdec2	equ	0xFDD
   518                           plusw2	equ	0xFDB
   519                           fsr2h	equ	0xFDA
   520                           fsr2l	equ	0xFD9
   521                           status	equ	0xFD8
   522                           
   523                           	psect	cstackBANK0
   524  000080                     __pcstackBANK0:
   525                           	opt stack 0
   526  000080                     ADXL355_Read_Axis@buffer:
   527                           	opt stack 0
   528                           
   529                           ; 15 bytes @ 0x0
   530  000080                     	ds	15
   531  00008F                     _ADXL355_Read_Axis$1707:
   532                           	opt stack 0
   533                           
   534                           ; 4 bytes @ 0xF
   535  00008F                     	ds	4
   536  000093                     ADXL355_Read_Axis@address:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x13
   540  000093                     	ds	1
   541  000094                     ADXL355_Read_Axis@i:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0x14
   545  000094                     	ds	1
   546  000095                     ADXL355_Read_Axis@axis:
   547                           	opt stack 0
   548                           
   549                           ; 18 bytes @ 0x15
   550  000095                     	ds	18
   551  0000A7                     ??_main:
   552                           
   553                           ; 1 bytes @ 0x27
   554  0000A7                     	ds	1
   555  0000A8                     main@aux:
   556                           	opt stack 0
   557                           
   558                           ; 20 bytes @ 0x28
   559  0000A8                     	ds	20
   560  0000BC                     main@acc_value:
   561                           	opt stack 0
   562                           
   563                           ; 18 bytes @ 0x3C
   564  0000BC                     	ds	18
   565  0000CE                     main@acc_g:
   566                           	opt stack 0
   567                           
   568                           ; 12 bytes @ 0x4E
   569  0000CE                     	ds	12
   570                           tblptru	equ	0xFF8
   571                           tblptrh	equ	0xFF7
   572                           tblptrl	equ	0xFF6
   573                           tablat	equ	0xFF5
   574                           prodh	equ	0xFF4
   575                           prodl	equ	0xFF3
   576                           indf0	equ	0xFEF
   577                           plusw0	equ	0xFEB
   578                           fsr0h	equ	0xFEA
   579                           fsr0l	equ	0xFE9
   580                           wreg	equ	0xFE8
   581                           indf2	equ	0xFDF
   582                           postinc2	equ	0xFDE
   583                           postdec2	equ	0xFDD
   584                           plusw2	equ	0xFDB
   585                           fsr2h	equ	0xFDA
   586                           fsr2l	equ	0xFD9
   587                           status	equ	0xFD8
   588                           
   589                           	psect	cstackCOMRAM
   590  000001                     __pcstackCOMRAM:
   591                           	opt stack 0
   592  000001                     ??_I2C_Idle:
   593  000001                     ??_isdigit:
   594  000001                     ?___wmul:
   595                           	opt stack 0
   596  000001                     ?___awmod:
   597                           	opt stack 0
   598  000001                     ?__tdiv_to_l_:
   599                           	opt stack 0
   600  000001                     ?__div_to_l_:
   601                           	opt stack 0
   602  000001                     ?___aldiv:
   603                           	opt stack 0
   604  000001                     ?___flneg:
   605                           	opt stack 0
   606  000001                     ?___lldiv:
   607                           	opt stack 0
   608  000001                     ?___llmod:
   609                           	opt stack 0
   610  000001                     ?___xxtofl:
   611                           	opt stack 0
   612  000001                     I2C_Init@clock_output:
   613                           	opt stack 0
   614  000001                     writeserial@data:
   615                           	opt stack 0
   616  000001                     ___lbmod@divisor:
   617                           	opt stack 0
   618  000001                     Delay_ms@count:
   619                           	opt stack 0
   620  000001                     ___wmul@multiplier:
   621                           	opt stack 0
   622  000001                     ___awmod@dividend:
   623                           	opt stack 0
   624  000001                     ___aldiv@dividend:
   625                           	opt stack 0
   626  000001                     __div_to_l_@f1:
   627                           	opt stack 0
   628  000001                     ___flge@ff1:
   629                           	opt stack 0
   630  000001                     ___flneg@f1:
   631                           	opt stack 0
   632  000001                     __tdiv_to_l_@f1:
   633                           	opt stack 0
   634  000001                     ___lldiv@dividend:
   635                           	opt stack 0
   636  000001                     ___llmod@dividend:
   637                           	opt stack 0
   638  000001                     ___xxtofl@val:
   639                           	opt stack 0
   640                           
   641                           ; 4 bytes @ 0x0
   642  000001                     	ds	1
   643  000002                     I2C_ReadByte@acknowledge:
   644                           	opt stack 0
   645  000002                     I2C_WriteByte@data_out:
   646                           	opt stack 0
   647  000002                     _isdigit$1246:
   648                           	opt stack 0
   649  000002                     ___lbmod@dividend:
   650                           	opt stack 0
   651  000002                     putrsserial@data:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x1
   655  000002                     	ds	1
   656  000003                     ??_Delay_ms:
   657  000003                     I2C_ReadByte@buffer_I2C:
   658                           	opt stack 0
   659  000003                     I2C_Write_Byte@mem_address:
   660                           	opt stack 0
   661  000003                     IIC_put@db:
   662                           	opt stack 0
   663  000003                     isdigit@c:
   664                           	opt stack 0
   665  000003                     ___lbmod@counter:
   666                           	opt stack 0
   667  000003                     ___wmul@multiplicand:
   668                           	opt stack 0
   669  000003                     ___awmod@divisor:
   670                           	opt stack 0
   671                           
   672                           ; 2 bytes @ 0x2
   673  000003                     	ds	1
   674  000004                     ??_putrsserial:
   675  000004                     I2C_Write_Byte@content:
   676                           	opt stack 0
   677  000004                     IIC_put@cb:
   678                           	opt stack 0
   679  000004                     IIC_get@ret:
   680                           	opt stack 0
   681  000004                     ___lbmod@rem:
   682                           	opt stack 0
   683  000004                     Delay_ms@i:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x3
   687  000004                     	ds	1
   688  000005                     ??___xxtofl:
   689  000005                     I2C_Write_Byte@i2c_address:
   690                           	opt stack 0
   691  000005                     WriteIns@ins:
   692                           	opt stack 0
   693  000005                     WriteData@data:
   694                           	opt stack 0
   695  000005                     ___awmod@counter:
   696                           	opt stack 0
   697  000005                     ___lbdiv@divisor:
   698                           	opt stack 0
   699  000005                     ___wmul@product:
   700                           	opt stack 0
   701  000005                     ___aldiv@divisor:
   702                           	opt stack 0
   703  000005                     __div_to_l_@f2:
   704                           	opt stack 0
   705  000005                     ___flge@ff2:
   706                           	opt stack 0
   707  000005                     __tdiv_to_l_@f2:
   708                           	opt stack 0
   709  000005                     ___lldiv@divisor:
   710                           	opt stack 0
   711  000005                     ___llmod@divisor:
   712                           	opt stack 0
   713                           
   714                           ; 4 bytes @ 0x4
   715  000005                     	ds	1
   716  000006                     ADXL355_Init@_power_mode:
   717                           	opt stack 0
   718  000006                     WriteString@stringi:
   719                           	opt stack 0
   720  000006                     DisplLines@lines:
   721                           	opt stack 0
   722  000006                     SetPostion@pos:
   723                           	opt stack 0
   724  000006                     DisplayOnOff@data:
   725                           	opt stack 0
   726  000006                     ___awmod@sign:
   727                           	opt stack 0
   728  000006                     ___lbdiv@dividend:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0x5
   732  000006                     	ds	1
   733  000007                     ?___awdiv:
   734                           	opt stack 0
   735  000007                     ADXL355_Init@_range:
   736                           	opt stack 0
   737  000007                     ___lbdiv@counter:
   738                           	opt stack 0
   739  000007                     ___awdiv@dividend:
   740                           	opt stack 0
   741                           
   742                           ; 2 bytes @ 0x6
   743  000007                     	ds	1
   744  000008                     ___lbdiv@quotient:
   745                           	opt stack 0
   746                           
   747                           ; 1 bytes @ 0x7
   748  000008                     	ds	1
   749  000009                     ??__tdiv_to_l_:
   750  000009                     ??___flge:
   751  000009                     ___aldiv@counter:
   752                           	opt stack 0
   753  000009                     ___llmod@counter:
   754                           	opt stack 0
   755  000009                     ___xxtofl@sign:
   756                           	opt stack 0
   757  000009                     ___awdiv@divisor:
   758                           	opt stack 0
   759  000009                     __div_to_l_@quot:
   760                           	opt stack 0
   761  000009                     ___lldiv@quotient:
   762                           	opt stack 0
   763                           
   764                           ; 4 bytes @ 0x8
   765  000009                     	ds	1
   766  00000A                     ___aldiv@sign:
   767                           	opt stack 0
   768  00000A                     ___xxtofl@exp:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0x9
   772  00000A                     	ds	1
   773  00000B                     ___awdiv@counter:
   774                           	opt stack 0
   775  00000B                     ___aldiv@quotient:
   776                           	opt stack 0
   777  00000B                     ___xxtofl@arg:
   778                           	opt stack 0
   779                           
   780                           ; 4 bytes @ 0xA
   781  00000B                     	ds	1
   782  00000C                     ___awdiv@sign:
   783                           	opt stack 0
   784  00000C                     __tdiv_to_l_@quot:
   785                           	opt stack 0
   786                           
   787                           ; 4 bytes @ 0xB
   788  00000C                     	ds	1
   789  00000D                     __div_to_l_@cntr:
   790                           	opt stack 0
   791  00000D                     ___lldiv@counter:
   792                           	opt stack 0
   793  00000D                     ___awdiv@quotient:
   794                           	opt stack 0
   795                           
   796                           ; 2 bytes @ 0xC
   797  00000D                     	ds	1
   798  00000E                     __div_to_l_@exp1:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0xD
   802  00000E                     	ds	1
   803  00000F                     ?___flmul:
   804                           	opt stack 0
   805  00000F                     ___flmul@b:
   806                           	opt stack 0
   807                           
   808                           ; 4 bytes @ 0xE
   809  00000F                     	ds	1
   810  000010                     __tdiv_to_l_@cntr:
   811                           	opt stack 0
   812                           
   813                           ; 1 bytes @ 0xF
   814  000010                     	ds	1
   815  000011                     __tdiv_to_l_@exp1:
   816                           	opt stack 0
   817                           
   818                           ; 1 bytes @ 0x10
   819  000011                     	ds	2
   820  000013                     ___flmul@a:
   821                           	opt stack 0
   822                           
   823                           ; 4 bytes @ 0x12
   824  000013                     	ds	4
   825  000017                     ??___flmul:
   826                           
   827                           ; 1 bytes @ 0x16
   828  000017                     	ds	4
   829  00001B                     ___flmul@sign:
   830                           	opt stack 0
   831                           
   832                           ; 1 bytes @ 0x1A
   833  00001B                     	ds	1
   834  00001C                     ___flmul@aexp:
   835                           	opt stack 0
   836                           
   837                           ; 1 bytes @ 0x1B
   838  00001C                     	ds	1
   839  00001D                     ___flmul@grs:
   840                           	opt stack 0
   841                           
   842                           ; 4 bytes @ 0x1C
   843  00001D                     	ds	4
   844  000021                     ___flmul@bexp:
   845                           	opt stack 0
   846                           
   847                           ; 1 bytes @ 0x20
   848  000021                     	ds	1
   849  000022                     ___flmul@prod:
   850                           	opt stack 0
   851                           
   852                           ; 4 bytes @ 0x21
   853  000022                     	ds	4
   854  000026                     ___flmul@temp:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x25
   858  000026                     	ds	2
   859  000028                     ?_fround:
   860                           	opt stack 0
   861  000028                     ?_scale:
   862                           	opt stack 0
   863                           
   864                           ; 4 bytes @ 0x27
   865  000028                     	ds	4
   866  00002C                     ??_fround:
   867  00002C                     _scale$1713:
   868                           	opt stack 0
   869                           
   870                           ; 4 bytes @ 0x2B
   871  00002C                     	ds	4
   872  000030                     scale@scl:
   873                           	opt stack 0
   874  000030                     _fround$1712:
   875                           	opt stack 0
   876                           
   877                           ; 4 bytes @ 0x2F
   878  000030                     	ds	1
   879  000031                     ?___fltol:
   880                           	opt stack 0
   881  000031                     ___fltol@f1:
   882                           	opt stack 0
   883                           
   884                           ; 4 bytes @ 0x30
   885  000031                     	ds	3
   886  000034                     _fround$1711:
   887                           	opt stack 0
   888                           
   889                           ; 4 bytes @ 0x33
   890  000034                     	ds	1
   891  000035                     ??___fltol:
   892                           
   893                           ; 1 bytes @ 0x34
   894  000035                     	ds	3
   895  000038                     fround@prec:
   896                           	opt stack 0
   897                           
   898                           ; 1 bytes @ 0x37
   899  000038                     	ds	1
   900  000039                     ?___fladd:
   901                           	opt stack 0
   902  000039                     ___fltol@sign1:
   903                           	opt stack 0
   904  000039                     ___fladd@b:
   905                           	opt stack 0
   906                           
   907                           ; 4 bytes @ 0x38
   908  000039                     	ds	1
   909  00003A                     ___fltol@exp1:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x39
   913  00003A                     	ds	3
   914  00003D                     ___fladd@a:
   915                           	opt stack 0
   916                           
   917                           ; 4 bytes @ 0x3C
   918  00003D                     	ds	4
   919  000041                     ??___fladd:
   920                           
   921                           ; 1 bytes @ 0x40
   922  000041                     	ds	4
   923  000045                     ___fladd@signs:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x44
   927  000045                     	ds	1
   928  000046                     ___fladd@aexp:
   929                           	opt stack 0
   930                           
   931                           ; 1 bytes @ 0x45
   932  000046                     	ds	1
   933  000047                     ___fladd@bexp:
   934                           	opt stack 0
   935                           
   936                           ; 1 bytes @ 0x46
   937  000047                     	ds	1
   938  000048                     ___fladd@grs:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x47
   942  000048                     	ds	1
   943  000049                     ?___fldiv:
   944                           	opt stack 0
   945  000049                     ?___flsub:
   946                           	opt stack 0
   947  000049                     ___flsub@b:
   948                           	opt stack 0
   949  000049                     ___fldiv@b:
   950                           	opt stack 0
   951                           
   952                           ; 4 bytes @ 0x48
   953  000049                     	ds	4
   954  00004D                     ___flsub@a:
   955                           	opt stack 0
   956  00004D                     ___fldiv@a:
   957                           	opt stack 0
   958                           
   959                           ; 4 bytes @ 0x4C
   960  00004D                     	ds	4
   961  000051                     ??___fldiv:
   962  000051                     ?_sprintf:
   963                           	opt stack 0
   964  000051                     sprintf@sp:
   965                           	opt stack 0
   966                           
   967                           ; 1 bytes @ 0x50
   968  000051                     	ds	1
   969  000052                     sprintf@f:
   970                           	opt stack 0
   971                           
   972                           ; 2 bytes @ 0x51
   973  000052                     	ds	3
   974  000055                     ___fldiv@sign:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0x54
   978  000055                     	ds	1
   979  000056                     ___fldiv@rem:
   980                           	opt stack 0
   981                           
   982                           ; 4 bytes @ 0x55
   983  000056                     	ds	2
   984  000058                     ??_sprintf:
   985                           
   986                           ; 1 bytes @ 0x57
   987  000058                     	ds	2
   988  00005A                     ___fldiv@new_exp:
   989                           	opt stack 0
   990                           
   991                           ; 2 bytes @ 0x59
   992  00005A                     	ds	2
   993  00005C                     ___fldiv@grs:
   994                           	opt stack 0
   995  00005C                     _sprintf$1714:
   996                           	opt stack 0
   997                           
   998                           ; 4 bytes @ 0x5B
   999  00005C                     	ds	4
  1000  000060                     ___fldiv@bexp:
  1001                           	opt stack 0
  1002  000060                     _sprintf$1014:
  1003                           	opt stack 0
  1004                           
  1005                           ; 2 bytes @ 0x5F
  1006  000060                     	ds	1
  1007  000061                     ___fldiv@aexp:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x60
  1011  000061                     	ds	1
  1012  000062                     ?_ADXL355_Convert_G:
  1013                           	opt stack 0
  1014  000062                     ?_ADXL355_Read_Axis:
  1015                           	opt stack 0
  1016  000062                     _sprintf$1015:
  1017                           	opt stack 0
  1018  000062                     ADXL355_Convert_G@raw_value:
  1019                           	opt stack 0
  1020                           
  1021                           ; 18 bytes @ 0x61
  1022  000062                     	ds	2
  1023  000064                     _sprintf$1016:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0x63
  1027  000064                     	ds	2
  1028  000066                     _sprintf$1017:
  1029                           	opt stack 0
  1030                           
  1031                           ; 2 bytes @ 0x65
  1032  000066                     	ds	2
  1033  000068                     sprintf@ap:
  1034                           	opt stack 0
  1035                           
  1036                           ; 1 bytes @ 0x67
  1037  000068                     	ds	1
  1038  000069                     sprintf@val:
  1039                           	opt stack 0
  1040                           
  1041                           ; 4 bytes @ 0x68
  1042  000069                     	ds	4
  1043  00006D                     sprintf@tmpval:
  1044                           	opt stack 0
  1045                           
  1046                           ; 4 bytes @ 0x6C
  1047  00006D                     	ds	4
  1048  000071                     sprintf@exp:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x70
  1052  000071                     	ds	2
  1053  000073                     sprintf@width:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x72
  1057  000073                     	ds	1
  1058  000074                     ??_ADXL355_Read_Axis:
  1059  000074                     ADXL355_Convert_G@g:
  1060                           	opt stack 0
  1061                           
  1062                           ; 12 bytes @ 0x73
  1063  000074                     	ds	1
  1064  000075                     sprintf@fval:
  1065                           	opt stack 0
  1066                           
  1067                           ; 4 bytes @ 0x74
  1068  000075                     	ds	4
  1069  000079                     sprintf@prec:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x78
  1073  000079                     	ds	2
  1074  00007B                     sprintf@c:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0x7A
  1078  00007B                     	ds	1
  1079  00007C                     sprintf@flag:
  1080                           	opt stack 0
  1081                           
  1082                           ; 2 bytes @ 0x7B
  1083  00007C                     	ds	4
  1084                           tblptru	equ	0xFF8
  1085                           tblptrh	equ	0xFF7
  1086                           tblptrl	equ	0xFF6
  1087                           tablat	equ	0xFF5
  1088                           prodh	equ	0xFF4
  1089                           prodl	equ	0xFF3
  1090                           indf0	equ	0xFEF
  1091                           plusw0	equ	0xFEB
  1092                           fsr0h	equ	0xFEA
  1093                           fsr0l	equ	0xFE9
  1094                           wreg	equ	0xFE8
  1095                           indf2	equ	0xFDF
  1096                           postinc2	equ	0xFDE
  1097                           postdec2	equ	0xFDD
  1098                           plusw2	equ	0xFDB
  1099                           fsr2h	equ	0xFDA
  1100                           fsr2l	equ	0xFD9
  1101                           status	equ	0xFD8
  1102                           
  1103 ;;
  1104 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1105 ;;
  1106 ;; *************** function _main *****************
  1107 ;; Defined at:
  1108 ;;		line 24 in file "main.c"
  1109 ;; Parameters:    Size  Location     Type
  1110 ;;		None
  1111 ;; Auto vars:     Size  Location     Type
  1112 ;;  aux            20   40[BANK0 ] unsigned char [20]
  1113 ;;  acc_value      18   60[BANK0 ] struct axis_value
  1114 ;;  acc_g          12   78[BANK0 ] struct g_value
  1115 ;;  acc_angulos    12    0        struct degrees
  1116 ;;  z               4    0        float 
  1117 ;;  y               4    0        float 
  1118 ;;  x               4    0        float 
  1119 ;;  temperature     4    0        float 
  1120 ;;  serialn         2    0        unsigned int 
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  1    wreg      void 
  1123 ;; Registers used:
  1124 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1125 ;; Tracked objects:
  1126 ;;		On entry : 0/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1130 ;;      Params:         0       0       0       0       0       0       0
  1131 ;;      Locals:         0      50       0       0       0       0       0
  1132 ;;      Temps:          0       1       0       0       0       0       0
  1133 ;;      Totals:         0      51       0       0       0       0       0
  1134 ;;Total ram usage:       51 bytes
  1135 ;; Hardware stack levels required when called:    8
  1136 ;; This function calls:
  1137 ;;		_ADXL355_Convert_G
  1138 ;;		_ADXL355_Init
  1139 ;;		_ADXL355_Read_Axis
  1140 ;;		_Delay_ms
  1141 ;;		_DisplLines
  1142 ;;		_DisplayOnOff
  1143 ;;		_ES15007_Init_Norm
  1144 ;;		_I2C_Close
  1145 ;;		_I2C_Init
  1146 ;;		_SetPostion
  1147 ;;		_WriteString
  1148 ;;		_initDispl
  1149 ;;		_putrsserial
  1150 ;;		_sprintf
  1151 ;; This function is called by:
  1152 ;;		Startup code after reset
  1153 ;; This function uses a non-reentrant model
  1154 ;;
  1155                           
  1156                           	psect	text0
  1157  006C2C                     __ptext0:
  1158                           	opt stack 0
  1159  006C2C                     _main:
  1160                           	opt stack 23
  1161                           
  1162                           ;main.c: 36: OSCCON = 0b01110010;
  1163                           
  1164                           ;incstack = 0
  1165  006C2C  0E72               	movlw	114
  1166  006C2E  6ED3               	movwf	4051,c	;volatile
  1167                           
  1168                           ;main.c: 38: ADCON1 = 0b00001111;
  1169  006C30  0E0F               	movlw	15
  1170  006C32  6EC1               	movwf	4033,c	;volatile
  1171                           
  1172                           ;main.c: 39: CMCON = 0b00000111;
  1173  006C34  0E07               	movlw	7
  1174  006C36  6EB4               	movwf	4020,c	;volatile
  1175                           
  1176                           ;main.c: 41: TRISA = 0b00000000;
  1177  006C38  6A92               	clrf	3986,c	;volatile
  1178                           
  1179                           ;main.c: 42: TRISB = 0b11111111;
  1180  006C3A  6893               	setf	3987,c	;volatile
  1181                           
  1182                           ;main.c: 43: TRISC = 0b10111001;
  1183  006C3C  0EB9               	movlw	185
  1184  006C3E  6E94               	movwf	3988,c	;volatile
  1185                           
  1186                           ;main.c: 46: TXSTA = 0b00100110;
  1187  006C40  0E26               	movlw	38
  1188  006C42  6EAC               	movwf	4012,c	;volatile
  1189                           
  1190                           ;main.c: 47: RCSTA = 0b10010000;
  1191  006C44  0E90               	movlw	144
  1192  006C46  6EAB               	movwf	4011,c	;volatile
  1193                           
  1194                           ;main.c: 48: BAUDCON = 0b00001010;
  1195  006C48  0E0A               	movlw	10
  1196  006C4A  6EB8               	movwf	4024,c	;volatile
  1197                           
  1198                           ;main.c: 49: SPBRG = 16;
  1199  006C4C  0E10               	movlw	16
  1200  006C4E  6EAF               	movwf	4015,c	;volatile
  1201                           
  1202                           ;main.c: 53: I2C_Close();
  1203  006C50  EC2D  F02F         	call	_I2C_Close	;wreg free
  1204                           
  1205                           ;main.c: 55: I2C_Init(19);
  1206  006C54  0E13               	movlw	19
  1207  006C56  EC84  F02F         	call	_I2C_Init
  1208                           
  1209                           ;main.c: 57: _delay((unsigned long)((50)*(8000000/4000.0)));
  1210  006C5A  0E82               	movlw	130
  1211  006C5C  0100               	movlb	0	; () banked
  1212  006C5E  6FA7               	movwf	??_main& (0+255),b
  1213  006C60  0EDD               	movlw	221
  1214  006C62                     u4917:
  1215  006C62  2EE8               	decfsz	wreg,f,c
  1216  006C64  D7FE               	bra	u4917
  1217  006C66  2FA7               	decfsz	??_main& (0+255),f,b
  1218  006C68  D7FC               	bra	u4917
  1219  006C6A  D000               	nop2	
  1220                           
  1221                           ;main.c: 59: ADXL355_Init(0x01, 0x04);
  1222  006C6C  0E04               	movlw	4
  1223  006C6E  6E06               	movwf	ADXL355_Init@_power_mode,c
  1224  006C70  0E01               	movlw	1
  1225  006C72  ECC9  F02F         	call	_ADXL355_Init
  1226                           
  1227                           ;main.c: 60: initDispl();
  1228  006C76  ECBC  F030         	call	_initDispl	;wreg free
  1229                           
  1230                           ;main.c: 61: DisplayOnOff(0x04);
  1231  006C7A  0E04               	movlw	4
  1232  006C7C  EC3C  F02F         	call	_DisplayOnOff
  1233                           
  1234                           ;main.c: 62: DisplLines(0x38);
  1235  006C80  0E38               	movlw	56
  1236  006C82  EC65  F030         	call	_DisplLines
  1237                           
  1238                           ; BSR set to: 0
  1239                           ;main.c: 63: ES15007_Init_Norm();
  1240  006C86  EC2C  F02F         	call	_ES15007_Init_Norm	;wreg free
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;main.c: 65: putrsserial("ADXL355Z sensor tester\n");
  1244  006C8A  0E83               	movlw	low STR_1
  1245  006C8C  6E02               	movwf	putrsserial@data,c
  1246  006C8E  0E7F               	movlw	high STR_1
  1247  006C90  6E03               	movwf	putrsserial@data+1,c
  1248  006C92  ECE0  F030         	call	_putrsserial	;wreg free
  1249                           
  1250                           ;main.c: 66: putrsserial("LSFO           PUC-Rio\n");
  1251  006C96  0E6B               	movlw	low STR_2
  1252  006C98  6E02               	movwf	putrsserial@data,c
  1253  006C9A  0E7F               	movlw	high STR_2
  1254  006C9C  6E03               	movwf	putrsserial@data+1,c
  1255  006C9E  ECE0  F030         	call	_putrsserial	;wreg free
  1256  006CA2                     l4270:
  1257                           
  1258                           ;main.c: 69: {
  1259                           ;main.c: 70: acc_value = ADXL355_Read_Axis(0xA6);
  1260  006CA2  0EA6               	movlw	166
  1261  006CA4  EC07  F037         	call	_ADXL355_Read_Axis
  1262  006CA8  EE20  F0BC         	lfsr	2,main@acc_value
  1263  006CAC  0E11               	movlw	17
  1264  006CAE                     u4881:
  1265  006CAE  CFEB FFDB          	movff	plusw0,plusw2
  1266  006CB2  06E8               	decf	wreg,f,c
  1267  006CB4  E2FC               	bc	u4881
  1268                           
  1269                           ;main.c: 72: acc_g = ADXL355_Convert_G(acc_value);
  1270  006CB6  EE20  F0BC         	lfsr	2,main@acc_value
  1271  006CBA  EE00  F062         	lfsr	0,ADXL355_Convert_G@raw_value
  1272  006CBE  0E11               	movlw	17
  1273  006CC0                     u4891:
  1274  006CC0  CFDB FFEB          	movff	plusw2,plusw0
  1275  006CC4  06E8               	decf	wreg,f,c
  1276  006CC6  E2FC               	bc	u4891
  1277  006CC8  EC7B  F032         	call	_ADXL355_Convert_G	;wreg free
  1278  006CCC  EE20  F0CE         	lfsr	2,main@acc_g
  1279  006CD0  0E0B               	movlw	11
  1280  006CD2                     u4901:
  1281  006CD2  CFEB FFDB          	movff	plusw0,plusw2
  1282  006CD6  06E8               	decf	wreg,f,c
  1283  006CD8  E2FC               	bc	u4901
  1284                           
  1285                           ;main.c: 74: sprintf(aux, "X: %+08.5fG  ", acc_g.x_axis);
  1286  006CDA  0EA8               	movlw	low main@aux
  1287  006CDC  6E51               	movwf	sprintf@sp,c
  1288  006CDE  0EAB               	movlw	low STR_3
  1289  006CE0  6E52               	movwf	sprintf@f,c
  1290  006CE2  0E7F               	movlw	high STR_3
  1291  006CE4  D886               	call	PL80	;call to abstracted procedure
  1292  006CE6  EC87  F03B         	call	_sprintf	;wreg free
  1293                           
  1294                           ;main.c: 75: putrsserial(aux);
  1295  006CEA  D88D               	call	PL134	;call to abstracted procedure
  1296  006CEC  ECE0  F030         	call	_putrsserial	;wreg free
  1297                           
  1298                           ;main.c: 76: sprintf(aux, "Y: %+08.5fG  ", acc_g.y_axis);
  1299  006CF0  0EA8               	movlw	low main@aux
  1300  006CF2  6E51               	movwf	sprintf@sp,c
  1301  006CF4  0EB9               	movlw	low STR_4
  1302  006CF6  6E52               	movwf	sprintf@f,c
  1303  006CF8  0E7F               	movlw	high STR_4
  1304  006CFA  D85D               	call	PL74	;call to abstracted procedure
  1305  006CFC  EC87  F03B         	call	_sprintf	;wreg free
  1306                           
  1307                           ;main.c: 77: putrsserial(aux);
  1308  006D00  D882               	call	PL134	;call to abstracted procedure
  1309  006D02  ECE0  F030         	call	_putrsserial	;wreg free
  1310                           
  1311                           ;main.c: 78: sprintf(aux, "Z: %+08.5fG  ", acc_g.z_axis);
  1312  006D06  0EA8               	movlw	low main@aux
  1313  006D08  6E51               	movwf	sprintf@sp,c
  1314  006D0A  0EC7               	movlw	low STR_5
  1315  006D0C  6E52               	movwf	sprintf@f,c
  1316  006D0E  0E7F               	movlw	high STR_5
  1317  006D10  D866               	call	PL78	;call to abstracted procedure
  1318  006D12  EC87  F03B         	call	_sprintf	;wreg free
  1319                           
  1320                           ;main.c: 79: putrsserial(aux);
  1321  006D16  D877               	call	PL134	;call to abstracted procedure
  1322  006D18  ECE0  F030         	call	_putrsserial	;wreg free
  1323                           
  1324                           ;main.c: 90: sprintf(aux, "Temp: %06.2f°C\n", acc_value.temp);
  1325  006D1C  0EA8               	movlw	low main@aux
  1326  006D1E  6E51               	movwf	sprintf@sp,c
  1327  006D20  0E9B               	movlw	low STR_6
  1328  006D22  6E52               	movwf	sprintf@f,c
  1329  006D24  0E7F               	movlw	high STR_6
  1330  006D26  D851               	call	PL76	;call to abstracted procedure
  1331  006D28  EC87  F03B         	call	_sprintf	;wreg free
  1332                           
  1333                           ;main.c: 91: putrsserial(aux);
  1334  006D2C  D86C               	call	PL134	;call to abstracted procedure
  1335  006D2E  ECE0  F030         	call	_putrsserial	;wreg free
  1336                           
  1337                           ;main.c: 93: sprintf(aux, "X%+07.4fG", acc_g.x_axis);
  1338  006D32  0EA8               	movlw	low main@aux
  1339  006D34  6E51               	movwf	sprintf@sp,c
  1340  006D36  0EE0               	movlw	low STR_7
  1341  006D38  6E52               	movwf	sprintf@f,c
  1342  006D3A  0E7F               	movlw	high STR_7
  1343  006D3C  D85A               	call	PL80	;call to abstracted procedure
  1344  006D3E  EC87  F03B         	call	_sprintf	;wreg free
  1345                           
  1346                           ;main.c: 94: SetPostion(0);
  1347  006D42  0E00               	movlw	0
  1348  006D44  EC37  F02F         	call	_SetPostion
  1349                           
  1350                           ;main.c: 95: WriteString(aux);
  1351  006D48  0EA8               	movlw	low main@aux
  1352  006D4A  6E06               	movwf	WriteString@stringi,c
  1353  006D4C  EC78  F02F         	call	_WriteString	;wreg free
  1354                           
  1355                           ;main.c: 97: sprintf(aux, "Y%+07.4fG", acc_g.y_axis);
  1356  006D50  0EA8               	movlw	low main@aux
  1357  006D52  6E51               	movwf	sprintf@sp,c
  1358  006D54  0EEA               	movlw	low STR_8
  1359  006D56  6E52               	movwf	sprintf@f,c
  1360  006D58  0E7F               	movlw	high STR_8
  1361  006D5A  D82D               	call	PL74	;call to abstracted procedure
  1362  006D5C  EC87  F03B         	call	_sprintf	;wreg free
  1363                           
  1364                           ;main.c: 98: SetPostion(0+0x20);
  1365  006D60  0E20               	movlw	32
  1366  006D62  EC37  F02F         	call	_SetPostion
  1367                           
  1368                           ;main.c: 99: WriteString(aux);
  1369  006D66  0EA8               	movlw	low main@aux
  1370  006D68  6E06               	movwf	WriteString@stringi,c
  1371  006D6A  EC78  F02F         	call	_WriteString	;wreg free
  1372                           
  1373                           ;main.c: 101: sprintf(aux, "Z%+07.4fG", acc_g.z_axis);
  1374  006D6E  0EA8               	movlw	low main@aux
  1375  006D70  6E51               	movwf	sprintf@sp,c
  1376  006D72  0EF4               	movlw	low STR_9
  1377  006D74  6E52               	movwf	sprintf@f,c
  1378  006D76  0E7F               	movlw	high STR_9
  1379  006D78  D832               	call	PL78	;call to abstracted procedure
  1380  006D7A  EC87  F03B         	call	_sprintf	;wreg free
  1381                           
  1382                           ;main.c: 102: SetPostion(0+0x40);
  1383  006D7E  0E40               	movlw	64
  1384  006D80  EC37  F02F         	call	_SetPostion
  1385                           
  1386                           ;main.c: 103: WriteString(aux);
  1387  006D84  0EA8               	movlw	low main@aux
  1388  006D86  6E06               	movwf	WriteString@stringi,c
  1389  006D88  EC78  F02F         	call	_WriteString	;wreg free
  1390                           
  1391                           ;main.c: 105: sprintf(aux, "T:+%+6.2fC", acc_value.temp);
  1392  006D8C  0EA8               	movlw	low main@aux
  1393  006D8E  6E51               	movwf	sprintf@sp,c
  1394  006D90  0ED5               	movlw	low STR_10
  1395  006D92  6E52               	movwf	sprintf@f,c
  1396  006D94  0E7F               	movlw	high STR_10
  1397  006D96  D819               	call	PL76	;call to abstracted procedure
  1398  006D98  EC87  F03B         	call	_sprintf	;wreg free
  1399                           
  1400                           ;main.c: 106: SetPostion(0+0x60);
  1401  006D9C  0E60               	movlw	96
  1402  006D9E  EC37  F02F         	call	_SetPostion
  1403                           
  1404                           ;main.c: 107: WriteString(aux);
  1405  006DA2  0EA8               	movlw	low main@aux
  1406  006DA4  6E06               	movwf	WriteString@stringi,c
  1407  006DA6  EC78  F02F         	call	_WriteString	;wreg free
  1408                           
  1409                           ;main.c: 109: Delay_ms(1);
  1410  006DAA  6A02               	clrf	Delay_ms@count+1,c
  1411  006DAC  0E01               	movlw	1
  1412  006DAE  6E01               	movwf	Delay_ms@count,c
  1413  006DB0  ECE8  F02F         	call	_Delay_ms	;wreg free
  1414  006DB4  D776               	goto	l4270
  1415  006DB6                     __end_of_main:
  1416                           	opt stack 0
  1417  006DB6                     PL74:
  1418                           	opt stack 23
  1419  006DB6  6E53               	movwf	sprintf@f+1,c
  1420  006DB8  C0D2  F054         	movff	main@acc_g+4,?_sprintf+3
  1421  006DBC  C0D3  F055         	movff	main@acc_g+5,?_sprintf+4
  1422  006DC0  C0D4  F056         	movff	main@acc_g+6,?_sprintf+5
  1423  006DC4  C0D5  F057         	movff	main@acc_g+7,?_sprintf+6
  1424  006DC8  0012               	return	
  1425  006DCA                     __end_ofPL74:
  1426                           	opt stack 0
  1427  006DCA                     PL76:
  1428                           	opt stack 23
  1429  006DCA  6E53               	movwf	sprintf@f+1,c
  1430  006DCC  C0CA  F054         	movff	main@acc_value+14,?_sprintf+3
  1431  006DD0  C0CB  F055         	movff	main@acc_value+15,?_sprintf+4
  1432  006DD4  C0CC  F056         	movff	main@acc_value+16,?_sprintf+5
  1433  006DD8  C0CD  F057         	movff	main@acc_value+17,?_sprintf+6
  1434  006DDC  0012               	return	
  1435  006DDE                     __end_ofPL76:
  1436                           	opt stack 0
  1437  006DDE                     PL78:
  1438                           	opt stack 23
  1439  006DDE  6E53               	movwf	sprintf@f+1,c
  1440  006DE0  C0D6  F054         	movff	main@acc_g+8,?_sprintf+3
  1441  006DE4  C0D7  F055         	movff	main@acc_g+9,?_sprintf+4
  1442  006DE8  C0D8  F056         	movff	main@acc_g+10,?_sprintf+5
  1443  006DEC  C0D9  F057         	movff	main@acc_g+11,?_sprintf+6
  1444  006DF0  0012               	return	
  1445  006DF2                     __end_ofPL78:
  1446                           	opt stack 0
  1447  006DF2                     PL80:
  1448                           	opt stack 23
  1449  006DF2  6E53               	movwf	sprintf@f+1,c
  1450  006DF4  C0CE  F054         	movff	main@acc_g,?_sprintf+3
  1451  006DF8  C0CF  F055         	movff	main@acc_g+1,?_sprintf+4
  1452  006DFC  C0D0  F056         	movff	main@acc_g+2,?_sprintf+5
  1453  006E00  C0D1  F057         	movff	main@acc_g+3,?_sprintf+6
  1454  006E04  0012               	return	
  1455  006E06                     __end_ofPL80:
  1456                           	opt stack 0
  1457  006E06                     PL134:
  1458                           	opt stack 23
  1459  006E06  0EA8               	movlw	low main@aux
  1460  006E08  6E02               	movwf	putrsserial@data,c
  1461  006E0A  6A03               	clrf	putrsserial@data+1,c
  1462  006E0C  0012               	return	
  1463  006E0E                     __end_ofPL134:
  1464                           	opt stack 0
  1465                           tblptru	equ	0xFF8
  1466                           tblptrh	equ	0xFF7
  1467                           tblptrl	equ	0xFF6
  1468                           tablat	equ	0xFF5
  1469                           prodh	equ	0xFF4
  1470                           prodl	equ	0xFF3
  1471                           indf0	equ	0xFEF
  1472                           plusw0	equ	0xFEB
  1473                           fsr0h	equ	0xFEA
  1474                           fsr0l	equ	0xFE9
  1475                           wreg	equ	0xFE8
  1476                           indf2	equ	0xFDF
  1477                           postinc2	equ	0xFDE
  1478                           postdec2	equ	0xFDD
  1479                           plusw2	equ	0xFDB
  1480                           fsr2h	equ	0xFDA
  1481                           fsr2l	equ	0xFD9
  1482                           status	equ	0xFD8
  1483                           
  1484 ;; *************** function _sprintf *****************
  1485 ;; Defined at:
  1486 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;  sp              1   80[COMRAM] PTR unsigned char 
  1489 ;;		 -> main@aux(20), 
  1490 ;;  f               2   81[COMRAM] PTR const unsigned char 
  1491 ;;		 -> STR_10(11), STR_9(10), STR_8(10), STR_7(10), 
  1492 ;;		 -> STR_6(16), STR_5(14), STR_4(14), STR_3(14), 
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;  fval            4  116[COMRAM] PTR const unsigned char 
  1495 ;;  tmpval          4  108[COMRAM] struct .
  1496 ;;  val             4  104[COMRAM] unsigned long 
  1497 ;;  cp              3    0        PTR const unsigned char 
  1498 ;;  flag            2  123[COMRAM] unsigned short 
  1499 ;;  prec            2  120[COMRAM] int 
  1500 ;;  width           2  114[COMRAM] int 
  1501 ;;  exp             2  112[COMRAM] int 
  1502 ;;  len             2    0        unsigned int 
  1503 ;;  c               1  122[COMRAM] char 
  1504 ;;  ap              1  103[COMRAM] PTR void [1]
  1505 ;;		 -> ?_sprintf(2), 
  1506 ;;  d               1    0        unsigned char 
  1507 ;; Return value:  Size  Location     Type
  1508 ;;                  2   80[COMRAM] int 
  1509 ;; Registers used:
  1510 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1511 ;; Tracked objects:
  1512 ;;		On entry : 0/0
  1513 ;;		On exit  : 0/0
  1514 ;;		Unchanged: 0/0
  1515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1516 ;;      Params:         7       0       0       0       0       0       0
  1517 ;;      Locals:        34       0       0       0       0       0       0
  1518 ;;      Temps:          4       0       0       0       0       0       0
  1519 ;;      Totals:        45       0       0       0       0       0       0
  1520 ;;Total ram usage:       45 bytes
  1521 ;; Hardware stack levels used:    1
  1522 ;; Hardware stack levels required when called:    2
  1523 ;; This function calls:
  1524 ;;		___awdiv
  1525 ;;		___fladd
  1526 ;;		___flge
  1527 ;;		___flmul
  1528 ;;		___flneg
  1529 ;;		___flsub
  1530 ;;		___fltol
  1531 ;;		___lldiv
  1532 ;;		___llmod
  1533 ;;		___wmul
  1534 ;;		___xxtofl
  1535 ;;		__div_to_l_
  1536 ;;		__tdiv_to_l_
  1537 ;;		_fround
  1538 ;;		_isdigit
  1539 ;;		_scale
  1540 ;; This function is called by:
  1541 ;;		_main
  1542 ;; This function uses a non-reentrant model
  1543 ;;
  1544                           
  1545                           	psect	text1
  1546  00770E                     __ptext1:
  1547                           	opt stack 0
  1548  00770E                     _sprintf:
  1549                           	opt stack 28
  1550                           
  1551                           ;doprnt.c: 494: va_list ap;
  1552                           ;doprnt.c: 499: signed char c;
  1553                           ;doprnt.c: 501: int width;
  1554                           ;doprnt.c: 504: int prec;
  1555                           ;doprnt.c: 508: unsigned short flag;
  1556                           ;doprnt.c: 515: char d;
  1557                           ;doprnt.c: 516: double fval;
  1558                           ;doprnt.c: 517: int exp;
  1559                           ;doprnt.c: 523: union {
  1560                           ;doprnt.c: 524: unsigned long vd;
  1561                           ;doprnt.c: 525: double integ;
  1562                           ;doprnt.c: 526: } tmpval;
  1563                           ;doprnt.c: 528: unsigned long val;
  1564                           ;doprnt.c: 529: unsigned len;
  1565                           ;doprnt.c: 530: const char * cp;
  1566                           ;doprnt.c: 533: *ap = __va_start();
  1567                           
  1568                           ;incstack = 0
  1569  00770E  0E54               	movlw	low (?_sprintf+3)
  1570  007710  6E68               	movwf	sprintf@ap,c
  1571                           
  1572                           ;doprnt.c: 536: while(c = *f++) {
  1573  007712  D31F               	goto	l4226
  1574  007714                     l3902:
  1575                           
  1576                           ;doprnt.c: 538: if(c != '%')
  1577  007714  0E25               	movlw	37
  1578  007716  187B               	xorwf	sprintf@c,w,c
  1579  007718  E007               	bz	l448
  1580                           
  1581                           ;doprnt.c: 540: {
  1582                           ;doprnt.c: 541: ((*sp++ = (c)));
  1583  00771A  5051               	movf	sprintf@sp,w,c
  1584  00771C  6ED9               	movwf	fsr2l,c
  1585  00771E  6ADA               	clrf	fsr2h,c
  1586  007720  C07B  FFDF         	movff	sprintf@c,indf2
  1587  007724                     l3906:
  1588  007724  2A51               	incf	sprintf@sp,f,c
  1589                           
  1590                           ;doprnt.c: 542: continue;
  1591  007726  D315               	goto	l4226
  1592  007728                     l448:
  1593                           
  1594                           ;doprnt.c: 543: }
  1595                           ;doprnt.c: 546: width = 0;
  1596  007728  6A73               	clrf	sprintf@width,c
  1597  00772A  6A74               	clrf	sprintf@width+1,c
  1598                           
  1599                           ;doprnt.c: 548: flag = 0;
  1600  00772C  6A7C               	clrf	sprintf@flag,c
  1601  00772E  6A7D               	clrf	sprintf@flag+1,c
  1602  007730  D007               	goto	l3916
  1603  007732                     l3908:
  1604                           
  1605                           ;doprnt.c: 561: flag |= 0x01;
  1606  007732  807C               	bsf	sprintf@flag,0,c
  1607  007734  D003               	goto	L1
  1608  007736                     l3910:
  1609                           
  1610                           ;doprnt.c: 568: flag |= 0x02;
  1611  007736  827C               	bsf	sprintf@flag,1,c
  1612  007738  D001               	goto	L1
  1613  00773A                     l3912:
  1614                           
  1615                           ;doprnt.c: 580: flag |= 0x04;
  1616  00773A  847C               	bsf	sprintf@flag,2,c
  1617  00773C                     L1:
  1618                           
  1619                           ;doprnt.c: 581: f++;
  1620  00773C  4A52               	infsnz	sprintf@f,f,c
  1621  00773E  2A53               	incf	sprintf@f+1,f,c
  1622  007740                     l3916:
  1623  007740  DB2F               	call	PL16	;call to abstracted procedure
  1624                           
  1625                           ; Switch size 1, requested type "space"
  1626                           ; Number of cases is 3, Range of values is 32 to 48
  1627                           ; switch strategies available:
  1628                           ; Name         Instructions Cycles
  1629                           ; simple_byte           10     6 (average)
  1630                           ;	Chosen strategy is simple_byte
  1631  007742  0A20               	xorlw	32	; case 32
  1632  007744  E0F6               	bz	l3908
  1633  007746  0A0B               	xorlw	11	; case 43
  1634  007748  E0F6               	bz	l3910
  1635  00774A  0A1B               	xorlw	27	; case 48
  1636  00774C  E0F6               	bz	l3912
  1637                           
  1638                           ;doprnt.c: 589: if(flag & 0x02)
  1639  00774E  B27C               	btfsc	sprintf@flag,1,c
  1640                           
  1641                           ;doprnt.c: 590: flag &= ~0x01;
  1642  007750  907C               	bcf	sprintf@flag,0,c
  1643                           
  1644                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1645  007752  DB26               	call	PL16	;call to abstracted procedure
  1646  007754  ECAD  F02F         	call	_isdigit
  1647  007758  E321               	bnc	l3932
  1648                           
  1649                           ;doprnt.c: 598: width = 0;
  1650  00775A  6A73               	clrf	sprintf@width,c
  1651  00775C  6A74               	clrf	sprintf@width+1,c
  1652  00775E                     l3924:
  1653                           
  1654                           ;doprnt.c: 600: width *= 10;
  1655  00775E  C073  F001         	movff	sprintf@width,___wmul@multiplier
  1656  007762  C074  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  1657  007766  DBA3               	call	PL152	;call to abstracted procedure
  1658  007768  ECFA  F02F         	call	___wmul	;wreg free
  1659  00776C  C001  F073         	movff	?___wmul,sprintf@width
  1660  007770  C002  F074         	movff	?___wmul+1,sprintf@width+1
  1661                           
  1662                           ;doprnt.c: 601: width += *f++ - '0';
  1663  007774  0ED0               	movlw	208
  1664  007776  6E58               	movwf	??_sprintf& (0+255),c
  1665  007778  6859               	setf	(??_sprintf+1)& (0+255),c
  1666  00777A  DB12               	call	PL16	;call to abstracted procedure
  1667  00777C  6E5A               	movwf	(??_sprintf+2)& (0+255),c
  1668  00777E  6A5B               	clrf	(??_sprintf+3)& (0+255),c
  1669  007780  5058               	movf	??_sprintf,w,c
  1670  007782  265A               	addwf	??_sprintf+2,f,c
  1671  007784  5059               	movf	??_sprintf+1,w,c
  1672  007786  225B               	addwfc	??_sprintf+3,f,c
  1673  007788  505A               	movf	??_sprintf+2,w,c
  1674  00778A  2673               	addwf	sprintf@width,f,c
  1675  00778C  505B               	movf	??_sprintf+3,w,c
  1676  00778E  2274               	addwfc	sprintf@width+1,f,c
  1677  007790  4A52               	infsnz	sprintf@f,f,c
  1678  007792  2A53               	incf	sprintf@f+1,f,c
  1679                           
  1680                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1681  007794  DB05               	call	PL16	;call to abstracted procedure
  1682  007796  ECAD  F02F         	call	_isdigit
  1683  00779A  E2E1               	bc	l3924
  1684  00779C                     l3932:
  1685                           
  1686                           ;doprnt.c: 608: }
  1687                           ;doprnt.c: 611: if(*f == '.') {
  1688  00779C  DB01               	call	PL16	;call to abstracted procedure
  1689  00779E  0A2E               	xorlw	46
  1690  0077A0  E11E               	bnz	l461
  1691                           
  1692                           ;doprnt.c: 612: flag |= 0x4000;
  1693  0077A2  8C7D               	bsf	sprintf@flag+1,6,c
  1694                           
  1695                           ;doprnt.c: 613: f++;
  1696  0077A4  4A52               	infsnz	sprintf@f,f,c
  1697  0077A6  2A53               	incf	sprintf@f+1,f,c
  1698                           
  1699                           ;doprnt.c: 620: {
  1700                           ;doprnt.c: 621: prec = 0;
  1701  0077A8  6A79               	clrf	sprintf@prec,c
  1702  0077AA  6A7A               	clrf	sprintf@prec+1,c
  1703                           
  1704                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1705  0077AC  D013               	goto	l3942
  1706  0077AE                     l3938:
  1707                           
  1708                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1709  0077AE  C079  F001         	movff	sprintf@prec,___wmul@multiplier
  1710  0077B2  C07A  F002         	movff	sprintf@prec+1,___wmul@multiplier+1
  1711  0077B6  DB7B               	call	PL152	;call to abstracted procedure
  1712  0077B8  ECFA  F02F         	call	___wmul	;wreg free
  1713  0077BC  DAF1               	call	PL16	;call to abstracted procedure
  1714  0077BE  2601               	addwf	?___wmul,f,c
  1715  0077C0  0E00               	movlw	0
  1716  0077C2  2202               	addwfc	?___wmul+1,f,c
  1717  0077C4  0ED0               	movlw	208
  1718  0077C6  2401               	addwf	?___wmul,w,c
  1719  0077C8  6E79               	movwf	sprintf@prec,c
  1720  0077CA  0EFF               	movlw	255
  1721  0077CC  2002               	addwfc	?___wmul+1,w,c
  1722  0077CE  6E7A               	movwf	sprintf@prec+1,c
  1723  0077D0  4A52               	infsnz	sprintf@f,f,c
  1724  0077D2  2A53               	incf	sprintf@f+1,f,c
  1725  0077D4                     l3942:
  1726  0077D4  DAE5               	call	PL16	;call to abstracted procedure
  1727  0077D6  ECAD  F02F         	call	_isdigit
  1728  0077DA  E307               	bnc	l3950
  1729  0077DC  D7E8               	goto	l3938
  1730  0077DE                     l461:
  1731                           
  1732                           ;doprnt.c: 626: prec = 0;
  1733  0077DE  6A79               	clrf	sprintf@prec,c
  1734  0077E0  6A7A               	clrf	sprintf@prec+1,c
  1735                           
  1736                           ;doprnt.c: 628: flag |= 0x1000;
  1737  0077E2  887D               	bsf	sprintf@flag+1,4,c
  1738  0077E4  D002               	goto	l3950
  1739  0077E6                     l3946:
  1740                           
  1741                           ;doprnt.c: 663: flag |= 0x400;
  1742  0077E6  847D               	bsf	sprintf@flag+1,2,c
  1743                           
  1744                           ;doprnt.c: 664: break;
  1745  0077E8  D008               	goto	l3952
  1746  0077EA                     l3950:
  1747  0077EA  C052  FFF6         	movff	sprintf@f,tblptrl
  1748  0077EE  DB3E               	call	PL94	;call to abstracted procedure
  1749                           
  1750                           ; Switch size 1, requested type "space"
  1751                           ; Number of cases is 2, Range of values is 0 to 102
  1752                           ; switch strategies available:
  1753                           ; Name         Instructions Cycles
  1754                           ; simple_byte            7     4 (average)
  1755                           ;	Chosen strategy is simple_byte
  1756  0077F0  E101 D2B4          	bz	l4228
  1757  0077F4  0A66               	xorlw	102	; case 102
  1758  0077F6  E0F7               	bz	l3946
  1759  0077F8  D2AC               	goto	l4226
  1760  0077FA                     l3952:
  1761                           
  1762                           ;doprnt.c: 825: if(flag & (0x700)) {
  1763  0077FA  0E07               	movlw	7
  1764  0077FC  147D               	andwf	sprintf@flag+1,w,c
  1765  0077FE  E101 D21D          	bz	l4150
  1766                           
  1767                           ;doprnt.c: 827: if(flag & 0x1000)
  1768  007802  A87D               	btfss	sprintf@flag+1,4,c
  1769  007804  D003               	goto	l3958
  1770                           
  1771                           ;doprnt.c: 829: prec = 6;
  1772  007806  6A7A               	clrf	sprintf@prec+1,c
  1773  007808  0E06               	movlw	6
  1774  00780A  6E79               	movwf	sprintf@prec,c
  1775  00780C                     l3958:
  1776                           
  1777                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1778  00780C  5068               	movf	sprintf@ap,w,c
  1779  00780E  6ED9               	movwf	fsr2l,c
  1780  007810  6ADA               	clrf	fsr2h,c
  1781  007812  CFDE F075          	movff	postinc2,sprintf@fval
  1782  007816  CFDE F076          	movff	postinc2,sprintf@fval+1
  1783  00781A  CFDE F077          	movff	postinc2,sprintf@fval+2
  1784  00781E  CFDE F078          	movff	postinc2,sprintf@fval+3
  1785  007822  0E04               	movlw	4
  1786  007824  2668               	addwf	sprintf@ap,f,c
  1787                           
  1788                           ;doprnt.c: 831: if(fval < 0.0) {
  1789  007826  AE78               	btfss	sprintf@fval+3,7,c
  1790  007828  D014               	goto	l3968
  1791                           
  1792                           ;doprnt.c: 832: fval = -fval;
  1793  00782A  C075  F001         	movff	sprintf@fval,___flneg@f1
  1794  00782E  C076  F002         	movff	sprintf@fval+1,___flneg@f1+1
  1795  007832  C077  F003         	movff	sprintf@fval+2,___flneg@f1+2
  1796  007836  C078  F004         	movff	sprintf@fval+3,___flneg@f1+3
  1797  00783A  ECD8  F02F         	call	___flneg	;wreg free
  1798  00783E  C001  F075         	movff	?___flneg,sprintf@fval
  1799  007842  C002  F076         	movff	?___flneg+1,sprintf@fval+1
  1800  007846  C003  F077         	movff	?___flneg+2,sprintf@fval+2
  1801  00784A  C004  F078         	movff	?___flneg+3,sprintf@fval+3
  1802                           
  1803                           ;doprnt.c: 833: flag |= 0x03;
  1804  00784E  0E03               	movlw	3
  1805  007850  127C               	iorwf	sprintf@flag,f,c
  1806  007852                     l3968:
  1807                           
  1808                           ;doprnt.c: 834: }
  1809                           ;doprnt.c: 835: exp = 0;
  1810  007852  6A71               	clrf	sprintf@exp,c
  1811  007854  6A72               	clrf	sprintf@exp+1,c
  1812                           
  1813                           ;doprnt.c: 836: if( fval!=0) {
  1814  007856  DB1C               	call	PL136	;call to abstracted procedure
  1815  007858  E05B               	bz	l3996
  1816                           
  1817                           ;doprnt.c: 837: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
  1818  00785A  3477               	rlcf	sprintf@fval+2,w,c
  1819  00785C  3478               	rlcf	sprintf@fval+3,w,c
  1820  00785E  0F82               	addlw	130
  1821  007860  6E71               	movwf	sprintf@exp,c
  1822  007862  6A72               	clrf	sprintf@exp+1,c
  1823  007864  0EFF               	movlw	255
  1824  007866  2272               	addwfc	sprintf@exp+1,f,c
  1825                           
  1826                           ;doprnt.c: 838: exp--;
  1827  007868  0671               	decf	sprintf@exp,f,c
  1828  00786A  A0D8               	btfss	status,0,c
  1829  00786C  0672               	decf	sprintf@exp+1,f,c
  1830                           
  1831                           ;doprnt.c: 839: exp *= 3;
  1832  00786E  C071  F001         	movff	sprintf@exp,___wmul@multiplier
  1833  007872  C072  F002         	movff	sprintf@exp+1,___wmul@multiplier+1
  1834  007876  6A04               	clrf	___wmul@multiplicand+1,c
  1835  007878  0E03               	movlw	3
  1836  00787A  6E03               	movwf	___wmul@multiplicand,c
  1837  00787C  ECFA  F02F         	call	___wmul	;wreg free
  1838  007880  C001  F071         	movff	?___wmul,sprintf@exp
  1839  007884  C002  F072         	movff	?___wmul+1,sprintf@exp+1
  1840                           
  1841                           ;doprnt.c: 840: exp /= 10;
  1842  007888  C071  F007         	movff	sprintf@exp,___awdiv@dividend
  1843  00788C  C072  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1844  007890  6A0A               	clrf	___awdiv@divisor+1,c
  1845  007892  0E0A               	movlw	10
  1846  007894  6E09               	movwf	___awdiv@divisor,c
  1847  007896  ECAB  F031         	call	___awdiv	;wreg free
  1848  00789A  C007  F071         	movff	?___awdiv,sprintf@exp
  1849  00789E  C008  F072         	movff	?___awdiv+1,sprintf@exp+1
  1850                           
  1851                           ;doprnt.c: 841: if(exp < 0)
  1852  0078A2  AE72               	btfss	sprintf@exp+1,7,c
  1853  0078A4  D003               	goto	l3984
  1854                           
  1855                           ;doprnt.c: 842: exp--;
  1856  0078A6  0671               	decf	sprintf@exp,f,c
  1857  0078A8  A0D8               	btfss	status,0,c
  1858  0078AA  0672               	decf	sprintf@exp+1,f,c
  1859  0078AC                     l3984:
  1860                           
  1861                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1862  0078AC  5071               	movf	sprintf@exp,w,c
  1863  0078AE  0800               	sublw	0
  1864  0078B0  EC2D  F039         	call	_scale
  1865  0078B4  DAE4               	call	PL102	;call to abstracted procedure
  1866                           
  1867                           ;doprnt.c: 847: tmpval.integ *= fval;
  1868  0078B6  C06D  F00F         	movff	sprintf@tmpval,___flmul@b
  1869  0078BA  C06E  F010         	movff	sprintf@tmpval+1,___flmul@b+1
  1870  0078BE  C06F  F011         	movff	sprintf@tmpval+2,___flmul@b+2
  1871  0078C2  C070  F012         	movff	sprintf@tmpval+3,___flmul@b+3
  1872  0078C6  DAB7               	call	PL84	;call to abstracted procedure
  1873  0078C8  EC19  F038         	call	___flmul	;wreg free
  1874  0078CC  C00F  F06D         	movff	?___flmul,sprintf@tmpval
  1875  0078D0  C010  F06E         	movff	?___flmul+1,sprintf@tmpval+1
  1876  0078D4  C011  F06F         	movff	?___flmul+2,sprintf@tmpval+2
  1877  0078D8  C012  F070         	movff	?___flmul+3,sprintf@tmpval+3
  1878                           
  1879                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1880  0078DC  DA88               	call	PL48	;call to abstracted procedure
  1881  0078DE  6A05               	clrf	___flge@ff2,c
  1882  0078E0  6A06               	clrf	___flge@ff2+1,c
  1883  0078E2  0E80               	movlw	128
  1884  0078E4  6E07               	movwf	___flge@ff2+2,c
  1885  0078E6  0E3F               	movlw	63
  1886  0078E8  6E08               	movwf	___flge@ff2+3,c
  1887  0078EA  ECE7  F031         	call	___flge	;wreg free
  1888  0078EE  E204               	bc	l3992
  1889                           
  1890                           ;doprnt.c: 849: exp--;
  1891  0078F0  0671               	decf	sprintf@exp,f,c
  1892  0078F2  A0D8               	btfss	status,0,c
  1893  0078F4  0672               	decf	sprintf@exp+1,f,c
  1894  0078F6  D00C               	goto	l3996
  1895  0078F8                     l3992:
  1896                           
  1897                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1898  0078F8  DA7A               	call	PL48	;call to abstracted procedure
  1899  0078FA  6A05               	clrf	___flge@ff2,c
  1900  0078FC  6A06               	clrf	___flge@ff2+1,c
  1901  0078FE  0E20               	movlw	32
  1902  007900  6E07               	movwf	___flge@ff2+2,c
  1903  007902  0E41               	movlw	65
  1904  007904  6E08               	movwf	___flge@ff2+3,c
  1905  007906  ECE7  F031         	call	___flge	;wreg free
  1906  00790A  E302               	bnc	l3996
  1907                           
  1908                           ;doprnt.c: 851: exp++;
  1909  00790C  4A71               	infsnz	sprintf@exp,f,c
  1910  00790E  2A72               	incf	sprintf@exp+1,f,c
  1911  007910                     l3996:
  1912                           
  1913                           ;doprnt.c: 852: }
  1914                           ;doprnt.c: 1112: if(prec <= 12)
  1915  007910  BE7A               	btfsc	sprintf@prec+1,7,c
  1916  007912  D005               	goto	l3998
  1917  007914  507A               	movf	sprintf@prec+1,w,c
  1918  007916  E120               	bnz	l4000
  1919  007918  0E0D               	movlw	13
  1920  00791A  5C79               	subwf	sprintf@prec,w,c
  1921  00791C  E21D               	bc	l4000
  1922  00791E                     l3998:
  1923                           
  1924                           ;doprnt.c: 1113: fval += fround(prec);
  1925  00791E  C075  F039         	movff	sprintf@fval,___fladd@b
  1926  007922  C076  F03A         	movff	sprintf@fval+1,___fladd@b+1
  1927  007926  C077  F03B         	movff	sprintf@fval+2,___fladd@b+2
  1928  00792A  C078  F03C         	movff	sprintf@fval+3,___fladd@b+3
  1929  00792E  5079               	movf	sprintf@prec,w,c
  1930  007930  EC7F  F034         	call	_fround
  1931  007934  C028  F03D         	movff	?_fround,___fladd@a
  1932  007938  C029  F03E         	movff	?_fround+1,___fladd@a+1
  1933  00793C  C02A  F03F         	movff	?_fround+2,___fladd@a+2
  1934  007940  C02B  F040         	movff	?_fround+3,___fladd@a+3
  1935  007944  EC58  F03A         	call	___fladd	;wreg free
  1936  007948  C039  F075         	movff	?___fladd,sprintf@fval
  1937  00794C  C03A  F076         	movff	?___fladd+1,sprintf@fval+1
  1938  007950  C03B  F077         	movff	?___fladd+2,sprintf@fval+2
  1939  007954  C03C  F078         	movff	?___fladd+3,sprintf@fval+3
  1940  007958                     l4000:
  1941                           
  1942                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1943  007958  BE72               	btfsc	sprintf@exp+1,7,c
  1944  00795A  D005               	goto	l4002
  1945  00795C  5072               	movf	sprintf@exp+1,w,c
  1946  00795E  E114               	bnz	l4008
  1947  007960  0E0A               	movlw	10
  1948  007962  5C71               	subwf	sprintf@exp,w,c
  1949  007964  E211               	bc	l4008
  1950  007966                     l4002:
  1951  007966  DA94               	call	PL136	;call to abstracted procedure
  1952  007968  E043               	bz	l4022
  1953  00796A  DA77               	call	PL90	;call to abstracted procedure
  1954  00796C  EC2D  F032         	call	___fltol	;wreg free
  1955  007970  5031               	movf	?___fltol,w,c
  1956  007972  1032               	iorwf	?___fltol+1,w,c
  1957  007974  1033               	iorwf	?___fltol+2,w,c
  1958  007976  1034               	iorwf	?___fltol+3,w,c
  1959  007978  E13B               	bnz	l4022
  1960  00797A  BE72               	btfsc	sprintf@exp+1,7,c
  1961  00797C  D039               	goto	l4022
  1962  00797E  5072               	movf	sprintf@exp+1,w,c
  1963  007980  E103               	bnz	u4440
  1964  007982  0E02               	movlw	2
  1965  007984  5C71               	subwf	sprintf@exp,w,c
  1966  007986  E334               	bnc	l4022
  1967  007988                     u4440:
  1968  007988                     l4008:
  1969                           
  1970                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1971  007988  DA32               	call	PL48	;call to abstracted procedure
  1972  00798A  0E5F               	movlw	95
  1973  00798C  6E05               	movwf	___flge@ff2,c
  1974  00798E  0E70               	movlw	112
  1975  007990  6E06               	movwf	___flge@ff2+1,c
  1976  007992  0E89               	movlw	137
  1977  007994  6E07               	movwf	___flge@ff2+2,c
  1978  007996  0E40               	movlw	64
  1979  007998  6E08               	movwf	___flge@ff2+3,c
  1980  00799A  ECE7  F031         	call	___flge	;wreg free
  1981                           
  1982                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1983  00799E  0EF7               	movlw	247
  1984  0079A0  B0D8               	btfsc	status,0,c
  1985                           
  1986                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1987  0079A2  0EF8               	movlw	248
  1988                           
  1989                           ;doprnt.c: 1122: }else{
  1990  0079A4  2671               	addwf	sprintf@exp,f,c
  1991  0079A6  0EFF               	movlw	255
  1992  0079A8  2272               	addwfc	sprintf@exp+1,f,c
  1993                           
  1994                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1995  0079AA  5071               	movf	sprintf@exp,w,c
  1996  0079AC  EC2D  F039         	call	_scale
  1997  0079B0  DA66               	call	PL102	;call to abstracted procedure
  1998  0079B2  C075  F001         	movff	sprintf@fval,__div_to_l_@f1
  1999  0079B6  C076  F002         	movff	sprintf@fval+1,__div_to_l_@f1+1
  2000  0079BA  C077  F003         	movff	sprintf@fval+2,__div_to_l_@f1+2
  2001  0079BE  C078  F004         	movff	sprintf@fval+3,__div_to_l_@f1+3
  2002  0079C2  C06D  F005         	movff	sprintf@tmpval,__div_to_l_@f2
  2003  0079C6  C06E  F006         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  2004  0079CA  C06F  F007         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  2005  0079CE  C070  F008         	movff	sprintf@tmpval+3,__div_to_l_@f2+3
  2006  0079D2  ECD6  F032         	call	__div_to_l_	;wreg free
  2007  0079D6  C001  F069         	movff	?__div_to_l_,sprintf@val
  2008  0079DA  C002  F06A         	movff	?__div_to_l_+1,sprintf@val+1
  2009  0079DE  C003  F06B         	movff	?__div_to_l_+2,sprintf@val+2
  2010  0079E2  C004  F06C         	movff	?__div_to_l_+3,sprintf@val+3
  2011                           
  2012                           ;doprnt.c: 1129: fval = 0.0;
  2013  0079E6  6A75               	clrf	sprintf@fval,c
  2014  0079E8  6A76               	clrf	sprintf@fval+1,c
  2015  0079EA  6A77               	clrf	sprintf@fval+2,c
  2016  0079EC  6A78               	clrf	sprintf@fval+3,c
  2017                           
  2018                           ;doprnt.c: 1130: } else {
  2019  0079EE  D02B               	goto	l4026
  2020  0079F0                     l4022:
  2021                           
  2022                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2023  0079F0  DA34               	call	PL90	;call to abstracted procedure
  2024  0079F2  EC2D  F032         	call	___fltol	;wreg free
  2025  0079F6  DA28               	call	PL88	;call to abstracted procedure
  2026                           
  2027                           ;doprnt.c: 1132: fval -= (double)val;
  2028  0079F8  C075  F049         	movff	sprintf@fval,___flsub@b
  2029  0079FC  C076  F04A         	movff	sprintf@fval+1,___flsub@b+1
  2030  007A00  C077  F04B         	movff	sprintf@fval+2,___flsub@b+2
  2031  007A04  C078  F04C         	movff	sprintf@fval+3,___flsub@b+3
  2032  007A08  C069  F001         	movff	sprintf@val,___xxtofl@val
  2033  007A0C  C06A  F002         	movff	sprintf@val+1,___xxtofl@val+1
  2034  007A10  C06B  F003         	movff	sprintf@val+2,___xxtofl@val+2
  2035  007A14  C06C  F004         	movff	sprintf@val+3,___xxtofl@val+3
  2036  007A18  0E00               	movlw	0
  2037  007A1A  ECF7  F033         	call	___xxtofl
  2038  007A1E  C001  F04D         	movff	?___xxtofl,___flsub@a
  2039  007A22  C002  F04E         	movff	?___xxtofl+1,___flsub@a+1
  2040  007A26  C003  F04F         	movff	?___xxtofl+2,___flsub@a+2
  2041  007A2A  C004  F050         	movff	?___xxtofl+3,___flsub@a+3
  2042  007A2E  EC80  F030         	call	___flsub	;wreg free
  2043  007A32  C049  F075         	movff	?___flsub,sprintf@fval
  2044  007A36  C04A  F076         	movff	?___flsub+1,sprintf@fval+1
  2045  007A3A  C04B  F077         	movff	?___flsub+2,sprintf@fval+2
  2046  007A3E  C04C  F078         	movff	?___flsub+3,sprintf@fval+3
  2047                           
  2048                           ;doprnt.c: 1133: exp = 0;
  2049  007A42  6A71               	clrf	sprintf@exp,c
  2050  007A44  6A72               	clrf	sprintf@exp+1,c
  2051  007A46                     l4026:
  2052                           
  2053                           ;doprnt.c: 1134: }
  2054                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2055  007A46  0E01               	movlw	1
  2056  007A48  6E7B               	movwf	sprintf@c,c
  2057  007A4A                     l4032:
  2058                           
  2059                           ;doprnt.c: 1137: if(val < dpowers[c])
  2060  007A4A  D9B1               	call	PL24	;call to abstracted procedure
  2061  007A4C  50F5               	movf	tablat,w,c
  2062  007A4E  5C69               	subwf	sprintf@val,w,c
  2063  007A50  0009               	tblrd		*+
  2064  007A52  50F5               	movf	tablat,w,c
  2065  007A54  586A               	subwfb	sprintf@val+1,w,c
  2066  007A56  0009               	tblrd		*+
  2067  007A58  50F5               	movf	tablat,w,c
  2068  007A5A  586B               	subwfb	sprintf@val+2,w,c
  2069  007A5C  0009               	tblrd		*+
  2070  007A5E  50F5               	movf	tablat,w,c
  2071  007A60  586C               	subwfb	sprintf@val+3,w,c
  2072  007A62  E304               	bnc	l4040
  2073  007A64  2A7B               	incf	sprintf@c,f,c
  2074  007A66  0E0A               	movlw	10
  2075  007A68  187B               	xorwf	sprintf@c,w,c
  2076  007A6A  E1EF               	bnz	l4032
  2077  007A6C                     l4040:
  2078                           
  2079                           ;doprnt.c: 1142: width -= prec + c + exp;
  2080  007A6C  C07B  F058         	movff	sprintf@c,??_sprintf
  2081  007A70  6A59               	clrf	(??_sprintf+1)& (0+255),c
  2082  007A72  BE58               	btfsc	??_sprintf& (0+255),7,c
  2083  007A74  0659               	decf	(??_sprintf+1)& (0+255),f,c
  2084  007A76  5079               	movf	sprintf@prec,w,c
  2085  007A78  2658               	addwf	??_sprintf,f,c
  2086  007A7A  507A               	movf	sprintf@prec+1,w,c
  2087  007A7C  2259               	addwfc	??_sprintf+1,f,c
  2088  007A7E  5071               	movf	sprintf@exp,w,c
  2089  007A80  2658               	addwf	??_sprintf,f,c
  2090  007A82  5072               	movf	sprintf@exp+1,w,c
  2091  007A84  2259               	addwfc	??_sprintf+1,f,c
  2092  007A86  5058               	movf	??_sprintf,w,c
  2093  007A88  5E73               	subwf	sprintf@width,f,c
  2094  007A8A  5059               	movf	??_sprintf+1,w,c
  2095  007A8C  5A74               	subwfb	sprintf@width+1,f,c
  2096                           
  2097                           ;doprnt.c: 1143: if(
  2098                           ;doprnt.c: 1147: prec)
  2099  007A8E  5079               	movf	sprintf@prec,w,c
  2100  007A90  107A               	iorwf	sprintf@prec+1,w,c
  2101  007A92  E003               	bz	l4044
  2102                           
  2103                           ;doprnt.c: 1148: width--;
  2104  007A94  0673               	decf	sprintf@width,f,c
  2105  007A96  A0D8               	btfss	status,0,c
  2106  007A98  0674               	decf	sprintf@width+1,f,c
  2107  007A9A                     l4044:
  2108                           
  2109                           ;doprnt.c: 1149: if(flag & 0x03)
  2110  007A9A  DA04               	call	PL150	;call to abstracted procedure
  2111  007A9C  E003               	bz	l4048
  2112                           
  2113                           ;doprnt.c: 1150: width--;
  2114  007A9E  0673               	decf	sprintf@width,f,c
  2115  007AA0  A0D8               	btfss	status,0,c
  2116  007AA2  0674               	decf	sprintf@width+1,f,c
  2117  007AA4                     l4048:
  2118                           
  2119                           ;doprnt.c: 1153: if(flag & 0x04) {
  2120  007AA4  A47C               	btfss	sprintf@flag,2,c
  2121  007AA6  D025               	goto	l4080
  2122                           
  2123                           ;doprnt.c: 1155: if(flag & 0x02)
  2124  007AA8  A27C               	btfss	sprintf@flag,1,c
  2125  007AAA  D00F               	goto	l497
  2126                           
  2127                           ;doprnt.c: 1159: ((*sp++ = (flag & 0x01 ? '-' : '+')));
  2128  007AAC  B07C               	btfsc	sprintf@flag,0,c
  2129  007AAE  D003               	goto	l4056
  2130  007AB0  6A61               	clrf	_sprintf$1014+1,c
  2131  007AB2  0E2B               	movlw	43
  2132  007AB4  D002               	goto	L3
  2133  007AB6                     l4056:
  2134  007AB6  6A61               	clrf	_sprintf$1014+1,c
  2135  007AB8  0E2D               	movlw	45
  2136  007ABA                     L3:
  2137  007ABA  6E60               	movwf	_sprintf$1014,c
  2138  007ABC  5051               	movf	sprintf@sp,w,c
  2139  007ABE  6ED9               	movwf	fsr2l,c
  2140  007AC0  6ADA               	clrf	fsr2h,c
  2141  007AC2  C060  FFDF         	movff	_sprintf$1014,indf2
  2142  007AC6                     l4060:
  2143  007AC6  2A51               	incf	sprintf@sp,f,c
  2144  007AC8  D008               	goto	l4072
  2145  007ACA                     l497:
  2146                           
  2147                           ;doprnt.c: 1161: else
  2148                           ;doprnt.c: 1164: if(flag & 0x01)
  2149  007ACA  A07C               	btfss	sprintf@flag,0,c
  2150  007ACC  D006               	goto	l4072
  2151                           
  2152                           ;doprnt.c: 1165: ((*sp++ = (' ')));
  2153  007ACE  D9AD               	call	PL56	;call to abstracted procedure
  2154  007AD0  D7FA               	goto	l4060
  2155  007AD2                     l4066:
  2156                           
  2157                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  2158  007AD2  D996               	call	PL50	;call to abstracted procedure
  2159                           
  2160                           ;doprnt.c: 1170: width--;
  2161  007AD4  0673               	decf	sprintf@width,f,c
  2162  007AD6  A0D8               	btfss	status,0,c
  2163  007AD8  0674               	decf	sprintf@width+1,f,c
  2164  007ADA                     l4072:
  2165  007ADA  BE74               	btfsc	sprintf@width+1,7,c
  2166  007ADC  D031               	goto	l4104
  2167  007ADE  5074               	movf	sprintf@width+1,w,c
  2168  007AE0  E1F8               	bnz	l4066
  2169  007AE2  0473               	decf	sprintf@width,w,c
  2170  007AE4  E32D               	bnc	l4104
  2171  007AE6  D7F5               	goto	l4066
  2172  007AE8                     l4074:
  2173                           
  2174                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2175  007AE8  D9A0               	call	PL56	;call to abstracted procedure
  2176  007AEA  2A51               	incf	sprintf@sp,f,c
  2177                           
  2178                           ;doprnt.c: 1182: width--;
  2179  007AEC  0673               	decf	sprintf@width,f,c
  2180  007AEE  A0D8               	btfss	status,0,c
  2181  007AF0  0674               	decf	sprintf@width+1,f,c
  2182  007AF2                     l4080:
  2183  007AF2  BE74               	btfsc	sprintf@width+1,7,c
  2184  007AF4  D004               	goto	l510
  2185  007AF6  5074               	movf	sprintf@width+1,w,c
  2186  007AF8  E1F7               	bnz	l4074
  2187  007AFA  0473               	decf	sprintf@width,w,c
  2188  007AFC  E2F5               	bc	l4074
  2189  007AFE                     l510:
  2190                           
  2191                           ;doprnt.c: 1183: }
  2192                           ;doprnt.c: 1186: if(flag & 0x02)
  2193  007AFE  A27C               	btfss	sprintf@flag,1,c
  2194  007B00  D00F               	goto	l511
  2195                           
  2196                           ;doprnt.c: 1190: ((*sp++ = (flag & 0x01 ? '-' : '+')));
  2197  007B02  B07C               	btfsc	sprintf@flag,0,c
  2198  007B04  D003               	goto	l4086
  2199  007B06  6A63               	clrf	_sprintf$1015+1,c
  2200  007B08  0E2B               	movlw	43
  2201  007B0A  D002               	goto	L4
  2202  007B0C                     l4086:
  2203  007B0C  6A63               	clrf	_sprintf$1015+1,c
  2204  007B0E  0E2D               	movlw	45
  2205  007B10                     L4:
  2206  007B10  6E62               	movwf	_sprintf$1015,c
  2207  007B12  5051               	movf	sprintf@sp,w,c
  2208  007B14  6ED9               	movwf	fsr2l,c
  2209  007B16  6ADA               	clrf	fsr2h,c
  2210  007B18  C062  FFDF         	movff	_sprintf$1015,indf2
  2211  007B1C                     l4090:
  2212  007B1C  2A51               	incf	sprintf@sp,f,c
  2213  007B1E  D010               	goto	l4104
  2214  007B20                     l511:
  2215                           
  2216                           ;doprnt.c: 1192: else if(flag & 0x01)
  2217  007B20  A07C               	btfss	sprintf@flag,0,c
  2218  007B22  D00E               	goto	l4104
  2219                           
  2220                           ;doprnt.c: 1193: ((*sp++ = (' ')));
  2221  007B24  5051               	movf	sprintf@sp,w,c
  2222  007B26  6ED9               	movwf	fsr2l,c
  2223  007B28  6ADA               	clrf	fsr2h,c
  2224  007B2A  0E20               	movlw	32
  2225  007B2C  D007               	goto	L5
  2226  007B2E                     l4096:
  2227                           
  2228                           ;doprnt.c: 1200: {
  2229                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2230  007B2E  D91B               	call	PL8	;call to abstracted procedure
  2231  007B30  EC70  F031         	call	___lldiv	;wreg free
  2232                           
  2233                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2234  007B34  D946               	call	PL30	;call to abstracted procedure
  2235  007B36  EC0B  F031         	call	___llmod	;wreg free
  2236                           
  2237                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2238  007B3A  D969               	call	PL54	;call to abstracted procedure
  2239  007B3C                     L5:
  2240  007B3C  6EDF               	movwf	indf2,c
  2241  007B3E  D7EE               	goto	l4090
  2242  007B40                     l4104:
  2243  007B40  067B               	decf	sprintf@c,f,c
  2244  007B42  287B               	incf	sprintf@c,w,c
  2245  007B44  E005               	bz	l4112
  2246  007B46  D7F3               	goto	l4096
  2247  007B48                     l4106:
  2248                           
  2249                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2250  007B48  D95B               	call	PL50	;call to abstracted procedure
  2251                           
  2252                           ;doprnt.c: 1209: exp--;
  2253  007B4A  0671               	decf	sprintf@exp,f,c
  2254  007B4C  A0D8               	btfss	status,0,c
  2255  007B4E  0672               	decf	sprintf@exp+1,f,c
  2256  007B50                     l4112:
  2257  007B50  BE72               	btfsc	sprintf@exp+1,7,c
  2258  007B52  D004               	goto	l4114
  2259  007B54  5072               	movf	sprintf@exp+1,w,c
  2260  007B56  E1F8               	bnz	l4106
  2261  007B58  0471               	decf	sprintf@exp,w,c
  2262  007B5A  E2F6               	bc	l4106
  2263  007B5C                     l4114:
  2264                           
  2265                           ;doprnt.c: 1210: }
  2266                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2267  007B5C  BE7A               	btfsc	sprintf@prec+1,7,c
  2268  007B5E  D008               	goto	l524
  2269  007B60  507A               	movf	sprintf@prec+1,w,c
  2270  007B62  E103               	bnz	u4610
  2271  007B64  0E09               	movlw	9
  2272  007B66  5C79               	subwf	sprintf@prec,w,c
  2273  007B68  E303               	bnc	l524
  2274  007B6A                     u4610:
  2275                           
  2276                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2277  007B6A  0E08               	movlw	8
  2278  007B6C  6E7B               	movwf	sprintf@c,c
  2279  007B6E  D002               	goto	l4118
  2280  007B70                     l524:
  2281                           
  2282                           ;doprnt.c: 1213: else
  2283                           ;doprnt.c: 1214: c = prec;
  2284  007B70  C079  F07B         	movff	sprintf@prec,sprintf@c
  2285  007B74                     l4118:
  2286                           
  2287                           ;doprnt.c: 1215: prec -= c;
  2288  007B74  507B               	movf	sprintf@c,w,c
  2289  007B76  5E79               	subwf	sprintf@prec,f,c
  2290  007B78  0E00               	movlw	0
  2291  007B7A  BE7B               	btfsc	sprintf@c,7,c
  2292  007B7C  0EFF               	movlw	255
  2293  007B7E  5A7A               	subwfb	sprintf@prec+1,f,c
  2294                           
  2295                           ;doprnt.c: 1219: if(c)
  2296  007B80  507B               	movf	sprintf@c,w,c
  2297  007B82  E006               	bz	l4126
  2298                           
  2299                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2300  007B84  5051               	movf	sprintf@sp,w,c
  2301  007B86  6ED9               	movwf	fsr2l,c
  2302  007B88  6ADA               	clrf	fsr2h,c
  2303  007B8A  0E2E               	movlw	46
  2304  007B8C  6EDF               	movwf	indf2,c
  2305  007B8E  2A51               	incf	sprintf@sp,f,c
  2306  007B90                     l4126:
  2307                           
  2308                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2309  007B90  507B               	movf	sprintf@c,w,c
  2310  007B92  EC2D  F039         	call	_scale
  2311  007B96  C028  F05C         	movff	?_scale,_sprintf$1714
  2312  007B9A  C029  F05D         	movff	?_scale+1,_sprintf$1714+1
  2313  007B9E  C02A  F05E         	movff	?_scale+2,_sprintf$1714+2
  2314  007BA2  C02B  F05F         	movff	?_scale+3,_sprintf$1714+3
  2315                           
  2316                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2317  007BA6  D947               	call	PL84	;call to abstracted procedure
  2318  007BA8  C05C  F00F         	movff	_sprintf$1714,___flmul@b
  2319  007BAC  C05D  F010         	movff	_sprintf$1714+1,___flmul@b+1
  2320  007BB0  C05E  F011         	movff	_sprintf$1714+2,___flmul@b+2
  2321  007BB4  C05F  F012         	movff	_sprintf$1714+3,___flmul@b+3
  2322  007BB8  EC19  F038         	call	___flmul	;wreg free
  2323  007BBC  C00F  F031         	movff	?___flmul,___fltol@f1
  2324  007BC0  C010  F032         	movff	?___flmul+1,___fltol@f1+1
  2325  007BC4  C011  F033         	movff	?___flmul+2,___fltol@f1+2
  2326  007BC8  C012  F034         	movff	?___flmul+3,___fltol@f1+3
  2327  007BCC  EC2D  F032         	call	___fltol	;wreg free
  2328  007BD0  D93B               	call	PL88	;call to abstracted procedure
  2329                           
  2330                           ;doprnt.c: 1228: while(c--) {
  2331  007BD2  D027               	goto	l4140
  2332  007BD4                     l4130:
  2333                           
  2334                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2335  007BD4  D8C8               	call	PL8	;call to abstracted procedure
  2336  007BD6  EC70  F031         	call	___lldiv	;wreg free
  2337                           
  2338                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2339  007BDA  D8F3               	call	PL30	;call to abstracted procedure
  2340  007BDC  EC0B  F031         	call	___llmod	;wreg free
  2341                           
  2342                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2343  007BE0  D916               	call	PL54	;call to abstracted procedure
  2344  007BE2  6EDF               	movwf	indf2,c
  2345  007BE4  2A51               	incf	sprintf@sp,f,c
  2346                           
  2347                           ;doprnt.c: 1232: val %= dpowers[c];
  2348  007BE6  C069  F001         	movff	sprintf@val,___llmod@dividend
  2349  007BEA  C06A  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2350  007BEE  C06B  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2351  007BF2  C06C  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2352  007BF6  D8DB               	call	PL24	;call to abstracted procedure
  2353  007BF8  CFF5 F005          	movff	tablat,___llmod@divisor
  2354  007BFC  0009               	tblrd		*+
  2355  007BFE  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2356  007C02  0009               	tblrd		*+
  2357  007C04  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2358  007C08  000A               	tblrd		*-
  2359  007C0A  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2360  007C0E  EC0B  F031         	call	___llmod	;wreg free
  2361  007C12  C001  F069         	movff	?___llmod,sprintf@val
  2362  007C16  C002  F06A         	movff	?___llmod+1,sprintf@val+1
  2363  007C1A  C003  F06B         	movff	?___llmod+2,sprintf@val+2
  2364  007C1E  C004  F06C         	movff	?___llmod+3,sprintf@val+3
  2365  007C22                     l4140:
  2366  007C22  067B               	decf	sprintf@c,f,c
  2367  007C24  287B               	incf	sprintf@c,w,c
  2368  007C26  E005               	bz	l4148
  2369  007C28  D7D5               	goto	l4130
  2370  007C2A                     l4142:
  2371                           
  2372                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2373  007C2A  D8EA               	call	PL50	;call to abstracted procedure
  2374                           
  2375                           ;doprnt.c: 1237: prec--;
  2376  007C2C  0679               	decf	sprintf@prec,f,c
  2377  007C2E  A0D8               	btfss	status,0,c
  2378  007C30  067A               	decf	sprintf@prec+1,f,c
  2379  007C32                     l4148:
  2380  007C32  5079               	movf	sprintf@prec,w,c
  2381  007C34  107A               	iorwf	sprintf@prec+1,w,c
  2382  007C36  E101 D08C          	bz	l4226
  2383  007C3A  D7F7               	goto	l4142
  2384  007C3C                     l4150:
  2385                           
  2386                           ;doprnt.c: 1246: }
  2387                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2388  007C3C  5079               	movf	sprintf@prec,w,c
  2389  007C3E  107A               	iorwf	sprintf@prec+1,w,c
  2390  007C40  E107               	bnz	l4156
  2391  007C42  5069               	movf	sprintf@val,w,c
  2392  007C44  106A               	iorwf	sprintf@val+1,w,c
  2393  007C46  106B               	iorwf	sprintf@val+2,w,c
  2394  007C48  106C               	iorwf	sprintf@val+3,w,c
  2395  007C4A  E102               	bnz	l4156
  2396                           
  2397                           ;doprnt.c: 1291: prec++;
  2398  007C4C  4A79               	infsnz	sprintf@prec,f,c
  2399  007C4E  2A7A               	incf	sprintf@prec+1,f,c
  2400  007C50                     l4156:
  2401                           
  2402                           ;doprnt.c: 1339: if(c < prec)
  2403  007C50  D924               	call	PL144	;call to abstracted procedure
  2404  007C52  5079               	movf	sprintf@prec,w,c
  2405  007C54  5C7B               	subwf	sprintf@c,w,c
  2406  007C56  507A               	movf	sprintf@prec+1,w,c
  2407  007C58  0A80               	xorlw	128
  2408  007C5A  5858               	subwfb	??_sprintf& (0+255),w,c
  2409  007C5C  E203               	bc	l4160
  2410                           
  2411                           ;doprnt.c: 1340: c = prec;
  2412  007C5E  C079  F07B         	movff	sprintf@prec,sprintf@c
  2413  007C62  D00F               	goto	l4164
  2414  007C64                     l4160:
  2415                           
  2416                           ;doprnt.c: 1341: else if(prec < c)
  2417  007C64  507A               	movf	sprintf@prec+1,w,c
  2418  007C66  0A80               	xorlw	128
  2419  007C68  6E58               	movwf	??_sprintf& (0+255),c
  2420  007C6A  507B               	movf	sprintf@c,w,c
  2421  007C6C  5C79               	subwf	sprintf@prec,w,c
  2422  007C6E  0E80               	movlw	128
  2423  007C70  BE7B               	btfsc	sprintf@c,7,c
  2424  007C72  0E7F               	movlw	127
  2425  007C74  5858               	subwfb	??_sprintf& (0+255),w,c
  2426  007C76  E205               	bc	l4164
  2427                           
  2428                           ;doprnt.c: 1342: prec = c;
  2429  007C78  507B               	movf	sprintf@c,w,c
  2430  007C7A  6E79               	movwf	sprintf@prec,c
  2431  007C7C  6A7A               	clrf	sprintf@prec+1,c
  2432  007C7E  BE79               	btfsc	sprintf@prec,7,c
  2433  007C80  067A               	decf	sprintf@prec+1,f,c
  2434  007C82                     l4164:
  2435                           
  2436                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2437  007C82  5073               	movf	sprintf@width,w,c
  2438  007C84  1074               	iorwf	sprintf@width+1,w,c
  2439  007C86  E005               	bz	l4170
  2440  007C88  D90D               	call	PL150	;call to abstracted procedure
  2441  007C8A  E003               	bz	l4170
  2442                           
  2443                           ;doprnt.c: 1346: width--;
  2444  007C8C  0673               	decf	sprintf@width,f,c
  2445  007C8E  A0D8               	btfss	status,0,c
  2446  007C90  0674               	decf	sprintf@width+1,f,c
  2447  007C92                     l4170:
  2448                           
  2449                           ;doprnt.c: 1348: if(flag & 0x4000) {
  2450  007C92  AC7D               	btfss	sprintf@flag+1,6,c
  2451  007C94  D010               	goto	l4176
  2452                           
  2453                           ;doprnt.c: 1349: if(width > prec)
  2454  007C96  5073               	movf	sprintf@width,w,c
  2455  007C98  5C79               	subwf	sprintf@prec,w,c
  2456  007C9A  507A               	movf	sprintf@prec+1,w,c
  2457  007C9C  0A80               	xorlw	128
  2458  007C9E  6E58               	movwf	??_sprintf& (0+255),c
  2459  007CA0  5074               	movf	sprintf@width+1,w,c
  2460  007CA2  0A80               	xorlw	128
  2461  007CA4  5858               	subwfb	??_sprintf& (0+255),w,c
  2462  007CA6  E205               	bc	l539
  2463                           
  2464                           ;doprnt.c: 1350: width -= prec;
  2465  007CA8  5079               	movf	sprintf@prec,w,c
  2466  007CAA  5E73               	subwf	sprintf@width,f,c
  2467  007CAC  507A               	movf	sprintf@prec+1,w,c
  2468  007CAE  5A74               	subwfb	sprintf@width+1,f,c
  2469  007CB0  D002               	goto	l4176
  2470  007CB2                     l539:
  2471                           
  2472                           ;doprnt.c: 1351: else
  2473                           ;doprnt.c: 1352: width = 0;
  2474  007CB2  6A73               	clrf	sprintf@width,c
  2475  007CB4  6A74               	clrf	sprintf@width+1,c
  2476  007CB6                     l4176:
  2477                           
  2478                           ;doprnt.c: 1353: }
  2479                           ;doprnt.c: 1381: if(width > c)
  2480  007CB6  D8F1               	call	PL144	;call to abstracted procedure
  2481  007CB8  5073               	movf	sprintf@width,w,c
  2482  007CBA  5C7B               	subwf	sprintf@c,w,c
  2483  007CBC  5074               	movf	sprintf@width+1,w,c
  2484  007CBE  0A80               	xorlw	128
  2485  007CC0  5858               	subwfb	??_sprintf& (0+255),w,c
  2486  007CC2  E207               	bc	l541
  2487                           
  2488                           ;doprnt.c: 1382: width -= c;
  2489  007CC4  507B               	movf	sprintf@c,w,c
  2490  007CC6  5E73               	subwf	sprintf@width,f,c
  2491  007CC8  0E00               	movlw	0
  2492  007CCA  BE7B               	btfsc	sprintf@c,7,c
  2493  007CCC  0EFF               	movlw	255
  2494  007CCE  5A74               	subwfb	sprintf@width+1,f,c
  2495  007CD0  D002               	goto	l542
  2496  007CD2                     l541:
  2497                           
  2498                           ;doprnt.c: 1383: else
  2499                           ;doprnt.c: 1384: width = 0;
  2500  007CD2  6A73               	clrf	sprintf@width,c
  2501  007CD4  6A74               	clrf	sprintf@width+1,c
  2502  007CD6                     l542:
  2503                           
  2504                           ;doprnt.c: 1387: if(flag & 0x04) {
  2505  007CD6  A47C               	btfss	sprintf@flag,2,c
  2506  007CD8  D01D               	goto	l4204
  2507                           
  2508                           ;doprnt.c: 1389: if(flag & 0x02)
  2509  007CDA  A27C               	btfss	sprintf@flag,1,c
  2510  007CDC  D00F               	goto	l544
  2511                           
  2512                           ;doprnt.c: 1390: ((*sp++ = (flag & 0x01 ? '-' : '+')));
  2513  007CDE  B07C               	btfsc	sprintf@flag,0,c
  2514  007CE0  D003               	goto	l4186
  2515  007CE2  6A65               	clrf	_sprintf$1016+1,c
  2516  007CE4  0E2B               	movlw	43
  2517  007CE6  D002               	goto	L6
  2518  007CE8                     l4186:
  2519  007CE8  6A65               	clrf	_sprintf$1016+1,c
  2520  007CEA  0E2D               	movlw	45
  2521  007CEC                     L6:
  2522  007CEC  6E64               	movwf	_sprintf$1016,c
  2523  007CEE  5051               	movf	sprintf@sp,w,c
  2524  007CF0  6ED9               	movwf	fsr2l,c
  2525  007CF2  6ADA               	clrf	fsr2h,c
  2526  007CF4  C064  FFDF         	movff	_sprintf$1016,indf2
  2527  007CF8                     l4190:
  2528  007CF8  2A51               	incf	sprintf@sp,f,c
  2529  007CFA  D004               	goto	l4196
  2530  007CFC                     l544:
  2531                           
  2532                           ;doprnt.c: 1396: else
  2533                           ;doprnt.c: 1399: if(flag & 0x01)
  2534  007CFC  A07C               	btfss	sprintf@flag,0,c
  2535  007CFE  D002               	goto	l4196
  2536                           
  2537                           ;doprnt.c: 1400: ((*sp++ = (' ')));
  2538  007D00  D894               	call	PL56	;call to abstracted procedure
  2539  007D02  D7FA               	goto	l4190
  2540  007D04                     l4196:
  2541                           
  2542                           ;doprnt.c: 1415: if(width)
  2543  007D04  5073               	movf	sprintf@width,w,c
  2544  007D06  1074               	iorwf	sprintf@width+1,w,c
  2545  007D08  E024               	bz	l4226
  2546                           
  2547                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  2548  007D0A  D87A               	call	PL50	;call to abstracted procedure
  2549                           
  2550                           ;doprnt.c: 1418: while(--width);
  2551  007D0C  0673               	decf	sprintf@width,f,c
  2552  007D0E  A0D8               	btfss	status,0,c
  2553  007D10  0674               	decf	sprintf@width+1,f,c
  2554  007D12  D7F8               	goto	l4196
  2555  007D14                     l4204:
  2556                           
  2557                           ;doprnt.c: 1422: {
  2558                           ;doprnt.c: 1424: if(width
  2559                           ;doprnt.c: 1428: )
  2560  007D14  5073               	movf	sprintf@width,w,c
  2561  007D16  1074               	iorwf	sprintf@width+1,w,c
  2562  007D18  E008               	bz	l555
  2563  007D1A                     l4206:
  2564                           
  2565                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  2566  007D1A  D887               	call	PL56	;call to abstracted procedure
  2567  007D1C  2A51               	incf	sprintf@sp,f,c
  2568                           
  2569                           ;doprnt.c: 1431: while(--width);
  2570  007D1E  0673               	decf	sprintf@width,f,c
  2571  007D20  A0D8               	btfss	status,0,c
  2572  007D22  0674               	decf	sprintf@width+1,f,c
  2573  007D24  5073               	movf	sprintf@width,w,c
  2574  007D26  1074               	iorwf	sprintf@width+1,w,c
  2575  007D28  E1F8               	bnz	l4206
  2576  007D2A                     l555:
  2577                           
  2578                           ;doprnt.c: 1434: if(flag & 0x02)
  2579  007D2A  A27C               	btfss	sprintf@flag,1,c
  2580  007D2C  D00E               	goto	l558
  2581                           
  2582                           ;doprnt.c: 1435: ((*sp++ = (flag & 0x01 ? '-' : '+')));
  2583  007D2E  B07C               	btfsc	sprintf@flag,0,c
  2584  007D30  D003               	goto	l4216
  2585  007D32  6A67               	clrf	_sprintf$1017+1,c
  2586  007D34  0E2B               	movlw	43
  2587  007D36  D002               	goto	L7
  2588  007D38                     l4216:
  2589  007D38  6A67               	clrf	_sprintf$1017+1,c
  2590  007D3A  0E2D               	movlw	45
  2591  007D3C                     L7:
  2592  007D3C  6E66               	movwf	_sprintf$1017,c
  2593  007D3E  5051               	movf	sprintf@sp,w,c
  2594  007D40  6ED9               	movwf	fsr2l,c
  2595  007D42  6ADA               	clrf	fsr2h,c
  2596  007D44  C066  FFDF         	movff	_sprintf$1017,indf2
  2597  007D48  D4ED               	goto	l3906
  2598  007D4A                     l558:
  2599                           
  2600                           ;doprnt.c: 1443: else if(flag & 0x01)
  2601  007D4A  A07C               	btfss	sprintf@flag,0,c
  2602  007D4C  D002               	goto	l4226
  2603                           
  2604                           ;doprnt.c: 1444: ((*sp++ = (' ')));
  2605  007D4E  D86D               	call	PL56	;call to abstracted procedure
  2606  007D50  D4E9               	goto	l3906
  2607  007D52                     l4226:
  2608  007D52  C052  FFF6         	movff	sprintf@f,tblptrl
  2609  007D56  D88A               	call	PL94	;call to abstracted procedure
  2610  007D58  E001 D4DC          	bnz	l3902
  2611  007D5C                     l4228:
  2612                           
  2613                           ;doprnt.c: 1538: *sp = 0;
  2614  007D5C  5051               	movf	sprintf@sp,w,c
  2615  007D5E  6ED9               	movwf	fsr2l,c
  2616  007D60  6ADA               	clrf	fsr2h,c
  2617  007D62  6ADF               	clrf	indf2,c
  2618  007D64  0C00               	retlw	0	;funcret
  2619  007D66                     __end_of_sprintf:
  2620                           	opt stack 0
  2621  007D66                     PL8:
  2622                           	opt stack 28
  2623  007D66  C069  F001         	movff	sprintf@val,___lldiv@dividend
  2624  007D6A  C06A  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2625  007D6E  C06B  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2626  007D72  C06C  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2627  007D76  507B               	movf	sprintf@c,w,c
  2628  007D78  0D04               	mullw	4
  2629  007D7A  0E1F               	movlw	low _dpowers
  2630  007D7C  24F3               	addwf	prodl,w,c
  2631  007D7E  6EF6               	movwf	tblptrl,c
  2632  007D80  0E7F               	movlw	high _dpowers
  2633  007D82  20F4               	addwfc	prodh,w,c
  2634  007D84  6EF7               	movwf	tblptrh,c
  2635  007D86                     	if	0	;There are less than 3 active tblptr bytes
  2636  007D86                     	endif
  2637  007D86  0009               	tblrd		*+
  2638  007D88  CFF5 F005          	movff	tablat,___lldiv@divisor
  2639  007D8C  0009               	tblrd		*+
  2640  007D8E  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2641  007D92  0009               	tblrd		*+
  2642  007D94  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2643  007D98  000A               	tblrd		*-
  2644  007D9A  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2645  007D9E  0012               	return	
  2646  007DA0                     __end_ofPL8:
  2647                           	opt stack 0
  2648  007DA0                     PL16:
  2649                           	opt stack 28
  2650  007DA0  C052  FFF6         	movff	sprintf@f,tblptrl
  2651  007DA4  C053  FFF7         	movff	sprintf@f+1,tblptrh
  2652  007DA8                     	if	0	;tblptru may be non-zero
  2653  007DA8                     	endif
  2654  007DA8                     	if	0	;tblptru may be non-zero
  2655  007DA8                     	endif
  2656  007DA8  0008               	tblrd		*
  2657  007DAA  50F5               	movf	tablat,w,c
  2658  007DAC  0012               	return	
  2659  007DAE                     __end_ofPL16:
  2660                           	opt stack 0
  2661  007DAE                     PL24:
  2662                           	opt stack 28
  2663  007DAE  507B               	movf	sprintf@c,w,c
  2664  007DB0  0D04               	mullw	4
  2665  007DB2  0E1F               	movlw	low _dpowers
  2666  007DB4  24F3               	addwf	prodl,w,c
  2667  007DB6  6EF6               	movwf	tblptrl,c
  2668  007DB8  0E7F               	movlw	high _dpowers
  2669  007DBA  20F4               	addwfc	prodh,w,c
  2670  007DBC  6EF7               	movwf	tblptrh,c
  2671  007DBE                     	if	0	;There are less than 3 active tblptr bytes
  2672  007DBE                     	endif
  2673  007DBE  0009               	tblrd		*+
  2674  007DC0  0012               	return	
  2675  007DC2                     __end_ofPL24:
  2676                           	opt stack 0
  2677  007DC2                     PL30:
  2678                           	opt stack 28
  2679  007DC2  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  2680  007DC6  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  2681  007DCA  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  2682  007DCE  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  2683  007DD2  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  2684  007DD6  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2685  007DDA  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2686  007DDE  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2687  007DE2  0E0A               	movlw	10
  2688  007DE4  6E05               	movwf	___llmod@divisor,c
  2689  007DE6  6A06               	clrf	___llmod@divisor+1,c
  2690  007DE8  6A07               	clrf	___llmod@divisor+2,c
  2691  007DEA  6A08               	clrf	___llmod@divisor+3,c
  2692  007DEC  0C0A               	retlw	10
  2693  007DEE                     __end_ofPL30:
  2694                           	opt stack 0
  2695  007DEE                     PL48:
  2696                           	opt stack 28
  2697  007DEE  C06D  F001         	movff	sprintf@tmpval,___flge@ff1
  2698  007DF2  C06E  F002         	movff	sprintf@tmpval+1,___flge@ff1+1
  2699  007DF6  C06F  F003         	movff	sprintf@tmpval+2,___flge@ff1+2
  2700  007DFA  C070  F004         	movff	sprintf@tmpval+3,___flge@ff1+3
  2701  007DFE  0012               	return	
  2702  007E00                     __end_ofPL48:
  2703                           	opt stack 0
  2704  007E00                     PL50:
  2705                           	opt stack 28
  2706  007E00  5051               	movf	sprintf@sp,w,c
  2707  007E02  6ED9               	movwf	fsr2l,c
  2708  007E04  6ADA               	clrf	fsr2h,c
  2709  007E06  0E30               	movlw	48
  2710  007E08  6EDF               	movwf	indf2,c
  2711  007E0A  2A51               	incf	sprintf@sp,f,c
  2712  007E0C  0C30               	retlw	48
  2713  007E0E                     __end_ofPL50:
  2714                           	opt stack 0
  2715  007E0E                     PL54:
  2716                           	opt stack 28
  2717  007E0E  C001  F06D         	movff	?___llmod,sprintf@tmpval
  2718  007E12  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  2719  007E16  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  2720  007E1A  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  2721  007E1E  5051               	movf	sprintf@sp,w,c
  2722  007E20  6ED9               	movwf	fsr2l,c
  2723  007E22  6ADA               	clrf	fsr2h,c
  2724  007E24  506D               	movf	sprintf@tmpval,w,c
  2725  007E26  0F30               	addlw	48
  2726  007E28  0012               	return	
  2727  007E2A                     __end_ofPL54:
  2728                           	opt stack 0
  2729  007E2A                     PL56:
  2730                           	opt stack 28
  2731  007E2A  5051               	movf	sprintf@sp,w,c
  2732  007E2C  6ED9               	movwf	fsr2l,c
  2733  007E2E  6ADA               	clrf	fsr2h,c
  2734  007E30  0E20               	movlw	32
  2735  007E32  6EDF               	movwf	indf2,c
  2736  007E34  0C20               	retlw	32
  2737  007E36                     __end_ofPL56:
  2738                           	opt stack 0
  2739  007E36                     PL84:
  2740                           	opt stack 28
  2741  007E36  C075  F013         	movff	sprintf@fval,___flmul@a
  2742  007E3A  C076  F014         	movff	sprintf@fval+1,___flmul@a+1
  2743  007E3E  C077  F015         	movff	sprintf@fval+2,___flmul@a+2
  2744  007E42  C078  F016         	movff	sprintf@fval+3,___flmul@a+3
  2745  007E46  0012               	return	
  2746  007E48                     __end_ofPL84:
  2747                           	opt stack 0
  2748  007E48                     PL88:
  2749                           	opt stack 28
  2750  007E48  C031  F069         	movff	?___fltol,sprintf@val
  2751  007E4C  C032  F06A         	movff	?___fltol+1,sprintf@val+1
  2752  007E50  C033  F06B         	movff	?___fltol+2,sprintf@val+2
  2753  007E54  C034  F06C         	movff	?___fltol+3,sprintf@val+3
  2754  007E58  0012               	return	
  2755  007E5A                     __end_ofPL88:
  2756                           	opt stack 0
  2757  007E5A                     PL90:
  2758                           	opt stack 28
  2759  007E5A  C075  F031         	movff	sprintf@fval,___fltol@f1
  2760  007E5E  C076  F032         	movff	sprintf@fval+1,___fltol@f1+1
  2761  007E62  C077  F033         	movff	sprintf@fval+2,___fltol@f1+2
  2762  007E66  C078  F034         	movff	sprintf@fval+3,___fltol@f1+3
  2763  007E6A  0012               	return	
  2764  007E6C                     __end_ofPL90:
  2765                           	opt stack 0
  2766  007E6C                     PL94:
  2767                           	opt stack 28
  2768  007E6C  C053  FFF7         	movff	sprintf@f+1,tblptrh
  2769  007E70  4A52               	infsnz	sprintf@f,f,c
  2770  007E72  2A53               	incf	sprintf@f+1,f,c
  2771  007E74                     	if	0	;tblptru may be non-zero
  2772  007E74                     	endif
  2773  007E74                     	if	0	;tblptru may be non-zero
  2774  007E74                     	endif
  2775  007E74  0008               	tblrd		*
  2776  007E76  CFF5 F07B          	movff	tablat,sprintf@c
  2777  007E7A  507B               	movf	sprintf@c,w,c
  2778  007E7C  0012               	return	
  2779  007E7E                     __end_ofPL94:
  2780                           	opt stack 0
  2781  007E7E                     PL102:
  2782                           	opt stack 28
  2783  007E7E  C028  F06D         	movff	?_scale,sprintf@tmpval
  2784  007E82  C029  F06E         	movff	?_scale+1,sprintf@tmpval+1
  2785  007E86  C02A  F06F         	movff	?_scale+2,sprintf@tmpval+2
  2786  007E8A  C02B  F070         	movff	?_scale+3,sprintf@tmpval+3
  2787  007E8E  0012               	return	
  2788  007E90                     __end_ofPL102:
  2789                           	opt stack 0
  2790  007E90                     PL136:
  2791                           	opt stack 28
  2792  007E90  5075               	movf	sprintf@fval,w,c
  2793  007E92  1076               	iorwf	sprintf@fval+1,w,c
  2794  007E94  1077               	iorwf	sprintf@fval+2,w,c
  2795  007E96  1078               	iorwf	sprintf@fval+3,w,c
  2796  007E98  0012               	return	
  2797  007E9A                     __end_ofPL136:
  2798                           	opt stack 0
  2799  007E9A                     PL144:
  2800                           	opt stack 28
  2801  007E9A  0E80               	movlw	128
  2802  007E9C  BE7B               	btfsc	sprintf@c,7,c
  2803  007E9E  0E7F               	movlw	127
  2804  007EA0  6E58               	movwf	??_sprintf& (0+255),c
  2805  007EA2  0012               	return	
  2806  007EA4                     __end_ofPL144:
  2807                           	opt stack 0
  2808  007EA4                     PL150:
  2809                           	opt stack 28
  2810  007EA4  C07C  F058         	movff	sprintf@flag,??_sprintf
  2811  007EA8  0E03               	movlw	3
  2812  007EAA  1658               	andwf	??_sprintf,f,c
  2813  007EAC  0C03               	retlw	3
  2814  007EAE                     __end_ofPL150:
  2815                           	opt stack 0
  2816  007EAE                     PL152:
  2817                           	opt stack 28
  2818  007EAE  6A04               	clrf	___wmul@multiplicand+1,c
  2819  007EB0  0E0A               	movlw	10
  2820  007EB2  6E03               	movwf	___wmul@multiplicand,c
  2821  007EB4  0C0A               	retlw	10
  2822  007EB6                     __end_ofPL152:
  2823                           	opt stack 0
  2824                           tblptru	equ	0xFF8
  2825                           tblptrh	equ	0xFF7
  2826                           tblptrl	equ	0xFF6
  2827                           tablat	equ	0xFF5
  2828                           prodh	equ	0xFF4
  2829                           prodl	equ	0xFF3
  2830                           indf0	equ	0xFEF
  2831                           plusw0	equ	0xFEB
  2832                           fsr0h	equ	0xFEA
  2833                           fsr0l	equ	0xFE9
  2834                           wreg	equ	0xFE8
  2835                           indf2	equ	0xFDF
  2836                           postinc2	equ	0xFDE
  2837                           postdec2	equ	0xFDD
  2838                           plusw2	equ	0xFDB
  2839                           fsr2h	equ	0xFDA
  2840                           fsr2l	equ	0xFD9
  2841                           status	equ	0xFD8
  2842                           
  2843 ;; *************** function _scale *****************
  2844 ;; Defined at:
  2845 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2846 ;; Parameters:    Size  Location     Type
  2847 ;;  scl             1    wreg     char 
  2848 ;; Auto vars:     Size  Location     Type
  2849 ;;  scl             1   47[COMRAM] char 
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  4   39[COMRAM] char 
  2852 ;; Registers used:
  2853 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2854 ;; Tracked objects:
  2855 ;;		On entry : 0/0
  2856 ;;		On exit  : 0/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2859 ;;      Params:         4       0       0       0       0       0       0
  2860 ;;      Locals:         5       0       0       0       0       0       0
  2861 ;;      Temps:          0       0       0       0       0       0       0
  2862 ;;      Totals:         9       0       0       0       0       0       0
  2863 ;;Total ram usage:        9 bytes
  2864 ;; Hardware stack levels used:    1
  2865 ;; Hardware stack levels required when called:    1
  2866 ;; This function calls:
  2867 ;;		___awdiv
  2868 ;;		___awmod
  2869 ;;		___flmul
  2870 ;; This function is called by:
  2871 ;;		_sprintf
  2872 ;; This function uses a non-reentrant model
  2873 ;;
  2874                           
  2875                           	psect	text2
  2876  00725A                     __ptext2:
  2877                           	opt stack 0
  2878  00725A                     _scale:
  2879                           	opt stack 28
  2880                           
  2881                           ;incstack = 0
  2882                           ;scale@scl stored from wreg
  2883  00725A  6E30               	movwf	scale@scl,c
  2884                           
  2885                           ;doprnt.c: 428: if(scl < 0) {
  2886  00725C  AE30               	btfss	scale@scl,7,c
  2887  00725E  D046               	goto	l3366
  2888                           
  2889                           ;doprnt.c: 429: scl = -scl;
  2890  007260  6C30               	negf	scale@scl,c
  2891                           
  2892                           ;doprnt.c: 430: if(scl>=110)
  2893  007262  5030               	movf	scale@scl,w,c
  2894  007264  0A80               	xorlw	128
  2895  007266  0F12               	addlw	-238
  2896  007268  E324               	bnc	l3356
  2897                           
  2898                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2899  00726A  D913               	call	PL72	;call to abstracted procedure
  2900  00726C  D90D               	call	PL68	;call to abstracted procedure
  2901  00726E  BE01               	btfsc	___awmod@dividend,7,c
  2902  007270  0602               	decf	___awmod@dividend+1,f,c
  2903  007272  EC3C  F031         	call	___awmod	;wreg free
  2904  007276  D917               	call	PL148	;call to abstracted procedure
  2905  007278  ECAB  F031         	call	___awdiv	;wreg free
  2906  00727C  D89B               	call	PL12	;call to abstracted procedure
  2907  00727E  D8FE               	call	PL62	;call to abstracted procedure
  2908  007280  D87D               	call	PL2	;call to abstracted procedure
  2909  007282  6A0A               	clrf	___awdiv@divisor+1,c
  2910  007284  0E64               	movlw	100
  2911  007286  D90A               	call	PL108	;call to abstracted procedure
  2912  007288  BE07               	btfsc	___awdiv@dividend,7,c
  2913  00728A  0608               	decf	___awdiv@dividend+1,f,c
  2914  00728C  ECAB  F031         	call	___awdiv	;wreg free
  2915  007290  90D8               	bcf	status,0,c
  2916  007292  D8C2               	call	PL26	;call to abstracted procedure
  2917  007294  D8F3               	call	PL62	;call to abstracted procedure
  2918  007296  D880               	call	PL4	;call to abstracted procedure
  2919  007298  EC19  F038         	call	___flmul	;wreg free
  2920                           
  2921                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2922  00729C  D8A6               	call	PL22	;call to abstracted procedure
  2923  00729E  BE01               	btfsc	___awmod@dividend,7,c
  2924  0072A0  0602               	decf	___awmod@dividend+1,f,c
  2925  0072A2  EC3C  F031         	call	___awmod	;wreg free
  2926  0072A6  D891               	call	PL14	;call to abstracted procedure
  2927  0072A8  D8C7               	call	PL36	;call to abstracted procedure
  2928  0072AA  D868               	call	PL2	;call to abstracted procedure
  2929  0072AC  EC19  F038         	call	___flmul	;wreg free
  2930  0072B0  D093               	goto	PL20	;call to abstracted procedure
  2931  0072B2                     l3356:
  2932                           
  2933                           ;doprnt.c: 432: else if(scl > 10)
  2934  0072B2  5030               	movf	scale@scl,w,c
  2935  0072B4  0A80               	xorlw	128
  2936  0072B6  0F75               	addlw	-139
  2937  0072B8  E315               	bnc	l3362
  2938                           
  2939                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2940  0072BA  6A0A               	clrf	___awdiv@divisor+1,c
  2941  0072BC  0E0A               	movlw	10
  2942  0072BE  D8EE               	call	PL108	;call to abstracted procedure
  2943  0072C0  BE07               	btfsc	___awdiv@dividend,7,c
  2944  0072C2  0608               	decf	___awdiv@dividend+1,f,c
  2945  0072C4  ECAB  F031         	call	___awdiv	;wreg free
  2946  0072C8  D875               	call	PL12	;call to abstracted procedure
  2947  0072CA  D8D8               	call	PL62	;call to abstracted procedure
  2948  0072CC  D865               	call	PL4	;call to abstracted procedure
  2949  0072CE  D8C9               	call	PL52	;call to abstracted procedure
  2950  0072D0  BE01               	btfsc	___awmod@dividend,7,c
  2951  0072D2  0602               	decf	___awmod@dividend+1,f,c
  2952  0072D4  EC3C  F031         	call	___awmod	;wreg free
  2953  0072D8  D878               	call	PL14	;call to abstracted procedure
  2954  0072DA  D8AE               	call	PL36	;call to abstracted procedure
  2955  0072DC  D84F               	call	PL2	;call to abstracted procedure
  2956  0072DE  EC19  F038         	call	___flmul	;wreg free
  2957  0072E2  D07A               	goto	PL20	;call to abstracted procedure
  2958  0072E4                     l3362:
  2959                           
  2960                           ;doprnt.c: 434: return _npowers_[scl];
  2961  0072E4  5030               	movf	scale@scl,w,c
  2962  0072E6  EC17  F035         	call	PL96	;call to abstracted procedure
  2963  0072EA  D0AC               	goto	PL44	;call to abstracted procedure
  2964  0072EC                     l3366:
  2965                           
  2966                           ;doprnt.c: 435: }
  2967                           ;doprnt.c: 436: if(scl>=110)
  2968  0072EC  5030               	movf	scale@scl,w,c
  2969  0072EE  0A80               	xorlw	128
  2970  0072F0  0F12               	addlw	-238
  2971  0072F2  E324               	bnc	l3374
  2972                           
  2973                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2974  0072F4  D8CE               	call	PL72	;call to abstracted procedure
  2975  0072F6  D8C8               	call	PL68	;call to abstracted procedure
  2976  0072F8  BE01               	btfsc	___awmod@dividend,7,c
  2977  0072FA  0602               	decf	___awmod@dividend+1,f,c
  2978  0072FC  EC3C  F031         	call	___awmod	;wreg free
  2979  007300  D8D2               	call	PL148	;call to abstracted procedure
  2980  007302  ECAB  F031         	call	___awdiv	;wreg free
  2981  007306  D856               	call	PL12	;call to abstracted procedure
  2982  007308  D8B3               	call	PL60	;call to abstracted procedure
  2983  00730A  D838               	call	PL2	;call to abstracted procedure
  2984  00730C  6A0A               	clrf	___awdiv@divisor+1,c
  2985  00730E  0E64               	movlw	100
  2986  007310  D8C5               	call	PL108	;call to abstracted procedure
  2987  007312  BE07               	btfsc	___awdiv@dividend,7,c
  2988  007314  0608               	decf	___awdiv@dividend+1,f,c
  2989  007316  ECAB  F031         	call	___awdiv	;wreg free
  2990  00731A  90D8               	bcf	status,0,c
  2991  00731C  D87D               	call	PL26	;call to abstracted procedure
  2992  00731E  D8A8               	call	PL60	;call to abstracted procedure
  2993  007320  D83B               	call	PL4	;call to abstracted procedure
  2994  007322  EC19  F038         	call	___flmul	;wreg free
  2995                           
  2996                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2997  007326  D861               	call	PL22	;call to abstracted procedure
  2998  007328  BE01               	btfsc	___awmod@dividend,7,c
  2999  00732A  0602               	decf	___awmod@dividend+1,f,c
  3000  00732C  EC3C  F031         	call	___awmod	;wreg free
  3001  007330  D84C               	call	PL14	;call to abstracted procedure
  3002  007332  D87C               	call	PL34	;call to abstracted procedure
  3003  007334  D823               	call	PL2	;call to abstracted procedure
  3004  007336  EC19  F038         	call	___flmul	;wreg free
  3005  00733A  D04E               	goto	PL20	;call to abstracted procedure
  3006  00733C                     l3374:
  3007                           
  3008                           ;doprnt.c: 438: else if(scl > 10)
  3009  00733C  5030               	movf	scale@scl,w,c
  3010  00733E  0A80               	xorlw	128
  3011  007340  0F75               	addlw	-139
  3012  007342  E315               	bnc	l3380
  3013                           
  3014                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3015  007344  6A0A               	clrf	___awdiv@divisor+1,c
  3016  007346  0E0A               	movlw	10
  3017  007348  D8A9               	call	PL108	;call to abstracted procedure
  3018  00734A  BE07               	btfsc	___awdiv@dividend,7,c
  3019  00734C  0608               	decf	___awdiv@dividend+1,f,c
  3020  00734E  ECAB  F031         	call	___awdiv	;wreg free
  3021  007352  D830               	call	PL12	;call to abstracted procedure
  3022  007354  D88D               	call	PL60	;call to abstracted procedure
  3023  007356  D820               	call	PL4	;call to abstracted procedure
  3024  007358  D884               	call	PL52	;call to abstracted procedure
  3025  00735A  BE01               	btfsc	___awmod@dividend,7,c
  3026  00735C  0602               	decf	___awmod@dividend+1,f,c
  3027  00735E  EC3C  F031         	call	___awmod	;wreg free
  3028  007362  D833               	call	PL14	;call to abstracted procedure
  3029  007364  D863               	call	PL34	;call to abstracted procedure
  3030  007366  D80A               	call	PL2	;call to abstracted procedure
  3031  007368  EC19  F038         	call	___flmul	;wreg free
  3032  00736C  D035               	goto	PL20	;call to abstracted procedure
  3033  00736E                     l3380:
  3034                           
  3035                           ;doprnt.c: 440: return _powers_[scl];
  3036  00736E  5030               	movf	scale@scl,w,c
  3037  007370  0D04               	mullw	4
  3038  007372  0EEB               	movlw	low __powers_
  3039  007374  24F3               	addwf	prodl,w,c
  3040  007376  6EF6               	movwf	tblptrl,c
  3041  007378  0E7E               	movlw	high __powers_
  3042  00737A  D064               	goto	PL44	;call to abstracted procedure
  3043  00737C                     __end_of_scale:
  3044                           	opt stack 0
  3045  00737C                     PL2:
  3046                           	opt stack 28
  3047  00737C  6EF7               	movwf	tblptrh,c
  3048  00737E                     	if	0	;There are less than 3 active tblptr bytes
  3049  00737E                     	endif
  3050  00737E  0009               	tblrd		*+
  3051  007380  CFF5 F013          	movff	tablat,___flmul@a
  3052  007384  0009               	tblrd		*+
  3053  007386  CFF5 F014          	movff	tablat,___flmul@a+1
  3054  00738A  0009               	tblrd		*+
  3055  00738C  CFF5 F015          	movff	tablat,___flmul@a+2
  3056  007390  000A               	tblrd		*-
  3057  007392  CFF5 F016          	movff	tablat,___flmul@a+3
  3058  007396  0012               	return	
  3059  007398                     __end_ofPL2:
  3060                           	opt stack 0
  3061  007398                     PL4:
  3062                           	opt stack 28
  3063  007398  6EF7               	movwf	tblptrh,c
  3064  00739A                     	if	0	;There are less than 3 active tblptr bytes
  3065  00739A                     	endif
  3066  00739A  0009               	tblrd		*+
  3067  00739C  CFF5 F00F          	movff	tablat,___flmul@b
  3068  0073A0  0009               	tblrd		*+
  3069  0073A2  CFF5 F010          	movff	tablat,___flmul@b+1
  3070  0073A6  0009               	tblrd		*+
  3071  0073A8  CFF5 F011          	movff	tablat,___flmul@b+2
  3072  0073AC  000A               	tblrd		*-
  3073  0073AE  CFF5 F012          	movff	tablat,___flmul@b+3
  3074  0073B2  0012               	return	
  3075  0073B4                     __end_ofPL4:
  3076                           	opt stack 0
  3077  0073B4                     PL12:
  3078                           	opt stack 28
  3079  0073B4  90D8               	bcf	status,0,c
  3080  0073B6  3607               	rlcf	?___awdiv,f,c
  3081  0073B8  3608               	rlcf	?___awdiv+1,f,c
  3082  0073BA  90D8               	bcf	status,0,c
  3083  0073BC  3607               	rlcf	?___awdiv,f,c
  3084  0073BE  3608               	rlcf	?___awdiv+1,f,c
  3085  0073C0  0E24               	movlw	36
  3086  0073C2  2607               	addwf	?___awdiv,f,c
  3087  0073C4  0E00               	movlw	0
  3088  0073C6  2208               	addwfc	?___awdiv+1,f,c
  3089  0073C8  0C00               	retlw	0
  3090  0073CA                     __end_ofPL12:
  3091                           	opt stack 0
  3092  0073CA                     PL14:
  3093                           	opt stack 28
  3094  0073CA  90D8               	bcf	status,0,c
  3095  0073CC  3601               	rlcf	?___awmod,f,c
  3096  0073CE  3602               	rlcf	?___awmod+1,f,c
  3097  0073D0  90D8               	bcf	status,0,c
  3098  0073D2  3601               	rlcf	?___awmod,f,c
  3099  0073D4  3602               	rlcf	?___awmod+1,f,c
  3100  0073D6  0012               	return	
  3101  0073D8                     __end_ofPL14:
  3102                           	opt stack 0
  3103  0073D8                     PL20:
  3104                           	opt stack 28
  3105  0073D8  C00F  F028         	movff	?___flmul,?_scale
  3106  0073DC  C010  F029         	movff	?___flmul+1,?_scale+1
  3107  0073E0  C011  F02A         	movff	?___flmul+2,?_scale+2
  3108  0073E4  C012  F02B         	movff	?___flmul+3,?_scale+3
  3109  0073E8  0012               	return	
  3110  0073EA                     __end_ofPL20:
  3111                           	opt stack 0
  3112  0073EA                     PL22:
  3113                           	opt stack 28
  3114  0073EA  C00F  F02C         	movff	?___flmul,_scale$1713
  3115  0073EE  C010  F02D         	movff	?___flmul+1,_scale$1713+1
  3116  0073F2  C011  F02E         	movff	?___flmul+2,_scale$1713+2
  3117  0073F6  C012  F02F         	movff	?___flmul+3,_scale$1713+3
  3118  0073FA  C02C  F00F         	movff	_scale$1713,___flmul@b
  3119  0073FE  C02D  F010         	movff	_scale$1713+1,___flmul@b+1
  3120  007402  C02E  F011         	movff	_scale$1713+2,___flmul@b+2
  3121  007406  C02F  F012         	movff	_scale$1713+3,___flmul@b+3
  3122  00740A  6A04               	clrf	___awmod@divisor+1,c
  3123  00740C  0E0A               	movlw	10
  3124  00740E  6E03               	movwf	___awmod@divisor,c
  3125  007410  5030               	movf	scale@scl,w,c
  3126  007412  6E01               	movwf	___awmod@dividend,c
  3127  007414  6A02               	clrf	___awmod@dividend+1,c
  3128  007416  0012               	return	
  3129  007418                     __end_ofPL22:
  3130                           	opt stack 0
  3131  007418                     PL26:
  3132                           	opt stack 28
  3133  007418  3607               	rlcf	?___awdiv,f,c
  3134  00741A  3608               	rlcf	?___awdiv+1,f,c
  3135  00741C  90D8               	bcf	status,0,c
  3136  00741E  3607               	rlcf	?___awdiv,f,c
  3137  007420  3608               	rlcf	?___awdiv+1,f,c
  3138  007422  0E48               	movlw	72
  3139  007424  2607               	addwf	?___awdiv,f,c
  3140  007426  0E00               	movlw	0
  3141  007428  2208               	addwfc	?___awdiv+1,f,c
  3142  00742A  0C00               	retlw	0
  3143  00742C                     __end_ofPL26:
  3144                           	opt stack 0
  3145  00742C                     PL34:
  3146                           	opt stack 28
  3147  00742C  0EEB               	movlw	low __powers_
  3148  00742E  2401               	addwf	?___awmod,w,c
  3149  007430  6EF6               	movwf	tblptrl,c
  3150  007432  0E7E               	movlw	high __powers_
  3151  007434  2002               	addwfc	?___awmod+1,w,c
  3152  007436  0012               	return	
  3153  007438                     __end_ofPL34:
  3154                           	opt stack 0
  3155  007438                     PL36:
  3156                           	opt stack 28
  3157  007438  0EB7               	movlw	low __npowers_
  3158  00743A  2401               	addwf	?___awmod,w,c
  3159  00743C  6EF6               	movwf	tblptrl,c
  3160  00743E  0E7E               	movlw	high __npowers_
  3161  007440  2002               	addwfc	?___awmod+1,w,c
  3162  007442  0012               	return	
  3163  007444                     __end_ofPL36:
  3164                           	opt stack 0
  3165  007444                     PL44:
  3166                           	opt stack 28
  3167  007444  20F4               	addwfc	prodh,w,c
  3168  007446  6EF7               	movwf	tblptrh,c
  3169  007448                     	if	0	;There are less than 3 active tblptr bytes
  3170  007448                     	endif
  3171  007448  0009               	tblrd		*+
  3172  00744A  CFF5 F028          	movff	tablat,?_scale
  3173  00744E  0009               	tblrd		*+
  3174  007450  CFF5 F029          	movff	tablat,?_scale+1
  3175  007454  0009               	tblrd		*+
  3176  007456  CFF5 F02A          	movff	tablat,?_scale+2
  3177  00745A  000A               	tblrd		*-
  3178  00745C  CFF5 F02B          	movff	tablat,?_scale+3
  3179  007460  0012               	return	
  3180  007462                     __end_ofPL44:
  3181                           	opt stack 0
  3182  007462                     PL52:
  3183                           	opt stack 28
  3184  007462  6A04               	clrf	___awmod@divisor+1,c
  3185  007464  0E0A               	movlw	10
  3186  007466  6E03               	movwf	___awmod@divisor,c
  3187  007468  5030               	movf	scale@scl,w,c
  3188  00746A  6E01               	movwf	___awmod@dividend,c
  3189  00746C  6A02               	clrf	___awmod@dividend+1,c
  3190  00746E  0012               	return	
  3191  007470                     __end_ofPL52:
  3192                           	opt stack 0
  3193  007470                     PL60:
  3194                           	opt stack 28
  3195  007470  0EEB               	movlw	low __powers_
  3196  007472  2407               	addwf	?___awdiv,w,c
  3197  007474  6EF6               	movwf	tblptrl,c
  3198  007476  0E7E               	movlw	high __powers_
  3199  007478  2008               	addwfc	?___awdiv+1,w,c
  3200  00747A  0012               	return	
  3201  00747C                     __end_ofPL60:
  3202                           	opt stack 0
  3203  00747C                     PL62:
  3204                           	opt stack 28
  3205  00747C  0EB7               	movlw	low __npowers_
  3206  00747E  2407               	addwf	?___awdiv,w,c
  3207  007480  6EF6               	movwf	tblptrl,c
  3208  007482  0E7E               	movlw	high __npowers_
  3209  007484  2008               	addwfc	?___awdiv+1,w,c
  3210  007486  0012               	return	
  3211  007488                     __end_ofPL62:
  3212                           	opt stack 0
  3213  007488                     PL68:
  3214                           	opt stack 28
  3215  007488  6E03               	movwf	___awmod@divisor,c
  3216  00748A  5030               	movf	scale@scl,w,c
  3217  00748C  6E01               	movwf	___awmod@dividend,c
  3218  00748E  6A02               	clrf	___awmod@dividend+1,c
  3219  007490  0012               	return	
  3220  007492                     __end_ofPL68:
  3221                           	opt stack 0
  3222  007492                     PL72:
  3223                           	opt stack 28
  3224  007492  6A0A               	clrf	___awdiv@divisor+1,c
  3225  007494  0E0A               	movlw	10
  3226  007496  6E09               	movwf	___awdiv@divisor,c
  3227  007498  6A04               	clrf	___awmod@divisor+1,c
  3228  00749A  0C64               	retlw	100
  3229  00749C                     __end_ofPL72:
  3230                           	opt stack 0
  3231  00749C                     PL108:
  3232                           	opt stack 28
  3233  00749C  6E09               	movwf	___awdiv@divisor,c
  3234  00749E  5030               	movf	scale@scl,w,c
  3235  0074A0  6E07               	movwf	___awdiv@dividend,c
  3236  0074A2  6A08               	clrf	___awdiv@dividend+1,c
  3237  0074A4  0012               	return	
  3238  0074A6                     __end_ofPL108:
  3239                           	opt stack 0
  3240  0074A6                     PL148:
  3241                           	opt stack 28
  3242  0074A6  C001  F007         	movff	?___awmod,___awdiv@dividend
  3243  0074AA  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3244  0074AE  0012               	return	
  3245  0074B0                     __end_ofPL148:
  3246                           	opt stack 0
  3247                           tblptru	equ	0xFF8
  3248                           tblptrh	equ	0xFF7
  3249                           tblptrl	equ	0xFF6
  3250                           tablat	equ	0xFF5
  3251                           prodh	equ	0xFF4
  3252                           prodl	equ	0xFF3
  3253                           indf0	equ	0xFEF
  3254                           plusw0	equ	0xFEB
  3255                           fsr0h	equ	0xFEA
  3256                           fsr0l	equ	0xFE9
  3257                           wreg	equ	0xFE8
  3258                           indf2	equ	0xFDF
  3259                           postinc2	equ	0xFDE
  3260                           postdec2	equ	0xFDD
  3261                           plusw2	equ	0xFDB
  3262                           fsr2h	equ	0xFDA
  3263                           fsr2l	equ	0xFD9
  3264                           status	equ	0xFD8
  3265                           
  3266 ;; *************** function ___awmod *****************
  3267 ;; Defined at:
  3268 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;  dividend        2    0[COMRAM] int 
  3271 ;;  divisor         2    2[COMRAM] int 
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;  sign            1    5[COMRAM] unsigned char 
  3274 ;;  counter         1    4[COMRAM] unsigned char 
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  2    0[COMRAM] int 
  3277 ;; Registers used:
  3278 ;;		wreg, status,2, status,0
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3284 ;;      Params:         4       0       0       0       0       0       0
  3285 ;;      Locals:         2       0       0       0       0       0       0
  3286 ;;      Temps:          0       0       0       0       0       0       0
  3287 ;;      Totals:         6       0       0       0       0       0       0
  3288 ;;Total ram usage:        6 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; This function calls:
  3291 ;;		Nothing
  3292 ;; This function is called by:
  3293 ;;		_scale
  3294 ;; This function uses a non-reentrant model
  3295 ;;
  3296                           
  3297                           	psect	text3
  3298  006278                     __ptext3:
  3299                           	opt stack 0
  3300  006278                     ___awmod:
  3301                           	opt stack 28
  3302                           
  3303                           ;incstack = 0
  3304  006278  6A06               	clrf	___awmod@sign,c
  3305  00627A  AE02               	btfss	___awmod@dividend+1,7,c
  3306  00627C  D006               	goto	l3238
  3307  00627E  6C01               	negf	___awmod@dividend,c
  3308  006280  1E02               	comf	___awmod@dividend+1,f,c
  3309  006282  B0D8               	btfsc	status,0,c
  3310  006284  2A02               	incf	___awmod@dividend+1,f,c
  3311  006286  0E01               	movlw	1
  3312  006288  6E06               	movwf	___awmod@sign,c
  3313  00628A                     l3238:
  3314  00628A  AE04               	btfss	___awmod@divisor+1,7,c
  3315  00628C  D004               	goto	l3242
  3316  00628E  6C03               	negf	___awmod@divisor,c
  3317  006290  1E04               	comf	___awmod@divisor+1,f,c
  3318  006292  B0D8               	btfsc	status,0,c
  3319  006294  2A04               	incf	___awmod@divisor+1,f,c
  3320  006296                     l3242:
  3321  006296  5003               	movf	___awmod@divisor,w,c
  3322  006298  1004               	iorwf	___awmod@divisor+1,w,c
  3323  00629A  E017               	bz	l3258
  3324  00629C  0E01               	movlw	1
  3325  00629E  6E05               	movwf	___awmod@counter,c
  3326  0062A0  D004               	goto	l3248
  3327  0062A2                     l3246:
  3328  0062A2  90D8               	bcf	status,0,c
  3329  0062A4  3603               	rlcf	___awmod@divisor,f,c
  3330  0062A6  3604               	rlcf	___awmod@divisor+1,f,c
  3331  0062A8  2A05               	incf	___awmod@counter,f,c
  3332  0062AA                     l3248:
  3333  0062AA  AE04               	btfss	___awmod@divisor+1,7,c
  3334  0062AC  D7FA               	goto	l3246
  3335  0062AE                     l3250:
  3336  0062AE  5003               	movf	___awmod@divisor,w,c
  3337  0062B0  5C01               	subwf	___awmod@dividend,w,c
  3338  0062B2  5004               	movf	___awmod@divisor+1,w,c
  3339  0062B4  5802               	subwfb	___awmod@dividend+1,w,c
  3340  0062B6  E304               	bnc	l3254
  3341  0062B8  5003               	movf	___awmod@divisor,w,c
  3342  0062BA  5E01               	subwf	___awmod@dividend,f,c
  3343  0062BC  5004               	movf	___awmod@divisor+1,w,c
  3344  0062BE  5A02               	subwfb	___awmod@dividend+1,f,c
  3345  0062C0                     l3254:
  3346  0062C0  90D8               	bcf	status,0,c
  3347  0062C2  3204               	rrcf	___awmod@divisor+1,f,c
  3348  0062C4  3203               	rrcf	___awmod@divisor,f,c
  3349  0062C6  2E05               	decfsz	___awmod@counter,f,c
  3350  0062C8  D7F2               	goto	l3250
  3351  0062CA                     l3258:
  3352  0062CA  5006               	movf	___awmod@sign,w,c
  3353  0062CC  E004               	bz	l3262
  3354  0062CE  6C01               	negf	___awmod@dividend,c
  3355  0062D0  1E02               	comf	___awmod@dividend+1,f,c
  3356  0062D2  B0D8               	btfsc	status,0,c
  3357  0062D4  2A02               	incf	___awmod@dividend+1,f,c
  3358  0062D6                     l3262:
  3359  0062D6  C001  F001         	movff	___awmod@dividend,?___awmod
  3360  0062DA  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3361  0062DE  0012               	return		;funcret
  3362  0062E0                     __end_of___awmod:
  3363                           	opt stack 0
  3364                           tblptru	equ	0xFF8
  3365                           tblptrh	equ	0xFF7
  3366                           tblptrl	equ	0xFF6
  3367                           tablat	equ	0xFF5
  3368                           prodh	equ	0xFF4
  3369                           prodl	equ	0xFF3
  3370                           indf0	equ	0xFEF
  3371                           plusw0	equ	0xFEB
  3372                           fsr0h	equ	0xFEA
  3373                           fsr0l	equ	0xFE9
  3374                           wreg	equ	0xFE8
  3375                           indf2	equ	0xFDF
  3376                           postinc2	equ	0xFDE
  3377                           postdec2	equ	0xFDD
  3378                           plusw2	equ	0xFDB
  3379                           fsr2h	equ	0xFDA
  3380                           fsr2l	equ	0xFD9
  3381                           status	equ	0xFD8
  3382                           
  3383 ;; *************** function ___awdiv *****************
  3384 ;; Defined at:
  3385 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  3386 ;; Parameters:    Size  Location     Type
  3387 ;;  dividend        2    6[COMRAM] int 
  3388 ;;  divisor         2    8[COMRAM] int 
  3389 ;; Auto vars:     Size  Location     Type
  3390 ;;  quotient        2   12[COMRAM] int 
  3391 ;;  sign            1   11[COMRAM] unsigned char 
  3392 ;;  counter         1   10[COMRAM] unsigned char 
  3393 ;; Return value:  Size  Location     Type
  3394 ;;                  2    6[COMRAM] int 
  3395 ;; Registers used:
  3396 ;;		wreg, status,2, status,0
  3397 ;; Tracked objects:
  3398 ;;		On entry : 0/0
  3399 ;;		On exit  : 0/0
  3400 ;;		Unchanged: 0/0
  3401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3402 ;;      Params:         4       0       0       0       0       0       0
  3403 ;;      Locals:         4       0       0       0       0       0       0
  3404 ;;      Temps:          0       0       0       0       0       0       0
  3405 ;;      Totals:         8       0       0       0       0       0       0
  3406 ;;Total ram usage:        8 bytes
  3407 ;; Hardware stack levels used:    1
  3408 ;; This function calls:
  3409 ;;		Nothing
  3410 ;; This function is called by:
  3411 ;;		_scale
  3412 ;;		_sprintf
  3413 ;; This function uses a non-reentrant model
  3414 ;;
  3415                           
  3416                           	psect	text4
  3417  006356                     __ptext4:
  3418                           	opt stack 0
  3419  006356                     ___awdiv:
  3420                           	opt stack 28
  3421                           
  3422                           ;incstack = 0
  3423  006356  6A0C               	clrf	___awdiv@sign,c
  3424  006358  AE0A               	btfss	___awdiv@divisor+1,7,c
  3425  00635A  D006               	goto	l3194
  3426  00635C  6C09               	negf	___awdiv@divisor,c
  3427  00635E  1E0A               	comf	___awdiv@divisor+1,f,c
  3428  006360  B0D8               	btfsc	status,0,c
  3429  006362  2A0A               	incf	___awdiv@divisor+1,f,c
  3430  006364  0E01               	movlw	1
  3431  006366  6E0C               	movwf	___awdiv@sign,c
  3432  006368                     l3194:
  3433  006368  AE08               	btfss	___awdiv@dividend+1,7,c
  3434  00636A  D006               	goto	l3200
  3435  00636C  6C07               	negf	___awdiv@dividend,c
  3436  00636E  1E08               	comf	___awdiv@dividend+1,f,c
  3437  006370  B0D8               	btfsc	status,0,c
  3438  006372  2A08               	incf	___awdiv@dividend+1,f,c
  3439  006374  0E01               	movlw	1
  3440  006376  1A0C               	xorwf	___awdiv@sign,f,c
  3441  006378                     l3200:
  3442  006378  6A0D               	clrf	___awdiv@quotient,c
  3443  00637A  6A0E               	clrf	___awdiv@quotient+1,c
  3444  00637C  5009               	movf	___awdiv@divisor,w,c
  3445  00637E  100A               	iorwf	___awdiv@divisor+1,w,c
  3446  006380  E01B               	bz	l3222
  3447  006382  0E01               	movlw	1
  3448  006384  6E0B               	movwf	___awdiv@counter,c
  3449  006386  D004               	goto	l3208
  3450  006388                     l3206:
  3451  006388  90D8               	bcf	status,0,c
  3452  00638A  3609               	rlcf	___awdiv@divisor,f,c
  3453  00638C  360A               	rlcf	___awdiv@divisor+1,f,c
  3454  00638E  2A0B               	incf	___awdiv@counter,f,c
  3455  006390                     l3208:
  3456  006390  AE0A               	btfss	___awdiv@divisor+1,7,c
  3457  006392  D7FA               	goto	l3206
  3458  006394                     l3210:
  3459  006394  90D8               	bcf	status,0,c
  3460  006396  360D               	rlcf	___awdiv@quotient,f,c
  3461  006398  360E               	rlcf	___awdiv@quotient+1,f,c
  3462  00639A  5009               	movf	___awdiv@divisor,w,c
  3463  00639C  5C07               	subwf	___awdiv@dividend,w,c
  3464  00639E  500A               	movf	___awdiv@divisor+1,w,c
  3465  0063A0  5808               	subwfb	___awdiv@dividend+1,w,c
  3466  0063A2  E305               	bnc	l3218
  3467  0063A4  5009               	movf	___awdiv@divisor,w,c
  3468  0063A6  5E07               	subwf	___awdiv@dividend,f,c
  3469  0063A8  500A               	movf	___awdiv@divisor+1,w,c
  3470  0063AA  5A08               	subwfb	___awdiv@dividend+1,f,c
  3471  0063AC  800D               	bsf	___awdiv@quotient,0,c
  3472  0063AE                     l3218:
  3473  0063AE  90D8               	bcf	status,0,c
  3474  0063B0  320A               	rrcf	___awdiv@divisor+1,f,c
  3475  0063B2  3209               	rrcf	___awdiv@divisor,f,c
  3476  0063B4  2E0B               	decfsz	___awdiv@counter,f,c
  3477  0063B6  D7EE               	goto	l3210
  3478  0063B8                     l3222:
  3479  0063B8  500C               	movf	___awdiv@sign,w,c
  3480  0063BA  E004               	bz	l3226
  3481  0063BC  6C0D               	negf	___awdiv@quotient,c
  3482  0063BE  1E0E               	comf	___awdiv@quotient+1,f,c
  3483  0063C0  B0D8               	btfsc	status,0,c
  3484  0063C2  2A0E               	incf	___awdiv@quotient+1,f,c
  3485  0063C4                     l3226:
  3486  0063C4  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3487  0063C8  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3488  0063CC  0012               	return		;funcret
  3489  0063CE                     __end_of___awdiv:
  3490                           	opt stack 0
  3491                           tblptru	equ	0xFF8
  3492                           tblptrh	equ	0xFF7
  3493                           tblptrl	equ	0xFF6
  3494                           tablat	equ	0xFF5
  3495                           prodh	equ	0xFF4
  3496                           prodl	equ	0xFF3
  3497                           indf0	equ	0xFEF
  3498                           plusw0	equ	0xFEB
  3499                           fsr0h	equ	0xFEA
  3500                           fsr0l	equ	0xFE9
  3501                           wreg	equ	0xFE8
  3502                           indf2	equ	0xFDF
  3503                           postinc2	equ	0xFDE
  3504                           postdec2	equ	0xFDD
  3505                           plusw2	equ	0xFDB
  3506                           fsr2h	equ	0xFDA
  3507                           fsr2l	equ	0xFD9
  3508                           status	equ	0xFD8
  3509                           
  3510 ;; *************** function _isdigit *****************
  3511 ;; Defined at:
  3512 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;  c               1    wreg     unsigned char 
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;  c               1    2[COMRAM] unsigned char 
  3517 ;; Return value:  Size  Location     Type
  3518 ;;		None               void
  3519 ;; Registers used:
  3520 ;;		wreg, status,2, status,0
  3521 ;; Tracked objects:
  3522 ;;		On entry : 0/0
  3523 ;;		On exit  : 0/0
  3524 ;;		Unchanged: 0/0
  3525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3526 ;;      Params:         0       0       0       0       0       0       0
  3527 ;;      Locals:         2       0       0       0       0       0       0
  3528 ;;      Temps:          1       0       0       0       0       0       0
  3529 ;;      Totals:         3       0       0       0       0       0       0
  3530 ;;Total ram usage:        3 bytes
  3531 ;; Hardware stack levels used:    1
  3532 ;; This function calls:
  3533 ;;		Nothing
  3534 ;; This function is called by:
  3535 ;;		_sprintf
  3536 ;; This function uses a non-reentrant model
  3537 ;;
  3538                           
  3539                           	psect	text5
  3540  005F5A                     __ptext5:
  3541                           	opt stack 0
  3542  005F5A                     _isdigit:
  3543                           	opt stack 29
  3544                           
  3545                           ;incstack = 0
  3546                           ;isdigit@c stored from wreg
  3547  005F5A  6E03               	movwf	isdigit@c,c
  3548  005F5C  6A02               	clrf	_isdigit$1246,c
  3549  005F5E  0E3A               	movlw	58
  3550  005F60  6003               	cpfslt	isdigit@c,c
  3551  005F62  D005               	goto	l3392
  3552  005F64  0E2F               	movlw	47
  3553  005F66  6403               	cpfsgt	isdigit@c,c
  3554  005F68  D002               	goto	l3392
  3555  005F6A  0E01               	movlw	1
  3556  005F6C  6E02               	movwf	_isdigit$1246,c
  3557  005F6E                     l3392:
  3558  005F6E  C002  F001         	movff	_isdigit$1246,??_isdigit
  3559  005F72  3001               	rrcf	??_isdigit,w,c
  3560  005F74  0012               	return		;funcret
  3561  005F76                     __end_of_isdigit:
  3562                           	opt stack 0
  3563                           tblptru	equ	0xFF8
  3564                           tblptrh	equ	0xFF7
  3565                           tblptrl	equ	0xFF6
  3566                           tablat	equ	0xFF5
  3567                           prodh	equ	0xFF4
  3568                           prodl	equ	0xFF3
  3569                           indf0	equ	0xFEF
  3570                           plusw0	equ	0xFEB
  3571                           fsr0h	equ	0xFEA
  3572                           fsr0l	equ	0xFE9
  3573                           wreg	equ	0xFE8
  3574                           indf2	equ	0xFDF
  3575                           postinc2	equ	0xFDE
  3576                           postdec2	equ	0xFDD
  3577                           plusw2	equ	0xFDB
  3578                           fsr2h	equ	0xFDA
  3579                           fsr2l	equ	0xFD9
  3580                           status	equ	0xFD8
  3581                           
  3582 ;; *************** function _fround *****************
  3583 ;; Defined at:
  3584 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  3585 ;; Parameters:    Size  Location     Type
  3586 ;;  prec            1    wreg     unsigned char 
  3587 ;; Auto vars:     Size  Location     Type
  3588 ;;  prec            1   55[COMRAM] unsigned char 
  3589 ;; Return value:  Size  Location     Type
  3590 ;;                  4   39[COMRAM] unsigned char 
  3591 ;; Registers used:
  3592 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3593 ;; Tracked objects:
  3594 ;;		On entry : 0/0
  3595 ;;		On exit  : 0/0
  3596 ;;		Unchanged: 0/0
  3597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3598 ;;      Params:         4       0       0       0       0       0       0
  3599 ;;      Locals:         9       0       0       0       0       0       0
  3600 ;;      Temps:          4       0       0       0       0       0       0
  3601 ;;      Totals:        17       0       0       0       0       0       0
  3602 ;;Total ram usage:       17 bytes
  3603 ;; Hardware stack levels used:    1
  3604 ;; Hardware stack levels required when called:    1
  3605 ;; This function calls:
  3606 ;;		___flmul
  3607 ;;		___lbdiv
  3608 ;;		___lbmod
  3609 ;; This function is called by:
  3610 ;;		_sprintf
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           	psect	text6
  3615  0068FE                     __ptext6:
  3616                           	opt stack 0
  3617  0068FE                     _fround:
  3618                           	opt stack 28
  3619                           
  3620                           ;incstack = 0
  3621                           ;fround@prec stored from wreg
  3622  0068FE  6E38               	movwf	fround@prec,c
  3623                           
  3624                           ;doprnt.c: 413: if(prec>=110)
  3625  006900  0E6D               	movlw	109
  3626  006902  6438               	cpfsgt	fround@prec,c
  3627  006904  D042               	goto	l3334
  3628                           
  3629                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3630  006906  0E0A               	movlw	10
  3631  006908  6E05               	movwf	___lbdiv@divisor,c
  3632  00690A  0E64               	movlw	100
  3633  00690C  6E01               	movwf	___lbmod@divisor,c
  3634  00690E  5038               	movf	fround@prec,w,c
  3635  006910  EC0D  F030         	call	___lbmod
  3636  006914  EC4B  F030         	call	___lbdiv
  3637  006918  D87B               	call	PL46	;call to abstracted procedure
  3638  00691A  90D8               	bcf	status,0,c
  3639  00691C  362C               	rlcf	??_fround,f,c
  3640  00691E  362D               	rlcf	??_fround+1,f,c
  3641  006920  0E24               	movlw	36
  3642  006922  262C               	addwf	??_fround,f,c
  3643  006924  0E00               	movlw	0
  3644  006926  222D               	addwfc	??_fround+1,f,c
  3645  006928  D857               	call	PL6	;call to abstracted procedure
  3646  00692A  ECBE  F039         	call	PL2	;call to abstracted procedure
  3647  00692E  0E64               	movlw	100
  3648  006930  6E05               	movwf	___lbdiv@divisor,c
  3649  006932  5038               	movf	fround@prec,w,c
  3650  006934  EC4B  F030         	call	___lbdiv
  3651  006938  D871               	call	PL86	;call to abstracted procedure
  3652  00693A  0E48               	movlw	72
  3653  00693C  D857               	call	PL32	;call to abstracted procedure
  3654  00693E  ECCC  F039         	call	PL4	;call to abstracted procedure
  3655  006942  EC19  F038         	call	___flmul	;wreg free
  3656  006946  D879               	call	PL98	;call to abstracted procedure
  3657                           
  3658                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3659  006948  0E0A               	movlw	10
  3660  00694A  6E01               	movwf	___lbmod@divisor,c
  3661  00694C  5038               	movf	fround@prec,w,c
  3662  00694E  EC0D  F030         	call	___lbmod
  3663  006952  D85E               	call	PL46	;call to abstracted procedure
  3664  006954  D847               	call	PL28	;call to abstracted procedure
  3665  006956  D840               	call	PL6	;call to abstracted procedure
  3666  006958  ECBE  F039         	call	PL2	;call to abstracted procedure
  3667  00695C  D877               	call	PL100	;call to abstracted procedure
  3668  00695E  EC19  F038         	call	___flmul	;wreg free
  3669  006962  C00F  F030         	movff	?___flmul,_fround$1712
  3670  006966  C010  F031         	movff	?___flmul+1,_fround$1712+1
  3671  00696A  C011  F032         	movff	?___flmul+2,_fround$1712+2
  3672  00696E  C012  F033         	movff	?___flmul+3,_fround$1712+3
  3673                           
  3674                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3675  006972  C030  F00F         	movff	_fround$1712,___flmul@b
  3676  006976  C031  F010         	movff	_fround$1712+1,___flmul@b+1
  3677  00697A  C032  F011         	movff	_fround$1712+2,___flmul@b+2
  3678  00697E  C033  F012         	movff	_fround$1712+3,___flmul@b+3
  3679  006982  D86D               	call	PL106	;call to abstracted procedure
  3680  006984  EC19  F038         	call	___flmul	;wreg free
  3681  006988  D03A               	goto	PL40	;call to abstracted procedure
  3682  00698A                     l3334:
  3683                           
  3684                           ;doprnt.c: 415: else if(prec > 10)
  3685  00698A  0E0A               	movlw	10
  3686  00698C  6438               	cpfsgt	fround@prec,c
  3687  00698E  D01B               	goto	l3342
  3688                           
  3689                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3690  006990  6E01               	movwf	___lbmod@divisor,c
  3691  006992  5038               	movf	fround@prec,w,c
  3692  006994  EC0D  F030         	call	___lbmod
  3693  006998  D83B               	call	PL46	;call to abstracted procedure
  3694  00699A  D824               	call	PL28	;call to abstracted procedure
  3695  00699C  D81D               	call	PL6	;call to abstracted procedure
  3696  00699E  ECBE  F039         	call	PL2	;call to abstracted procedure
  3697  0069A2  0E0A               	movlw	10
  3698  0069A4  6E05               	movwf	___lbdiv@divisor,c
  3699  0069A6  5038               	movf	fround@prec,w,c
  3700  0069A8  EC4B  F030         	call	___lbdiv
  3701  0069AC  D837               	call	PL86	;call to abstracted procedure
  3702  0069AE  0E24               	movlw	36
  3703  0069B0  D81D               	call	PL32	;call to abstracted procedure
  3704  0069B2  ECCC  F039         	call	PL4	;call to abstracted procedure
  3705  0069B6  EC19  F038         	call	___flmul	;wreg free
  3706  0069BA  D83F               	call	PL98	;call to abstracted procedure
  3707                           
  3708                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3709  0069BC  D847               	call	PL100	;call to abstracted procedure
  3710  0069BE  D84F               	call	PL106	;call to abstracted procedure
  3711  0069C0  EC19  F038         	call	___flmul	;wreg free
  3712  0069C4  D01C               	goto	PL40	;call to abstracted procedure
  3713  0069C6                     l3342:
  3714                           
  3715                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3716  0069C6  5038               	movf	fround@prec,w,c
  3717  0069C8  D832               	call	PL96	;call to abstracted procedure
  3718  0069CA  20F4               	addwfc	prodh,w,c
  3719  0069CC  ECCC  F039         	call	PL4	;call to abstracted procedure
  3720  0069D0  D846               	call	PL106	;call to abstracted procedure
  3721  0069D2  EC19  F038         	call	___flmul	;wreg free
  3722  0069D6  D013               	goto	PL40	;call to abstracted procedure
  3723  0069D8                     __end_of_fround:
  3724                           	opt stack 0
  3725  0069D8                     PL6:
  3726                           	opt stack 28
  3727  0069D8  0EB7               	movlw	low __npowers_
  3728  0069DA  242C               	addwf	??_fround,w,c
  3729  0069DC  6EF6               	movwf	tblptrl,c
  3730  0069DE  0E7E               	movlw	high __npowers_
  3731  0069E0  202D               	addwfc	??_fround+1,w,c
  3732  0069E2  0012               	return	
  3733  0069E4                     __end_ofPL6:
  3734                           	opt stack 0
  3735  0069E4                     PL28:
  3736                           	opt stack 28
  3737  0069E4  90D8               	bcf	status,0,c
  3738  0069E6  362C               	rlcf	??_fround,f,c
  3739  0069E8  362D               	rlcf	??_fround+1,f,c
  3740  0069EA  0012               	return	
  3741  0069EC                     __end_ofPL28:
  3742                           	opt stack 0
  3743  0069EC                     PL32:
  3744                           	opt stack 28
  3745  0069EC  262E               	addwf	??_fround+2,f,c
  3746  0069EE  0E00               	movlw	0
  3747  0069F0  222F               	addwfc	??_fround+3,f,c
  3748  0069F2  0EB7               	movlw	low __npowers_
  3749  0069F4  242E               	addwf	??_fround+2,w,c
  3750  0069F6  6EF6               	movwf	tblptrl,c
  3751  0069F8  0E7E               	movlw	high __npowers_
  3752  0069FA  202F               	addwfc	??_fround+3,w,c
  3753  0069FC  0012               	return	
  3754  0069FE                     __end_ofPL32:
  3755                           	opt stack 0
  3756  0069FE                     PL40:
  3757                           	opt stack 28
  3758  0069FE  C00F  F028         	movff	?___flmul,?_fround
  3759  006A02  C010  F029         	movff	?___flmul+1,?_fround+1
  3760  006A06  C011  F02A         	movff	?___flmul+2,?_fround+2
  3761  006A0A  C012  F02B         	movff	?___flmul+3,?_fround+3
  3762  006A0E  0012               	return	
  3763  006A10                     __end_ofPL40:
  3764                           	opt stack 0
  3765  006A10                     PL46:
  3766                           	opt stack 28
  3767  006A10  6E2C               	movwf	??_fround& (0+255),c
  3768  006A12  6A2D               	clrf	(??_fround+1)& (0+255),c
  3769  006A14  90D8               	bcf	status,0,c
  3770  006A16  362C               	rlcf	??_fround,f,c
  3771  006A18  362D               	rlcf	??_fround+1,f,c
  3772  006A1A  0012               	return	
  3773  006A1C                     __end_ofPL46:
  3774                           	opt stack 0
  3775  006A1C                     PL86:
  3776                           	opt stack 28
  3777  006A1C  6E2E               	movwf	(??_fround+2)& (0+255),c
  3778  006A1E  6A2F               	clrf	(??_fround+3)& (0+255),c
  3779  006A20  90D8               	bcf	status,0,c
  3780  006A22  362E               	rlcf	??_fround+2,f,c
  3781  006A24  362F               	rlcf	??_fround+3,f,c
  3782  006A26  90D8               	bcf	status,0,c
  3783  006A28  362E               	rlcf	??_fround+2,f,c
  3784  006A2A  362F               	rlcf	??_fround+3,f,c
  3785  006A2C  0012               	return	
  3786  006A2E                     __end_ofPL86:
  3787                           	opt stack 0
  3788  006A2E                     PL96:
  3789                           	opt stack 28
  3790  006A2E  0D04               	mullw	4
  3791  006A30  0EB7               	movlw	low __npowers_
  3792  006A32  24F3               	addwf	prodl,w,c
  3793  006A34  6EF6               	movwf	tblptrl,c
  3794  006A36  0E7E               	movlw	high __npowers_
  3795  006A38  0012               	return	
  3796  006A3A                     __end_ofPL96:
  3797                           	opt stack 0
  3798  006A3A                     PL98:
  3799                           	opt stack 28
  3800  006A3A  C00F  F034         	movff	?___flmul,_fround$1711
  3801  006A3E  C010  F035         	movff	?___flmul+1,_fround$1711+1
  3802  006A42  C011  F036         	movff	?___flmul+2,_fround$1711+2
  3803  006A46  C012  F037         	movff	?___flmul+3,_fround$1711+3
  3804  006A4A  0012               	return	
  3805  006A4C                     __end_ofPL98:
  3806                           	opt stack 0
  3807  006A4C                     PL100:
  3808                           	opt stack 28
  3809  006A4C  C034  F00F         	movff	_fround$1711,___flmul@b
  3810  006A50  C035  F010         	movff	_fround$1711+1,___flmul@b+1
  3811  006A54  C036  F011         	movff	_fround$1711+2,___flmul@b+2
  3812  006A58  C037  F012         	movff	_fround$1711+3,___flmul@b+3
  3813  006A5C  0012               	return	
  3814  006A5E                     __end_ofPL100:
  3815                           	opt stack 0
  3816  006A5E                     PL106:
  3817                           	opt stack 28
  3818  006A5E  6A13               	clrf	___flmul@a,c
  3819  006A60  6A14               	clrf	___flmul@a+1,c
  3820  006A62  6A15               	clrf	___flmul@a+2,c
  3821  006A64  0E3F               	movlw	63
  3822  006A66  6E16               	movwf	___flmul@a+3,c
  3823  006A68  0C3F               	retlw	63
  3824  006A6A                     __end_ofPL106:
  3825                           	opt stack 0
  3826                           tblptru	equ	0xFF8
  3827                           tblptrh	equ	0xFF7
  3828                           tblptrl	equ	0xFF6
  3829                           tablat	equ	0xFF5
  3830                           prodh	equ	0xFF4
  3831                           prodl	equ	0xFF3
  3832                           indf0	equ	0xFEF
  3833                           plusw0	equ	0xFEB
  3834                           fsr0h	equ	0xFEA
  3835                           fsr0l	equ	0xFE9
  3836                           wreg	equ	0xFE8
  3837                           indf2	equ	0xFDF
  3838                           postinc2	equ	0xFDE
  3839                           postdec2	equ	0xFDD
  3840                           plusw2	equ	0xFDB
  3841                           fsr2h	equ	0xFDA
  3842                           fsr2l	equ	0xFD9
  3843                           status	equ	0xFD8
  3844                           
  3845 ;; *************** function ___lbmod *****************
  3846 ;; Defined at:
  3847 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lbmod.c"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;  dividend        1    wreg     unsigned char 
  3850 ;;  divisor         1    0[COMRAM] unsigned char 
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;  dividend        1    1[COMRAM] unsigned char 
  3853 ;;  rem             1    3[COMRAM] unsigned char 
  3854 ;;  counter         1    2[COMRAM] unsigned char 
  3855 ;; Return value:  Size  Location     Type
  3856 ;;                  1    wreg      unsigned char 
  3857 ;; Registers used:
  3858 ;;		wreg, status,2, status,0
  3859 ;; Tracked objects:
  3860 ;;		On entry : 0/0
  3861 ;;		On exit  : 0/0
  3862 ;;		Unchanged: 0/0
  3863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3864 ;;      Params:         1       0       0       0       0       0       0
  3865 ;;      Locals:         3       0       0       0       0       0       0
  3866 ;;      Temps:          0       0       0       0       0       0       0
  3867 ;;      Totals:         4       0       0       0       0       0       0
  3868 ;;Total ram usage:        4 bytes
  3869 ;; Hardware stack levels used:    1
  3870 ;; This function calls:
  3871 ;;		Nothing
  3872 ;; This function is called by:
  3873 ;;		_fround
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text7
  3878  00601A                     __ptext7:
  3879                           	opt stack 0
  3880  00601A                     ___lbmod:
  3881                           	opt stack 28
  3882                           
  3883                           ;incstack = 0
  3884                           ;___lbmod@dividend stored from wreg
  3885  00601A  6E02               	movwf	___lbmod@dividend,c
  3886  00601C  0E08               	movlw	8
  3887  00601E  6E03               	movwf	___lbmod@counter,c
  3888  006020  6A04               	clrf	___lbmod@rem,c
  3889  006022                     l3296:
  3890  006022  90D8               	bcf	status,0,c
  3891  006024  3402               	rlcf	___lbmod@dividend,w,c
  3892  006026  3404               	rlcf	___lbmod@rem,w,c
  3893  006028  6E04               	movwf	___lbmod@rem,c
  3894  00602A  90D8               	bcf	status,0,c
  3895  00602C  3602               	rlcf	___lbmod@dividend,f,c
  3896  00602E  5001               	movf	___lbmod@divisor,w,c
  3897  006030  5C04               	subwf	___lbmod@rem,w,c
  3898  006032  E302               	bnc	l3304
  3899  006034  5001               	movf	___lbmod@divisor,w,c
  3900  006036  5E04               	subwf	___lbmod@rem,f,c
  3901  006038                     l3304:
  3902  006038  2E03               	decfsz	___lbmod@counter,f,c
  3903  00603A  D7F3               	goto	l3296
  3904  00603C  5004               	movf	___lbmod@rem,w,c
  3905  00603E  0012               	return		;funcret
  3906  006040                     __end_of___lbmod:
  3907                           	opt stack 0
  3908                           tblptru	equ	0xFF8
  3909                           tblptrh	equ	0xFF7
  3910                           tblptrl	equ	0xFF6
  3911                           tablat	equ	0xFF5
  3912                           prodh	equ	0xFF4
  3913                           prodl	equ	0xFF3
  3914                           indf0	equ	0xFEF
  3915                           plusw0	equ	0xFEB
  3916                           fsr0h	equ	0xFEA
  3917                           fsr0l	equ	0xFE9
  3918                           wreg	equ	0xFE8
  3919                           indf2	equ	0xFDF
  3920                           postinc2	equ	0xFDE
  3921                           postdec2	equ	0xFDD
  3922                           plusw2	equ	0xFDB
  3923                           fsr2h	equ	0xFDA
  3924                           fsr2l	equ	0xFD9
  3925                           status	equ	0xFD8
  3926                           
  3927 ;; *************** function ___lbdiv *****************
  3928 ;; Defined at:
  3929 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lbdiv.c"
  3930 ;; Parameters:    Size  Location     Type
  3931 ;;  dividend        1    wreg     unsigned char 
  3932 ;;  divisor         1    4[COMRAM] unsigned char 
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;  dividend        1    5[COMRAM] unsigned char 
  3935 ;;  quotient        1    7[COMRAM] unsigned char 
  3936 ;;  counter         1    6[COMRAM] unsigned char 
  3937 ;; Return value:  Size  Location     Type
  3938 ;;                  1    wreg      unsigned char 
  3939 ;; Registers used:
  3940 ;;		wreg, status,2, status,0
  3941 ;; Tracked objects:
  3942 ;;		On entry : 0/0
  3943 ;;		On exit  : 0/0
  3944 ;;		Unchanged: 0/0
  3945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3946 ;;      Params:         1       0       0       0       0       0       0
  3947 ;;      Locals:         3       0       0       0       0       0       0
  3948 ;;      Temps:          0       0       0       0       0       0       0
  3949 ;;      Totals:         4       0       0       0       0       0       0
  3950 ;;Total ram usage:        4 bytes
  3951 ;; Hardware stack levels used:    1
  3952 ;; This function calls:
  3953 ;;		Nothing
  3954 ;; This function is called by:
  3955 ;;		_fround
  3956 ;; This function uses a non-reentrant model
  3957 ;;
  3958                           
  3959                           	psect	text8
  3960  006096                     __ptext8:
  3961                           	opt stack 0
  3962  006096                     ___lbdiv:
  3963                           	opt stack 28
  3964                           
  3965                           ;incstack = 0
  3966                           ;___lbdiv@dividend stored from wreg
  3967  006096  6E06               	movwf	___lbdiv@dividend,c
  3968  006098  6A08               	clrf	___lbdiv@quotient,c
  3969  00609A  5005               	movf	___lbdiv@divisor,w,c
  3970  00609C  E014               	bz	l3288
  3971  00609E  0E01               	movlw	1
  3972  0060A0  6E07               	movwf	___lbdiv@counter,c
  3973  0060A2  D003               	goto	l3276
  3974  0060A4                     l3272:
  3975  0060A4  90D8               	bcf	status,0,c
  3976  0060A6  3605               	rlcf	___lbdiv@divisor,f,c
  3977  0060A8  2A07               	incf	___lbdiv@counter,f,c
  3978  0060AA                     l3276:
  3979  0060AA  AE05               	btfss	___lbdiv@divisor,7,c
  3980  0060AC  D7FB               	goto	l3272
  3981  0060AE                     l3278:
  3982  0060AE  90D8               	bcf	status,0,c
  3983  0060B0  3608               	rlcf	___lbdiv@quotient,f,c
  3984  0060B2  5005               	movf	___lbdiv@divisor,w,c
  3985  0060B4  5C06               	subwf	___lbdiv@dividend,w,c
  3986  0060B6  E303               	bnc	l3284
  3987  0060B8  5005               	movf	___lbdiv@divisor,w,c
  3988  0060BA  5E06               	subwf	___lbdiv@dividend,f,c
  3989  0060BC  8008               	bsf	___lbdiv@quotient,0,c
  3990  0060BE                     l3284:
  3991  0060BE  90D8               	bcf	status,0,c
  3992  0060C0  3205               	rrcf	___lbdiv@divisor,f,c
  3993  0060C2  2E07               	decfsz	___lbdiv@counter,f,c
  3994  0060C4  D7F4               	goto	l3278
  3995  0060C6                     l3288:
  3996  0060C6  5008               	movf	___lbdiv@quotient,w,c
  3997  0060C8  0012               	return		;funcret
  3998  0060CA                     __end_of___lbdiv:
  3999                           	opt stack 0
  4000                           tblptru	equ	0xFF8
  4001                           tblptrh	equ	0xFF7
  4002                           tblptrl	equ	0xFF6
  4003                           tablat	equ	0xFF5
  4004                           prodh	equ	0xFF4
  4005                           prodl	equ	0xFF3
  4006                           indf0	equ	0xFEF
  4007                           plusw0	equ	0xFEB
  4008                           fsr0h	equ	0xFEA
  4009                           fsr0l	equ	0xFE9
  4010                           wreg	equ	0xFE8
  4011                           indf2	equ	0xFDF
  4012                           postinc2	equ	0xFDE
  4013                           postdec2	equ	0xFDD
  4014                           plusw2	equ	0xFDB
  4015                           fsr2h	equ	0xFDA
  4016                           fsr2l	equ	0xFD9
  4017                           status	equ	0xFD8
  4018                           
  4019 ;; *************** function ___flmul *****************
  4020 ;; Defined at:
  4021 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprcmul.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;  b               4   14[COMRAM] unsigned char 
  4024 ;;  a               4   18[COMRAM] unsigned char 
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;  prod            4   33[COMRAM] struct .
  4027 ;;  grs             4   28[COMRAM] unsigned long 
  4028 ;;  temp            2   37[COMRAM] struct .
  4029 ;;  bexp            1   32[COMRAM] unsigned char 
  4030 ;;  aexp            1   27[COMRAM] unsigned char 
  4031 ;;  sign            1   26[COMRAM] unsigned char 
  4032 ;; Return value:  Size  Location     Type
  4033 ;;                  4   14[COMRAM] unsigned char 
  4034 ;; Registers used:
  4035 ;;		wreg, status,2, status,0, prodl, prodh
  4036 ;; Tracked objects:
  4037 ;;		On entry : 0/0
  4038 ;;		On exit  : 0/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4041 ;;      Params:         8       0       0       0       0       0       0
  4042 ;;      Locals:        13       0       0       0       0       0       0
  4043 ;;      Temps:          4       0       0       0       0       0       0
  4044 ;;      Totals:        25       0       0       0       0       0       0
  4045 ;;Total ram usage:       25 bytes
  4046 ;; Hardware stack levels used:    1
  4047 ;; This function calls:
  4048 ;;		Nothing
  4049 ;; This function is called by:
  4050 ;;		_fround
  4051 ;;		_scale
  4052 ;;		_sprintf
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           	psect	text9
  4057  007032                     __ptext9:
  4058                           	opt stack 0
  4059  007032                     ___flmul:
  4060                           	opt stack 28
  4061                           
  4062                           ;incstack = 0
  4063  007032  5012               	movf	___flmul@b+3,w,c
  4064  007034  0B80               	andlw	128
  4065  007036  6E1B               	movwf	___flmul@sign,c
  4066  007038  5012               	movf	___flmul@b+3,w,c
  4067  00703A  2412               	addwf	___flmul@b+3,w,c
  4068  00703C  6E21               	movwf	___flmul@bexp,c
  4069  00703E  BE11               	btfsc	___flmul@b+2,7,c
  4070  007040  8021               	bsf	___flmul@bexp,0,c
  4071  007042  5021               	movf	___flmul@bexp,w,c
  4072  007044  E005               	bz	l1150
  4073  007046  2821               	incf	___flmul@bexp,w,c
  4074  007048  E101               	bnz	l3080
  4075  00704A  D902               	call	PL146	;call to abstracted procedure
  4076  00704C                     l3080:
  4077  00704C  8E11               	bsf	___flmul@b+2,7,c
  4078  00704E  D001               	goto	l3082
  4079  007050                     l1150:
  4080  007050  D8FF               	call	PL146	;call to abstracted procedure
  4081  007052                     l3082:
  4082  007052  5016               	movf	___flmul@a+3,w,c
  4083  007054  0B80               	andlw	128
  4084  007056  1A1B               	xorwf	___flmul@sign,f,c
  4085  007058  5016               	movf	___flmul@a+3,w,c
  4086  00705A  2416               	addwf	___flmul@a+3,w,c
  4087  00705C  6E1C               	movwf	___flmul@aexp,c
  4088  00705E  BE15               	btfsc	___flmul@a+2,7,c
  4089  007060  801C               	bsf	___flmul@aexp,0,c
  4090  007062  501C               	movf	___flmul@aexp,w,c
  4091  007064  E005               	bz	l1154
  4092  007066  281C               	incf	___flmul@aexp,w,c
  4093  007068  E101               	bnz	l3094
  4094  00706A  D8E8               	call	PL132	;call to abstracted procedure
  4095  00706C                     l3094:
  4096  00706C  8E15               	bsf	___flmul@a+2,7,c
  4097  00706E  D001               	goto	l3096
  4098  007070                     l1154:
  4099  007070  D8E5               	call	PL132	;call to abstracted procedure
  4100  007072                     l3096:
  4101  007072  501C               	movf	___flmul@aexp,w,c
  4102  007074  E002               	bz	l1159
  4103  007076  5021               	movf	___flmul@bexp,w,c
  4104  007078  E105               	bnz	l3100
  4105  00707A                     l1159:
  4106  00707A  6A0F               	clrf	?___flmul,c
  4107  00707C  6A10               	clrf	?___flmul+1,c
  4108  00707E  6A11               	clrf	?___flmul+2,c
  4109  007080  6A12               	clrf	?___flmul+3,c
  4110  007082  0012               	return	
  4111  007084                     l3100:
  4112  007084  5015               	movf	___flmul@a+2,w,c
  4113  007086  020F               	mulwf	___flmul@b,c
  4114  007088  D8B1               	call	PL18	;call to abstracted procedure
  4115  00708A  6E1D               	movwf	___flmul@grs,c
  4116  00708C  6A1E               	clrf	___flmul@grs+1,c
  4117  00708E  6A1F               	clrf	___flmul@grs+2,c
  4118  007090  6A20               	clrf	___flmul@grs+3,c
  4119  007092  5027               	movf	___flmul@temp+1,w,c
  4120  007094  6E22               	movwf	___flmul@prod,c
  4121  007096  6A23               	clrf	___flmul@prod+1,c
  4122  007098  6A24               	clrf	___flmul@prod+2,c
  4123  00709A  6A25               	clrf	___flmul@prod+3,c
  4124  00709C  5014               	movf	___flmul@a+1,w,c
  4125  00709E  0210               	mulwf	___flmul@b+1,c
  4126  0070A0  D8A5               	call	PL18	;call to abstracted procedure
  4127  0070A2  D8B2               	call	PL66	;call to abstracted procedure
  4128  0070A4  5013               	movf	___flmul@a,w,c
  4129  0070A6  0211               	mulwf	___flmul@b+2,c
  4130  0070A8  D8A1               	call	PL18	;call to abstracted procedure
  4131  0070AA  D8AE               	call	PL66	;call to abstracted procedure
  4132  0070AC  D8A5               	call	PL64	;call to abstracted procedure
  4133  0070AE  5013               	movf	___flmul@a,w,c
  4134  0070B0  0210               	mulwf	___flmul@b+1,c
  4135  0070B2  D89C               	call	PL18	;call to abstracted procedure
  4136  0070B4  D8B5               	call	PL70	;call to abstracted procedure
  4137  0070B6  5014               	movf	___flmul@a+1,w,c
  4138  0070B8  020F               	mulwf	___flmul@b,c
  4139  0070BA  D898               	call	PL18	;call to abstracted procedure
  4140  0070BC  D8B1               	call	PL70	;call to abstracted procedure
  4141  0070BE  D89C               	call	PL64	;call to abstracted procedure
  4142  0070C0  5013               	movf	___flmul@a,w,c
  4143  0070C2  020F               	mulwf	___flmul@b,c
  4144  0070C4  D893               	call	PL18	;call to abstracted procedure
  4145  0070C6  D8AC               	call	PL70	;call to abstracted procedure
  4146  0070C8  5015               	movf	___flmul@a+2,w,c
  4147  0070CA  0210               	mulwf	___flmul@b+1,c
  4148  0070CC  D88F               	call	PL18	;call to abstracted procedure
  4149  0070CE  D8AF               	call	PL110	;call to abstracted procedure
  4150  0070D0  5014               	movf	___flmul@a+1,w,c
  4151  0070D2  0211               	mulwf	___flmul@b+2,c
  4152  0070D4  D88B               	call	PL18	;call to abstracted procedure
  4153  0070D6  D8AB               	call	PL110	;call to abstracted procedure
  4154  0070D8  5015               	movf	___flmul@a+2,w,c
  4155  0070DA  0211               	mulwf	___flmul@b+2,c
  4156  0070DC  D887               	call	PL18	;call to abstracted procedure
  4157  0070DE  6E17               	movwf	??___flmul& (0+255),c
  4158  0070E0  5027               	movf	___flmul@temp+1,w,c
  4159  0070E2  6E18               	movwf	(??___flmul+1)& (0+255),c
  4160  0070E4  6A19               	clrf	(??___flmul+2)& (0+255),c
  4161  0070E6  6A1A               	clrf	(??___flmul+3)& (0+255),c
  4162  0070E8  C019  F01A         	movff	??___flmul+2,??___flmul+3
  4163  0070EC  C018  F019         	movff	??___flmul+1,??___flmul+2
  4164  0070F0  C017  F018         	movff	??___flmul,??___flmul+1
  4165  0070F4  6A17               	clrf	??___flmul,c
  4166  0070F6  5017               	movf	??___flmul,w,c
  4167  0070F8  2622               	addwf	___flmul@prod,f,c
  4168  0070FA  5018               	movf	??___flmul+1,w,c
  4169  0070FC  2223               	addwfc	___flmul@prod+1,f,c
  4170  0070FE  5019               	movf	??___flmul+2,w,c
  4171  007100  2224               	addwfc	___flmul@prod+2,f,c
  4172  007102  501A               	movf	??___flmul+3,w,c
  4173  007104  2225               	addwfc	___flmul@prod+3,f,c
  4174  007106  5020               	movf	___flmul@grs+3,w,c
  4175  007108  2622               	addwf	___flmul@prod,f,c
  4176  00710A  D89D               	call	PL138	;call to abstracted procedure
  4177  00710C  D875               	call	PL64	;call to abstracted procedure
  4178  00710E  501C               	movf	___flmul@aexp,w,c
  4179  007110  C021  F017         	movff	___flmul@bexp,??___flmul
  4180  007114  6A18               	clrf	(??___flmul+1)& (0+255),c
  4181  007116  2617               	addwf	??___flmul,f,c
  4182  007118  0E00               	movlw	0
  4183  00711A  2218               	addwfc	??___flmul+1,f,c
  4184  00711C  0E82               	movlw	130
  4185  00711E  2417               	addwf	??___flmul,w,c
  4186  007120  6E26               	movwf	___flmul@temp,c
  4187  007122  0EFF               	movlw	255
  4188  007124  2018               	addwfc	??___flmul+1,w,c
  4189  007126  6E27               	movwf	___flmul@temp+1,c
  4190  007128  D00F               	goto	l3148
  4191  00712A                     l3142:
  4192  00712A  90D8               	bcf	status,0,c
  4193  00712C  3622               	rlcf	___flmul@prod,f,c
  4194  00712E  3623               	rlcf	___flmul@prod+1,f,c
  4195  007130  3624               	rlcf	___flmul@prod+2,f,c
  4196  007132  3625               	rlcf	___flmul@prod+3,f,c
  4197  007134  BE20               	btfsc	___flmul@grs+3,7,c
  4198  007136  8022               	bsf	___flmul@prod,0,c
  4199  007138  90D8               	bcf	status,0,c
  4200  00713A  361D               	rlcf	___flmul@grs,f,c
  4201  00713C  361E               	rlcf	___flmul@grs+1,f,c
  4202  00713E  361F               	rlcf	___flmul@grs+2,f,c
  4203  007140  3620               	rlcf	___flmul@grs+3,f,c
  4204  007142  0626               	decf	___flmul@temp,f,c
  4205  007144  A0D8               	btfss	status,0,c
  4206  007146  0627               	decf	___flmul@temp+1,f,c
  4207  007148                     l3148:
  4208  007148  AE24               	btfss	___flmul@prod+2,7,c
  4209  00714A  D7EF               	goto	l3142
  4210  00714C  6A1C               	clrf	___flmul@aexp,c
  4211  00714E  AE20               	btfss	___flmul@grs+3,7,c
  4212  007150  D013               	goto	l1165
  4213  007152  501D               	movf	___flmul@grs,w,c
  4214  007154  6E17               	movwf	??___flmul& (0+255),c
  4215  007156  501E               	movf	___flmul@grs+1,w,c
  4216  007158  6E18               	movwf	(??___flmul+1)& (0+255),c
  4217  00715A  501F               	movf	___flmul@grs+2,w,c
  4218  00715C  6E19               	movwf	(??___flmul+2)& (0+255),c
  4219  00715E  0E7F               	movlw	127
  4220  007160  1420               	andwf	___flmul@grs+3,w,c
  4221  007162  6E1A               	movwf	(??___flmul+3)& (0+255),c
  4222  007164  5017               	movf	??___flmul,w,c
  4223  007166  1018               	iorwf	??___flmul+1,w,c
  4224  007168  1019               	iorwf	??___flmul+2,w,c
  4225  00716A  101A               	iorwf	??___flmul+3,w,c
  4226  00716C  E003               	bz	l1166
  4227  00716E                     l3152:
  4228  00716E  0E01               	movlw	1
  4229  007170  6E1C               	movwf	___flmul@aexp,c
  4230  007172  D002               	goto	l1165
  4231  007174                     l1166:
  4232  007174  B022               	btfsc	___flmul@prod,0,c
  4233  007176  D7FB               	goto	l3152
  4234  007178                     l1165:
  4235  007178  501C               	movf	___flmul@aexp,w,c
  4236  00717A  E00B               	bz	l3164
  4237  00717C  2A22               	incf	___flmul@prod,f,c
  4238  00717E  D863               	call	PL138	;call to abstracted procedure
  4239  007180  A025               	btfss	___flmul@prod+3,0,c
  4240  007182  D007               	goto	l3164
  4241  007184  3425               	rlcf	___flmul@prod+3,w,c
  4242  007186  3225               	rrcf	___flmul@prod+3,f,c
  4243  007188  3224               	rrcf	___flmul@prod+2,f,c
  4244  00718A  3223               	rrcf	___flmul@prod+1,f,c
  4245  00718C  3222               	rrcf	___flmul@prod,f,c
  4246  00718E  4A26               	infsnz	___flmul@temp,f,c
  4247  007190  2A27               	incf	___flmul@temp+1,f,c
  4248  007192                     l3164:
  4249  007192  BE27               	btfsc	___flmul@temp+1,7,c
  4250  007194  D00A               	goto	l3168
  4251  007196  5027               	movf	___flmul@temp+1,w,c
  4252  007198  E102               	bnz	u3160
  4253  00719A  2826               	incf	___flmul@temp,w,c
  4254  00719C  E306               	bnc	l3168
  4255  00719E                     u3160:
  4256  00719E  6A22               	clrf	___flmul@prod,c
  4257  0071A0  6A23               	clrf	___flmul@prod+1,c
  4258  0071A2  0E80               	movlw	128
  4259  0071A4  6E24               	movwf	___flmul@prod+2,c
  4260  0071A6  0E7F               	movlw	127
  4261  0071A8  D015               	goto	L8
  4262  0071AA                     l3168:
  4263  0071AA  BE27               	btfsc	___flmul@temp+1,7,c
  4264  0071AC  D004               	goto	l3170
  4265  0071AE  5027               	movf	___flmul@temp+1,w,c
  4266  0071B0  E108               	bnz	l1173
  4267  0071B2  0426               	decf	___flmul@temp,w,c
  4268  0071B4  E206               	bc	l1173
  4269  0071B6                     l3170:
  4270  0071B6  6A22               	clrf	___flmul@prod,c
  4271  0071B8  6A23               	clrf	___flmul@prod+1,c
  4272  0071BA  6A24               	clrf	___flmul@prod+2,c
  4273  0071BC  6A25               	clrf	___flmul@prod+3,c
  4274  0071BE  6A1B               	clrf	___flmul@sign,c
  4275  0071C0  D00A               	goto	l3180
  4276  0071C2                     l1173:
  4277  0071C2  C026  F021         	movff	___flmul@temp,___flmul@bexp
  4278  0071C6  0E7F               	movlw	127
  4279  0071C8  1624               	andwf	___flmul@prod+2,f,c
  4280  0071CA  6A25               	clrf	___flmul@prod+3,c
  4281  0071CC  B021               	btfsc	___flmul@bexp,0,c
  4282  0071CE  8E24               	bsf	___flmul@prod+2,7,c
  4283  0071D0  90D8               	bcf	status,0,c
  4284  0071D2  3021               	rrcf	___flmul@bexp,w,c
  4285  0071D4                     L8:
  4286  0071D4  6E25               	movwf	___flmul@prod+3,c
  4287  0071D6                     l3180:
  4288  0071D6  501B               	movf	___flmul@sign,w,c
  4289  0071D8  1225               	iorwf	___flmul@prod+3,f,c
  4290  0071DA  C022  F00F         	movff	___flmul@prod,?___flmul
  4291  0071DE  C023  F010         	movff	___flmul@prod+1,?___flmul+1
  4292  0071E2  C024  F011         	movff	___flmul@prod+2,?___flmul+2
  4293  0071E6  C025  F012         	movff	___flmul@prod+3,?___flmul+3
  4294  0071EA  0012               	return		;funcret
  4295  0071EC                     __end_of___flmul:
  4296                           	opt stack 0
  4297  0071EC                     PL18:
  4298                           	opt stack 28
  4299  0071EC  CFF3 F026          	movff	prodl,___flmul@temp
  4300  0071F0  CFF4 F027          	movff	prodh,___flmul@temp+1
  4301  0071F4  5026               	movf	___flmul@temp,w,c
  4302  0071F6  0012               	return	
  4303  0071F8                     __end_ofPL18:
  4304                           	opt stack 0
  4305  0071F8                     PL64:
  4306                           	opt stack 28
  4307  0071F8  C01F  F020         	movff	___flmul@grs+2,___flmul@grs+3
  4308  0071FC  C01E  F01F         	movff	___flmul@grs+1,___flmul@grs+2
  4309  007200  C01D  F01E         	movff	___flmul@grs,___flmul@grs+1
  4310  007204  6A1D               	clrf	___flmul@grs,c
  4311  007206  0012               	return	
  4312  007208                     __end_ofPL64:
  4313                           	opt stack 0
  4314  007208                     PL66:
  4315                           	opt stack 28
  4316  007208  261D               	addwf	___flmul@grs,f,c
  4317  00720A  0E00               	movlw	0
  4318  00720C  221E               	addwfc	___flmul@grs+1,f,c
  4319  00720E  221F               	addwfc	___flmul@grs+2,f,c
  4320  007210  2220               	addwfc	___flmul@grs+3,f,c
  4321  007212  5027               	movf	___flmul@temp+1,w,c
  4322  007214  2622               	addwf	___flmul@prod,f,c
  4323  007216  0E00               	movlw	0
  4324  007218  2223               	addwfc	___flmul@prod+1,f,c
  4325  00721A  2224               	addwfc	___flmul@prod+2,f,c
  4326  00721C  2225               	addwfc	___flmul@prod+3,f,c
  4327  00721E  0C00               	retlw	0
  4328  007220                     __end_ofPL66:
  4329                           	opt stack 0
  4330  007220                     PL70:
  4331                           	opt stack 28
  4332  007220  261D               	addwf	___flmul@grs,f,c
  4333  007222  5027               	movf	___flmul@temp+1,w,c
  4334  007224  221E               	addwfc	___flmul@grs+1,f,c
  4335  007226  0E00               	movlw	0
  4336  007228  221F               	addwfc	___flmul@grs+2,f,c
  4337  00722A  2220               	addwfc	___flmul@grs+3,f,c
  4338  00722C  0C00               	retlw	0
  4339  00722E                     __end_ofPL70:
  4340                           	opt stack 0
  4341  00722E                     PL110:
  4342                           	opt stack 28
  4343  00722E  2622               	addwf	___flmul@prod,f,c
  4344  007230  5027               	movf	___flmul@temp+1,w,c
  4345  007232  2223               	addwfc	___flmul@prod+1,f,c
  4346  007234  0E00               	movlw	0
  4347  007236  2224               	addwfc	___flmul@prod+2,f,c
  4348  007238  2225               	addwfc	___flmul@prod+3,f,c
  4349  00723A  0C00               	retlw	0
  4350  00723C                     __end_ofPL110:
  4351                           	opt stack 0
  4352  00723C                     PL132:
  4353                           	opt stack 28
  4354  00723C  6A13               	clrf	___flmul@a,c
  4355  00723E  6A14               	clrf	___flmul@a+1,c
  4356  007240  6A15               	clrf	___flmul@a+2,c
  4357  007242  6A16               	clrf	___flmul@a+3,c
  4358  007244  0012               	return	
  4359  007246                     __end_ofPL132:
  4360                           	opt stack 0
  4361  007246                     PL138:
  4362                           	opt stack 28
  4363  007246  0E00               	movlw	0
  4364  007248  2223               	addwfc	___flmul@prod+1,f,c
  4365  00724A  2224               	addwfc	___flmul@prod+2,f,c
  4366  00724C  2225               	addwfc	___flmul@prod+3,f,c
  4367  00724E  0C00               	retlw	0
  4368  007250                     __end_ofPL138:
  4369                           	opt stack 0
  4370  007250                     PL146:
  4371                           	opt stack 28
  4372  007250  6A0F               	clrf	___flmul@b,c
  4373  007252  6A10               	clrf	___flmul@b+1,c
  4374  007254  6A11               	clrf	___flmul@b+2,c
  4375  007256  6A12               	clrf	___flmul@b+3,c
  4376  007258  0012               	return	
  4377  00725A                     __end_ofPL146:
  4378                           	opt stack 0
  4379                           tblptru	equ	0xFF8
  4380                           tblptrh	equ	0xFF7
  4381                           tblptrl	equ	0xFF6
  4382                           tablat	equ	0xFF5
  4383                           prodh	equ	0xFF4
  4384                           prodl	equ	0xFF3
  4385                           indf0	equ	0xFEF
  4386                           plusw0	equ	0xFEB
  4387                           fsr0h	equ	0xFEA
  4388                           fsr0l	equ	0xFE9
  4389                           wreg	equ	0xFE8
  4390                           indf2	equ	0xFDF
  4391                           postinc2	equ	0xFDE
  4392                           postdec2	equ	0xFDD
  4393                           plusw2	equ	0xFDB
  4394                           fsr2h	equ	0xFDA
  4395                           fsr2l	equ	0xFD9
  4396                           status	equ	0xFD8
  4397                           
  4398 ;; *************** function __tdiv_to_l_ *****************
  4399 ;; Defined at:
  4400 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  4401 ;; Parameters:    Size  Location     Type
  4402 ;;  f1              4    0[COMRAM] float 
  4403 ;;  f2              4    4[COMRAM] float 
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;  quot            4   11[COMRAM] unsigned long 
  4406 ;;  exp1            1   16[COMRAM] unsigned char 
  4407 ;;  cntr            1   15[COMRAM] unsigned char 
  4408 ;; Return value:  Size  Location     Type
  4409 ;;                  4    0[COMRAM] unsigned long 
  4410 ;; Registers used:
  4411 ;;		wreg, status,2, status,0
  4412 ;; Tracked objects:
  4413 ;;		On entry : 0/0
  4414 ;;		On exit  : 0/0
  4415 ;;		Unchanged: 0/0
  4416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4417 ;;      Params:         8       0       0       0       0       0       0
  4418 ;;      Locals:         6       0       0       0       0       0       0
  4419 ;;      Temps:          3       0       0       0       0       0       0
  4420 ;;      Totals:        17       0       0       0       0       0       0
  4421 ;;Total ram usage:       17 bytes
  4422 ;; Hardware stack levels used:    1
  4423 ;; This function calls:
  4424 ;;		Nothing
  4425 ;; This function is called by:
  4426 ;;		_sprintf
  4427 ;; This function uses a non-reentrant model
  4428 ;;
  4429                           
  4430                           	psect	text10
  4431  006722                     __ptext10:
  4432                           	opt stack 0
  4433  006722                     __tdiv_to_l_:
  4434                           	opt stack 29
  4435                           
  4436                           ;incstack = 0
  4437  006722  C003  F009         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4438  006726  6A0A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4439  006728  6A0B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4440  00672A  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4441  00672C  3609               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4442  00672E  E301               	bnc	u3451
  4443  006730  800A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4444  006732                     u3451:
  4445  006732  5009               	movf	??__tdiv_to_l_,w,c
  4446  006734  6E11               	movwf	__tdiv_to_l_@exp1,c
  4447  006736  5011               	movf	__tdiv_to_l_@exp1,w,c
  4448  006738  E105               	bnz	l3400
  4449  00673A                     l3398:
  4450  00673A  6A01               	clrf	?__tdiv_to_l_,c
  4451  00673C  6A02               	clrf	?__tdiv_to_l_+1,c
  4452  00673E  6A03               	clrf	?__tdiv_to_l_+2,c
  4453  006740  6A04               	clrf	?__tdiv_to_l_+3,c
  4454  006742  0012               	return	
  4455  006744                     l3400:
  4456  006744  C007  F009         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4457  006748  6A0A               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4458  00674A  6A0B               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4459  00674C  3406               	rlcf	__tdiv_to_l_@f2+1,w,c
  4460  00674E  3609               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4461  006750  E301               	bnc	u3471
  4462  006752  800A               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4463  006754                     u3471:
  4464  006754  5009               	movf	??__tdiv_to_l_,w,c
  4465  006756  6E10               	movwf	__tdiv_to_l_@cntr,c
  4466  006758  5010               	movf	__tdiv_to_l_@cntr,w,c
  4467  00675A  E0EF               	bz	l3398
  4468  00675C  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4469  00675E  6A03               	clrf	__tdiv_to_l_@f1+2,c
  4470  006760  8E06               	bsf	__tdiv_to_l_@f2+1,7,c
  4471  006762  6A07               	clrf	__tdiv_to_l_@f2+2,c
  4472  006764  6A0C               	clrf	__tdiv_to_l_@quot,c
  4473  006766  6A0D               	clrf	__tdiv_to_l_@quot+1,c
  4474  006768  6A0E               	clrf	__tdiv_to_l_@quot+2,c
  4475  00676A  6A0F               	clrf	__tdiv_to_l_@quot+3,c
  4476  00676C  0E7F               	movlw	127
  4477  00676E  5E11               	subwf	__tdiv_to_l_@exp1,f,c
  4478  006770  5010               	movf	__tdiv_to_l_@cntr,w,c
  4479  006772  0F98               	addlw	152
  4480  006774  5E11               	subwf	__tdiv_to_l_@exp1,f,c
  4481  006776  0E18               	movlw	24
  4482  006778  6E10               	movwf	__tdiv_to_l_@cntr,c
  4483  00677A                     l3418:
  4484  00677A  D833               	call	PL116	;call to abstracted procedure
  4485  00677C  5005               	movf	__tdiv_to_l_@f2,w,c
  4486  00677E  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4487  006780  5006               	movf	__tdiv_to_l_@f2+1,w,c
  4488  006782  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4489  006784  5007               	movf	__tdiv_to_l_@f2+2,w,c
  4490  006786  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4491  006788  E307               	bnc	l880
  4492  00678A  5005               	movf	__tdiv_to_l_@f2,w,c
  4493  00678C  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4494  00678E  5006               	movf	__tdiv_to_l_@f2+1,w,c
  4495  006790  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4496  006792  5007               	movf	__tdiv_to_l_@f2+2,w,c
  4497  006794  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4498  006796  800C               	bsf	__tdiv_to_l_@quot,0,c
  4499  006798                     l880:
  4500  006798  90D8               	bcf	status,0,c
  4501  00679A  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4502  00679C  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4503  00679E  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4504  0067A0  2E10               	decfsz	__tdiv_to_l_@cntr,f,c
  4505  0067A2  D7EB               	goto	l3418
  4506  0067A4  AE11               	btfss	__tdiv_to_l_@exp1,7,c
  4507  0067A6  D00C               	goto	l3438
  4508  0067A8  5011               	movf	__tdiv_to_l_@exp1,w,c
  4509  0067AA  0A80               	xorlw	128
  4510  0067AC  0F97               	addlw	151
  4511  0067AE  E3C5               	bnc	l3398
  4512  0067B0                     l3434:
  4513  0067B0  90D8               	bcf	status,0,c
  4514  0067B2  320F               	rrcf	__tdiv_to_l_@quot+3,f,c
  4515  0067B4  320E               	rrcf	__tdiv_to_l_@quot+2,f,c
  4516  0067B6  320D               	rrcf	__tdiv_to_l_@quot+1,f,c
  4517  0067B8  320C               	rrcf	__tdiv_to_l_@quot,f,c
  4518  0067BA  3E11               	incfsz	__tdiv_to_l_@exp1,f,c
  4519  0067BC  D7F9               	goto	l3434
  4520  0067BE  D008               	goto	l886
  4521  0067C0                     l3438:
  4522  0067C0  0E17               	movlw	23
  4523  0067C2  6411               	cpfsgt	__tdiv_to_l_@exp1,c
  4524  0067C4  D003               	goto	l3444
  4525  0067C6  D7B9               	goto	l3398
  4526  0067C8                     l3442:
  4527  0067C8  D80C               	call	PL116	;call to abstracted procedure
  4528  0067CA  0611               	decf	__tdiv_to_l_@exp1,f,c
  4529  0067CC                     l3444:
  4530  0067CC  5011               	movf	__tdiv_to_l_@exp1,w,c
  4531  0067CE  E1FC               	bnz	l3442
  4532  0067D0                     l886:
  4533  0067D0  C00C  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4534  0067D4  C00D  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4535  0067D8  C00E  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4536  0067DC  C00F  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4537  0067E0  0012               	return		;funcret
  4538  0067E2                     __end_of__tdiv_to_l_:
  4539                           	opt stack 0
  4540  0067E2                     PL116:
  4541                           	opt stack 29
  4542  0067E2  90D8               	bcf	status,0,c
  4543  0067E4  360C               	rlcf	__tdiv_to_l_@quot,f,c
  4544  0067E6  360D               	rlcf	__tdiv_to_l_@quot+1,f,c
  4545  0067E8  360E               	rlcf	__tdiv_to_l_@quot+2,f,c
  4546  0067EA  360F               	rlcf	__tdiv_to_l_@quot+3,f,c
  4547  0067EC  0012               	return	
  4548  0067EE                     __end_ofPL116:
  4549                           	opt stack 0
  4550                           tblptru	equ	0xFF8
  4551                           tblptrh	equ	0xFF7
  4552                           tblptrl	equ	0xFF6
  4553                           tablat	equ	0xFF5
  4554                           prodh	equ	0xFF4
  4555                           prodl	equ	0xFF3
  4556                           indf0	equ	0xFEF
  4557                           plusw0	equ	0xFEB
  4558                           fsr0h	equ	0xFEA
  4559                           fsr0l	equ	0xFE9
  4560                           wreg	equ	0xFE8
  4561                           indf2	equ	0xFDF
  4562                           postinc2	equ	0xFDE
  4563                           postdec2	equ	0xFDD
  4564                           plusw2	equ	0xFDB
  4565                           fsr2h	equ	0xFDA
  4566                           fsr2l	equ	0xFD9
  4567                           status	equ	0xFD8
  4568                           
  4569 ;; *************** function __div_to_l_ *****************
  4570 ;; Defined at:
  4571 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  4572 ;; Parameters:    Size  Location     Type
  4573 ;;  f1              4    0[COMRAM] unsigned long 
  4574 ;;  f2              4    4[COMRAM] unsigned long 
  4575 ;; Auto vars:     Size  Location     Type
  4576 ;;  quot            4    8[COMRAM] unsigned long 
  4577 ;;  exp1            1   13[COMRAM] unsigned char 
  4578 ;;  cntr            1   12[COMRAM] unsigned char 
  4579 ;; Return value:  Size  Location     Type
  4580 ;;                  4    0[COMRAM] unsigned long 
  4581 ;; Registers used:
  4582 ;;		wreg, status,2, status,0
  4583 ;; Tracked objects:
  4584 ;;		On entry : 0/0
  4585 ;;		On exit  : 0/0
  4586 ;;		Unchanged: 0/0
  4587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4588 ;;      Params:         8       0       0       0       0       0       0
  4589 ;;      Locals:         6       0       0       0       0       0       0
  4590 ;;      Temps:          0       0       0       0       0       0       0
  4591 ;;      Totals:        14       0       0       0       0       0       0
  4592 ;;Total ram usage:       14 bytes
  4593 ;; Hardware stack levels used:    1
  4594 ;; This function calls:
  4595 ;;		Nothing
  4596 ;; This function is called by:
  4597 ;;		_sprintf
  4598 ;; This function uses a non-reentrant model
  4599 ;;
  4600                           
  4601                           	psect	text11
  4602  0065AC                     __ptext11:
  4603                           	opt stack 0
  4604  0065AC                     __div_to_l_:
  4605                           	opt stack 29
  4606                           
  4607                           ;incstack = 0
  4608  0065AC  3403               	rlcf	__div_to_l_@f1+2,w,c
  4609  0065AE  3404               	rlcf	__div_to_l_@f1+3,w,c
  4610  0065B0  6E0E               	movwf	__div_to_l_@exp1,c
  4611  0065B2  500E               	movf	__div_to_l_@exp1,w,c
  4612  0065B4  E105               	bnz	l3450
  4613  0065B6                     l3448:
  4614  0065B6  6A01               	clrf	?__div_to_l_,c
  4615  0065B8  6A02               	clrf	?__div_to_l_+1,c
  4616  0065BA  6A03               	clrf	?__div_to_l_+2,c
  4617  0065BC  6A04               	clrf	?__div_to_l_+3,c
  4618  0065BE  0012               	return	
  4619  0065C0                     l3450:
  4620  0065C0  3407               	rlcf	__div_to_l_@f2+2,w,c
  4621  0065C2  3408               	rlcf	__div_to_l_@f2+3,w,c
  4622  0065C4  6E0D               	movwf	__div_to_l_@cntr,c
  4623  0065C6  500D               	movf	__div_to_l_@cntr,w,c
  4624  0065C8  E0F6               	bz	l3448
  4625  0065CA  8E03               	bsf	__div_to_l_@f1+2,7,c
  4626  0065CC  6A04               	clrf	__div_to_l_@f1+3,c
  4627  0065CE  8E07               	bsf	__div_to_l_@f2+2,7,c
  4628  0065D0  6A08               	clrf	__div_to_l_@f2+3,c
  4629  0065D2  6A09               	clrf	__div_to_l_@quot,c
  4630  0065D4  6A0A               	clrf	__div_to_l_@quot+1,c
  4631  0065D6  6A0B               	clrf	__div_to_l_@quot+2,c
  4632  0065D8  6A0C               	clrf	__div_to_l_@quot+3,c
  4633  0065DA  0E7F               	movlw	127
  4634  0065DC  5E0E               	subwf	__div_to_l_@exp1,f,c
  4635  0065DE  500D               	movf	__div_to_l_@cntr,w,c
  4636  0065E0  0FA0               	addlw	160
  4637  0065E2  5E0E               	subwf	__div_to_l_@exp1,f,c
  4638  0065E4  0E20               	movlw	32
  4639  0065E6  6E0D               	movwf	__div_to_l_@cntr,c
  4640  0065E8                     l3464:
  4641  0065E8  D838               	call	PL124	;call to abstracted procedure
  4642  0065EA  5005               	movf	__div_to_l_@f2,w,c
  4643  0065EC  5C01               	subwf	__div_to_l_@f1,w,c
  4644  0065EE  5006               	movf	__div_to_l_@f2+1,w,c
  4645  0065F0  5802               	subwfb	__div_to_l_@f1+1,w,c
  4646  0065F2  5007               	movf	__div_to_l_@f2+2,w,c
  4647  0065F4  5803               	subwfb	__div_to_l_@f1+2,w,c
  4648  0065F6  5008               	movf	__div_to_l_@f2+3,w,c
  4649  0065F8  5804               	subwfb	__div_to_l_@f1+3,w,c
  4650  0065FA  E309               	bnc	l3472
  4651  0065FC  5005               	movf	__div_to_l_@f2,w,c
  4652  0065FE  5E01               	subwf	__div_to_l_@f1,f,c
  4653  006600  5006               	movf	__div_to_l_@f2+1,w,c
  4654  006602  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4655  006604  5007               	movf	__div_to_l_@f2+2,w,c
  4656  006606  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4657  006608  5008               	movf	__div_to_l_@f2+3,w,c
  4658  00660A  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4659  00660C  8009               	bsf	__div_to_l_@quot,0,c
  4660  00660E                     l3472:
  4661  00660E  90D8               	bcf	status,0,c
  4662  006610  3601               	rlcf	__div_to_l_@f1,f,c
  4663  006612  3602               	rlcf	__div_to_l_@f1+1,f,c
  4664  006614  3603               	rlcf	__div_to_l_@f1+2,f,c
  4665  006616  3604               	rlcf	__div_to_l_@f1+3,f,c
  4666  006618  2E0D               	decfsz	__div_to_l_@cntr,f,c
  4667  00661A  D7E6               	goto	l3464
  4668  00661C  AE0E               	btfss	__div_to_l_@exp1,7,c
  4669  00661E  D00C               	goto	l3486
  4670  006620  500E               	movf	__div_to_l_@exp1,w,c
  4671  006622  0A80               	xorlw	128
  4672  006624  0F9F               	addlw	159
  4673  006626  E3C7               	bnc	l3448
  4674  006628                     l3482:
  4675  006628  90D8               	bcf	status,0,c
  4676  00662A  320C               	rrcf	__div_to_l_@quot+3,f,c
  4677  00662C  320B               	rrcf	__div_to_l_@quot+2,f,c
  4678  00662E  320A               	rrcf	__div_to_l_@quot+1,f,c
  4679  006630  3209               	rrcf	__div_to_l_@quot,f,c
  4680  006632  3E0E               	incfsz	__div_to_l_@exp1,f,c
  4681  006634  D7F9               	goto	l3482
  4682  006636  D008               	goto	l782
  4683  006638                     l3486:
  4684  006638  0E1F               	movlw	31
  4685  00663A  640E               	cpfsgt	__div_to_l_@exp1,c
  4686  00663C  D003               	goto	l3492
  4687  00663E  D7BB               	goto	l3448
  4688  006640                     l3490:
  4689  006640  D80C               	call	PL124	;call to abstracted procedure
  4690  006642  060E               	decf	__div_to_l_@exp1,f,c
  4691  006644                     l3492:
  4692  006644  500E               	movf	__div_to_l_@exp1,w,c
  4693  006646  E1FC               	bnz	l3490
  4694  006648                     l782:
  4695  006648  C009  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4696  00664C  C00A  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4697  006650  C00B  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4698  006654  C00C  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4699  006658  0012               	return		;funcret
  4700  00665A                     __end_of__div_to_l_:
  4701                           	opt stack 0
  4702  00665A                     PL124:
  4703                           	opt stack 29
  4704  00665A  90D8               	bcf	status,0,c
  4705  00665C  3609               	rlcf	__div_to_l_@quot,f,c
  4706  00665E  360A               	rlcf	__div_to_l_@quot+1,f,c
  4707  006660  360B               	rlcf	__div_to_l_@quot+2,f,c
  4708  006662  360C               	rlcf	__div_to_l_@quot+3,f,c
  4709  006664  0012               	return	
  4710  006666                     __end_ofPL124:
  4711                           	opt stack 0
  4712                           tblptru	equ	0xFF8
  4713                           tblptrh	equ	0xFF7
  4714                           tblptrl	equ	0xFF6
  4715                           tablat	equ	0xFF5
  4716                           prodh	equ	0xFF4
  4717                           prodl	equ	0xFF3
  4718                           indf0	equ	0xFEF
  4719                           plusw0	equ	0xFEB
  4720                           fsr0h	equ	0xFEA
  4721                           fsr0l	equ	0xFE9
  4722                           wreg	equ	0xFE8
  4723                           indf2	equ	0xFDF
  4724                           postinc2	equ	0xFDE
  4725                           postdec2	equ	0xFDD
  4726                           plusw2	equ	0xFDB
  4727                           fsr2h	equ	0xFDA
  4728                           fsr2l	equ	0xFD9
  4729                           status	equ	0xFD8
  4730                           
  4731 ;; *************** function ___wmul *****************
  4732 ;; Defined at:
  4733 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;  multiplier      2    0[COMRAM] unsigned int 
  4736 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4737 ;; Auto vars:     Size  Location     Type
  4738 ;;  product         2    4[COMRAM] unsigned int 
  4739 ;; Return value:  Size  Location     Type
  4740 ;;                  2    0[COMRAM] unsigned int 
  4741 ;; Registers used:
  4742 ;;		wreg, status,2, status,0, prodl, prodh
  4743 ;; Tracked objects:
  4744 ;;		On entry : 0/0
  4745 ;;		On exit  : 0/0
  4746 ;;		Unchanged: 0/0
  4747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4748 ;;      Params:         4       0       0       0       0       0       0
  4749 ;;      Locals:         2       0       0       0       0       0       0
  4750 ;;      Temps:          0       0       0       0       0       0       0
  4751 ;;      Totals:         6       0       0       0       0       0       0
  4752 ;;Total ram usage:        6 bytes
  4753 ;; Hardware stack levels used:    1
  4754 ;; This function calls:
  4755 ;;		Nothing
  4756 ;; This function is called by:
  4757 ;;		_sprintf
  4758 ;; This function uses a non-reentrant model
  4759 ;;
  4760                           
  4761                           	psect	text12
  4762  005FF4                     __ptext12:
  4763                           	opt stack 0
  4764  005FF4                     ___wmul:
  4765                           	opt stack 29
  4766                           
  4767                           ;incstack = 0
  4768  005FF4  5001               	movf	___wmul@multiplier,w,c
  4769  005FF6  0203               	mulwf	___wmul@multiplicand,c
  4770  005FF8  CFF3 F005          	movff	prodl,___wmul@product
  4771  005FFC  CFF4 F006          	movff	prodh,___wmul@product+1
  4772  006000  5001               	movf	___wmul@multiplier,w,c
  4773  006002  0204               	mulwf	___wmul@multiplicand+1,c
  4774  006004  50F3               	movf	prodl,w,c
  4775  006006  2606               	addwf	___wmul@product+1,f,c
  4776  006008  5002               	movf	___wmul@multiplier+1,w,c
  4777  00600A  0203               	mulwf	___wmul@multiplicand,c
  4778  00600C  50F3               	movf	prodl,w,c
  4779  00600E  2606               	addwf	___wmul@product+1,f,c
  4780  006010  C005  F001         	movff	___wmul@product,?___wmul
  4781  006014  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4782  006018  0012               	return		;funcret
  4783  00601A                     __end_of___wmul:
  4784                           	opt stack 0
  4785                           tblptru	equ	0xFF8
  4786                           tblptrh	equ	0xFF7
  4787                           tblptrl	equ	0xFF6
  4788                           tablat	equ	0xFF5
  4789                           prodh	equ	0xFF4
  4790                           prodl	equ	0xFF3
  4791                           indf0	equ	0xFEF
  4792                           plusw0	equ	0xFEB
  4793                           fsr0h	equ	0xFEA
  4794                           fsr0l	equ	0xFE9
  4795                           wreg	equ	0xFE8
  4796                           indf2	equ	0xFDF
  4797                           postinc2	equ	0xFDE
  4798                           postdec2	equ	0xFDD
  4799                           plusw2	equ	0xFDB
  4800                           fsr2h	equ	0xFDA
  4801                           fsr2l	equ	0xFD9
  4802                           status	equ	0xFD8
  4803                           
  4804 ;; *************** function ___llmod *****************
  4805 ;; Defined at:
  4806 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;  dividend        4    0[COMRAM] unsigned long 
  4809 ;;  divisor         4    4[COMRAM] unsigned long 
  4810 ;; Auto vars:     Size  Location     Type
  4811 ;;  counter         1    8[COMRAM] unsigned char 
  4812 ;; Return value:  Size  Location     Type
  4813 ;;                  4    0[COMRAM] unsigned long 
  4814 ;; Registers used:
  4815 ;;		wreg, status,2, status,0
  4816 ;; Tracked objects:
  4817 ;;		On entry : 0/0
  4818 ;;		On exit  : 0/0
  4819 ;;		Unchanged: 0/0
  4820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4821 ;;      Params:         8       0       0       0       0       0       0
  4822 ;;      Locals:         1       0       0       0       0       0       0
  4823 ;;      Temps:          0       0       0       0       0       0       0
  4824 ;;      Totals:         9       0       0       0       0       0       0
  4825 ;;Total ram usage:        9 bytes
  4826 ;; Hardware stack levels used:    1
  4827 ;; This function calls:
  4828 ;;		Nothing
  4829 ;; This function is called by:
  4830 ;;		_sprintf
  4831 ;; This function uses a non-reentrant model
  4832 ;;
  4833                           
  4834                           	psect	text13
  4835  006216                     __ptext13:
  4836                           	opt stack 0
  4837  006216                     ___llmod:
  4838                           	opt stack 29
  4839                           
  4840                           ;incstack = 0
  4841  006216  5005               	movf	___llmod@divisor,w,c
  4842  006218  1006               	iorwf	___llmod@divisor+1,w,c
  4843  00621A  1007               	iorwf	___llmod@divisor+2,w,c
  4844  00621C  1008               	iorwf	___llmod@divisor+3,w,c
  4845  00621E  E023               	bz	l971
  4846  006220  0E01               	movlw	1
  4847  006222  6E09               	movwf	___llmod@counter,c
  4848  006224  D006               	goto	l3764
  4849  006226                     l3762:
  4850  006226  90D8               	bcf	status,0,c
  4851  006228  3605               	rlcf	___llmod@divisor,f,c
  4852  00622A  3606               	rlcf	___llmod@divisor+1,f,c
  4853  00622C  3607               	rlcf	___llmod@divisor+2,f,c
  4854  00622E  3608               	rlcf	___llmod@divisor+3,f,c
  4855  006230  2A09               	incf	___llmod@counter,f,c
  4856  006232                     l3764:
  4857  006232  AE08               	btfss	___llmod@divisor+3,7,c
  4858  006234  D7F8               	goto	l3762
  4859  006236                     l3766:
  4860  006236  5005               	movf	___llmod@divisor,w,c
  4861  006238  5C01               	subwf	___llmod@dividend,w,c
  4862  00623A  5006               	movf	___llmod@divisor+1,w,c
  4863  00623C  5802               	subwfb	___llmod@dividend+1,w,c
  4864  00623E  5007               	movf	___llmod@divisor+2,w,c
  4865  006240  5803               	subwfb	___llmod@dividend+2,w,c
  4866  006242  5008               	movf	___llmod@divisor+3,w,c
  4867  006244  5804               	subwfb	___llmod@dividend+3,w,c
  4868  006246  E308               	bnc	l3770
  4869  006248  5005               	movf	___llmod@divisor,w,c
  4870  00624A  5E01               	subwf	___llmod@dividend,f,c
  4871  00624C  5006               	movf	___llmod@divisor+1,w,c
  4872  00624E  5A02               	subwfb	___llmod@dividend+1,f,c
  4873  006250  5007               	movf	___llmod@divisor+2,w,c
  4874  006252  5A03               	subwfb	___llmod@dividend+2,f,c
  4875  006254  5008               	movf	___llmod@divisor+3,w,c
  4876  006256  5A04               	subwfb	___llmod@dividend+3,f,c
  4877  006258                     l3770:
  4878  006258  90D8               	bcf	status,0,c
  4879  00625A  3208               	rrcf	___llmod@divisor+3,f,c
  4880  00625C  3207               	rrcf	___llmod@divisor+2,f,c
  4881  00625E  3206               	rrcf	___llmod@divisor+1,f,c
  4882  006260  3205               	rrcf	___llmod@divisor,f,c
  4883  006262  2E09               	decfsz	___llmod@counter,f,c
  4884  006264  D7E8               	goto	l3766
  4885  006266                     l971:
  4886  006266  C001  F001         	movff	___llmod@dividend,?___llmod
  4887  00626A  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4888  00626E  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4889  006272  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4890  006276  0012               	return		;funcret
  4891  006278                     __end_of___llmod:
  4892                           	opt stack 0
  4893                           tblptru	equ	0xFF8
  4894                           tblptrh	equ	0xFF7
  4895                           tblptrl	equ	0xFF6
  4896                           tablat	equ	0xFF5
  4897                           prodh	equ	0xFF4
  4898                           prodl	equ	0xFF3
  4899                           indf0	equ	0xFEF
  4900                           plusw0	equ	0xFEB
  4901                           fsr0h	equ	0xFEA
  4902                           fsr0l	equ	0xFE9
  4903                           wreg	equ	0xFE8
  4904                           indf2	equ	0xFDF
  4905                           postinc2	equ	0xFDE
  4906                           postdec2	equ	0xFDD
  4907                           plusw2	equ	0xFDB
  4908                           fsr2h	equ	0xFDA
  4909                           fsr2l	equ	0xFD9
  4910                           status	equ	0xFD8
  4911                           
  4912 ;; *************** function ___lldiv *****************
  4913 ;; Defined at:
  4914 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  4915 ;; Parameters:    Size  Location     Type
  4916 ;;  dividend        4    0[COMRAM] unsigned long 
  4917 ;;  divisor         4    4[COMRAM] unsigned long 
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;  quotient        4    8[COMRAM] unsigned long 
  4920 ;;  counter         1   12[COMRAM] unsigned char 
  4921 ;; Return value:  Size  Location     Type
  4922 ;;                  4    0[COMRAM] unsigned long 
  4923 ;; Registers used:
  4924 ;;		wreg, status,2, status,0
  4925 ;; Tracked objects:
  4926 ;;		On entry : 0/0
  4927 ;;		On exit  : 0/0
  4928 ;;		Unchanged: 0/0
  4929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4930 ;;      Params:         8       0       0       0       0       0       0
  4931 ;;      Locals:         5       0       0       0       0       0       0
  4932 ;;      Temps:          0       0       0       0       0       0       0
  4933 ;;      Totals:        13       0       0       0       0       0       0
  4934 ;;Total ram usage:       13 bytes
  4935 ;; Hardware stack levels used:    1
  4936 ;; This function calls:
  4937 ;;		Nothing
  4938 ;; This function is called by:
  4939 ;;		_sprintf
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           	psect	text14
  4944  0062E0                     __ptext14:
  4945                           	opt stack 0
  4946  0062E0                     ___lldiv:
  4947                           	opt stack 29
  4948                           
  4949                           ;incstack = 0
  4950  0062E0  6A09               	clrf	___lldiv@quotient,c
  4951  0062E2  6A0A               	clrf	___lldiv@quotient+1,c
  4952  0062E4  6A0B               	clrf	___lldiv@quotient+2,c
  4953  0062E6  6A0C               	clrf	___lldiv@quotient+3,c
  4954  0062E8  5005               	movf	___lldiv@divisor,w,c
  4955  0062EA  1006               	iorwf	___lldiv@divisor+1,w,c
  4956  0062EC  1007               	iorwf	___lldiv@divisor+2,w,c
  4957  0062EE  1008               	iorwf	___lldiv@divisor+3,w,c
  4958  0062F0  E029               	bz	l961
  4959  0062F2  0E01               	movlw	1
  4960  0062F4  6E0D               	movwf	___lldiv@counter,c
  4961  0062F6  D006               	goto	l3744
  4962  0062F8                     l3742:
  4963  0062F8  90D8               	bcf	status,0,c
  4964  0062FA  3605               	rlcf	___lldiv@divisor,f,c
  4965  0062FC  3606               	rlcf	___lldiv@divisor+1,f,c
  4966  0062FE  3607               	rlcf	___lldiv@divisor+2,f,c
  4967  006300  3608               	rlcf	___lldiv@divisor+3,f,c
  4968  006302  2A0D               	incf	___lldiv@counter,f,c
  4969  006304                     l3744:
  4970  006304  AE08               	btfss	___lldiv@divisor+3,7,c
  4971  006306  D7F8               	goto	l3742
  4972  006308                     l3746:
  4973  006308  90D8               	bcf	status,0,c
  4974  00630A  3609               	rlcf	___lldiv@quotient,f,c
  4975  00630C  360A               	rlcf	___lldiv@quotient+1,f,c
  4976  00630E  360B               	rlcf	___lldiv@quotient+2,f,c
  4977  006310  360C               	rlcf	___lldiv@quotient+3,f,c
  4978  006312  5005               	movf	___lldiv@divisor,w,c
  4979  006314  5C01               	subwf	___lldiv@dividend,w,c
  4980  006316  5006               	movf	___lldiv@divisor+1,w,c
  4981  006318  5802               	subwfb	___lldiv@dividend+1,w,c
  4982  00631A  5007               	movf	___lldiv@divisor+2,w,c
  4983  00631C  5803               	subwfb	___lldiv@dividend+2,w,c
  4984  00631E  5008               	movf	___lldiv@divisor+3,w,c
  4985  006320  5804               	subwfb	___lldiv@dividend+3,w,c
  4986  006322  E309               	bnc	l3754
  4987  006324  5005               	movf	___lldiv@divisor,w,c
  4988  006326  5E01               	subwf	___lldiv@dividend,f,c
  4989  006328  5006               	movf	___lldiv@divisor+1,w,c
  4990  00632A  5A02               	subwfb	___lldiv@dividend+1,f,c
  4991  00632C  5007               	movf	___lldiv@divisor+2,w,c
  4992  00632E  5A03               	subwfb	___lldiv@dividend+2,f,c
  4993  006330  5008               	movf	___lldiv@divisor+3,w,c
  4994  006332  5A04               	subwfb	___lldiv@dividend+3,f,c
  4995  006334  8009               	bsf	___lldiv@quotient,0,c
  4996  006336                     l3754:
  4997  006336  90D8               	bcf	status,0,c
  4998  006338  3208               	rrcf	___lldiv@divisor+3,f,c
  4999  00633A  3207               	rrcf	___lldiv@divisor+2,f,c
  5000  00633C  3206               	rrcf	___lldiv@divisor+1,f,c
  5001  00633E  3205               	rrcf	___lldiv@divisor,f,c
  5002  006340  2E0D               	decfsz	___lldiv@counter,f,c
  5003  006342  D7E2               	goto	l3746
  5004  006344                     l961:
  5005  006344  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5006  006348  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5007  00634C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5008  006350  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5009  006354  0012               	return		;funcret
  5010  006356                     __end_of___lldiv:
  5011                           	opt stack 0
  5012                           tblptru	equ	0xFF8
  5013                           tblptrh	equ	0xFF7
  5014                           tblptrl	equ	0xFF6
  5015                           tablat	equ	0xFF5
  5016                           prodh	equ	0xFF4
  5017                           prodl	equ	0xFF3
  5018                           indf0	equ	0xFEF
  5019                           plusw0	equ	0xFEB
  5020                           fsr0h	equ	0xFEA
  5021                           fsr0l	equ	0xFE9
  5022                           wreg	equ	0xFE8
  5023                           indf2	equ	0xFDF
  5024                           postinc2	equ	0xFDE
  5025                           postdec2	equ	0xFDD
  5026                           plusw2	equ	0xFDB
  5027                           fsr2h	equ	0xFDA
  5028                           fsr2l	equ	0xFD9
  5029                           status	equ	0xFD8
  5030                           
  5031 ;; *************** function ___fltol *****************
  5032 ;; Defined at:
  5033 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fltol.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;  f1              4   48[COMRAM] unsigned long 
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;  exp1            1   57[COMRAM] unsigned char 
  5038 ;;  sign1           1   56[COMRAM] unsigned char 
  5039 ;; Return value:  Size  Location     Type
  5040 ;;                  4   48[COMRAM] long 
  5041 ;; Registers used:
  5042 ;;		wreg, status,2, status,0
  5043 ;; Tracked objects:
  5044 ;;		On entry : 0/0
  5045 ;;		On exit  : 0/0
  5046 ;;		Unchanged: 0/0
  5047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5048 ;;      Params:         4       0       0       0       0       0       0
  5049 ;;      Locals:         2       0       0       0       0       0       0
  5050 ;;      Temps:          4       0       0       0       0       0       0
  5051 ;;      Totals:        10       0       0       0       0       0       0
  5052 ;;Total ram usage:       10 bytes
  5053 ;; Hardware stack levels used:    1
  5054 ;; This function calls:
  5055 ;;		Nothing
  5056 ;; This function is called by:
  5057 ;;		_sprintf
  5058 ;; This function uses a non-reentrant model
  5059 ;;
  5060                           
  5061                           	psect	text15
  5062  00645A                     __ptext15:
  5063                           	opt stack 0
  5064  00645A                     ___fltol:
  5065                           	opt stack 29
  5066                           
  5067                           ;incstack = 0
  5068  00645A  3433               	rlcf	___fltol@f1+2,w,c
  5069  00645C  3434               	rlcf	___fltol@f1+3,w,c
  5070  00645E  6E3A               	movwf	___fltol@exp1,c
  5071  006460  503A               	movf	___fltol@exp1,w,c
  5072  006462  E105               	bnz	l3702
  5073  006464                     l3700:
  5074  006464  6A31               	clrf	?___fltol,c
  5075  006466  6A32               	clrf	?___fltol+1,c
  5076  006468  6A33               	clrf	?___fltol+2,c
  5077  00646A  6A34               	clrf	?___fltol+3,c
  5078  00646C  0012               	return	
  5079  00646E                     l3702:
  5080  00646E  C031  F035         	movff	___fltol@f1,??___fltol
  5081  006472  C032  F036         	movff	___fltol@f1+1,??___fltol+1
  5082  006476  C033  F037         	movff	___fltol@f1+2,??___fltol+2
  5083  00647A  C034  F038         	movff	___fltol@f1+3,??___fltol+3
  5084  00647E  0E20               	movlw	32
  5085  006480  D005               	goto	u3970
  5086  006482                     u3975:
  5087  006482  90D8               	bcf	status,0,c
  5088  006484  3238               	rrcf	??___fltol+3,f,c
  5089  006486  3237               	rrcf	??___fltol+2,f,c
  5090  006488  3236               	rrcf	??___fltol+1,f,c
  5091  00648A  3235               	rrcf	??___fltol,f,c
  5092  00648C                     u3970:
  5093  00648C  2EE8               	decfsz	wreg,f,c
  5094  00648E  D7F9               	goto	u3975
  5095  006490  5035               	movf	??___fltol,w,c
  5096  006492  6E39               	movwf	___fltol@sign1,c
  5097  006494  8E33               	bsf	___fltol@f1+2,7,c
  5098  006496  6A34               	clrf	___fltol@f1+3,c
  5099  006498  0E96               	movlw	150
  5100  00649A  5E3A               	subwf	___fltol@exp1,f,c
  5101  00649C  AE3A               	btfss	___fltol@exp1,7,c
  5102  00649E  D00C               	goto	l3720
  5103  0064A0  503A               	movf	___fltol@exp1,w,c
  5104  0064A2  0A80               	xorlw	128
  5105  0064A4  0F97               	addlw	151
  5106  0064A6  E3DE               	bnc	l3700
  5107  0064A8                     l3716:
  5108  0064A8  90D8               	bcf	status,0,c
  5109  0064AA  3234               	rrcf	___fltol@f1+3,f,c
  5110  0064AC  3233               	rrcf	___fltol@f1+2,f,c
  5111  0064AE  3232               	rrcf	___fltol@f1+1,f,c
  5112  0064B0  3231               	rrcf	___fltol@f1,f,c
  5113  0064B2  3E3A               	incfsz	___fltol@exp1,f,c
  5114  0064B4  D7F9               	goto	l3716
  5115  0064B6  D00C               	goto	l3728
  5116  0064B8                     l3720:
  5117  0064B8  0E1F               	movlw	31
  5118  0064BA  643A               	cpfsgt	___fltol@exp1,c
  5119  0064BC  D007               	goto	l3726
  5120  0064BE  D7D2               	goto	l3700
  5121  0064C0                     l3724:
  5122  0064C0  90D8               	bcf	status,0,c
  5123  0064C2  3631               	rlcf	___fltol@f1,f,c
  5124  0064C4  3632               	rlcf	___fltol@f1+1,f,c
  5125  0064C6  3633               	rlcf	___fltol@f1+2,f,c
  5126  0064C8  3634               	rlcf	___fltol@f1+3,f,c
  5127  0064CA  063A               	decf	___fltol@exp1,f,c
  5128  0064CC                     l3726:
  5129  0064CC  503A               	movf	___fltol@exp1,w,c
  5130  0064CE  E1F8               	bnz	l3724
  5131  0064D0                     l3728:
  5132  0064D0  5039               	movf	___fltol@sign1,w,c
  5133  0064D2  E008               	bz	l3732
  5134  0064D4  1E34               	comf	___fltol@f1+3,f,c
  5135  0064D6  1E33               	comf	___fltol@f1+2,f,c
  5136  0064D8  1E32               	comf	___fltol@f1+1,f,c
  5137  0064DA  6C31               	negf	___fltol@f1,c
  5138  0064DC  0E00               	movlw	0
  5139  0064DE  2232               	addwfc	___fltol@f1+1,f,c
  5140  0064E0  2233               	addwfc	___fltol@f1+2,f,c
  5141  0064E2  2234               	addwfc	___fltol@f1+3,f,c
  5142  0064E4                     l3732:
  5143  0064E4  C031  F031         	movff	___fltol@f1,?___fltol
  5144  0064E8  C032  F032         	movff	___fltol@f1+1,?___fltol+1
  5145  0064EC  C033  F033         	movff	___fltol@f1+2,?___fltol+2
  5146  0064F0  C034  F034         	movff	___fltol@f1+3,?___fltol+3
  5147  0064F4  0012               	return		;funcret
  5148  0064F6                     __end_of___fltol:
  5149                           	opt stack 0
  5150                           tblptru	equ	0xFF8
  5151                           tblptrh	equ	0xFF7
  5152                           tblptrl	equ	0xFF6
  5153                           tablat	equ	0xFF5
  5154                           prodh	equ	0xFF4
  5155                           prodl	equ	0xFF3
  5156                           indf0	equ	0xFEF
  5157                           plusw0	equ	0xFEB
  5158                           fsr0h	equ	0xFEA
  5159                           fsr0l	equ	0xFE9
  5160                           wreg	equ	0xFE8
  5161                           indf2	equ	0xFDF
  5162                           postinc2	equ	0xFDE
  5163                           postdec2	equ	0xFDD
  5164                           plusw2	equ	0xFDB
  5165                           fsr2h	equ	0xFDA
  5166                           fsr2l	equ	0xFD9
  5167                           status	equ	0xFD8
  5168                           
  5169 ;; *************** function ___flsub *****************
  5170 ;; Defined at:
  5171 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprcadd.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;  b               4   72[COMRAM] long 
  5174 ;;  a               4   76[COMRAM] long 
  5175 ;; Auto vars:     Size  Location     Type
  5176 ;;		None
  5177 ;; Return value:  Size  Location     Type
  5178 ;;                  4   72[COMRAM] long 
  5179 ;; Registers used:
  5180 ;;		wreg, status,2, status,0, cstack
  5181 ;; Tracked objects:
  5182 ;;		On entry : 0/0
  5183 ;;		On exit  : 0/0
  5184 ;;		Unchanged: 0/0
  5185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5186 ;;      Params:         8       0       0       0       0       0       0
  5187 ;;      Locals:         0       0       0       0       0       0       0
  5188 ;;      Temps:          0       0       0       0       0       0       0
  5189 ;;      Totals:         8       0       0       0       0       0       0
  5190 ;;Total ram usage:        8 bytes
  5191 ;; Hardware stack levels used:    1
  5192 ;; Hardware stack levels required when called:    1
  5193 ;; This function calls:
  5194 ;;		___fladd
  5195 ;; This function is called by:
  5196 ;;		_sprintf
  5197 ;; This function uses a non-reentrant model
  5198 ;;
  5199                           
  5200                           	psect	text16
  5201  006100                     __ptext16:
  5202                           	opt stack 0
  5203  006100                     ___flsub:
  5204                           	opt stack 28
  5205                           
  5206                           ;incstack = 0
  5207  006100  0E80               	movlw	128
  5208  006102  1A50               	xorwf	___flsub@a+3,f,c
  5209  006104  C049  F039         	movff	___flsub@b,___fladd@b
  5210  006108  C04A  F03A         	movff	___flsub@b+1,___fladd@b+1
  5211  00610C  C04B  F03B         	movff	___flsub@b+2,___fladd@b+2
  5212  006110  C04C  F03C         	movff	___flsub@b+3,___fladd@b+3
  5213  006114  C04D  F03D         	movff	___flsub@a,___fladd@a
  5214  006118  C04E  F03E         	movff	___flsub@a+1,___fladd@a+1
  5215  00611C  C04F  F03F         	movff	___flsub@a+2,___fladd@a+2
  5216  006120  C050  F040         	movff	___flsub@a+3,___fladd@a+3
  5217  006124  EC58  F03A         	call	___fladd	;wreg free
  5218  006128  C039  F049         	movff	?___fladd,?___flsub
  5219  00612C  C03A  F04A         	movff	?___fladd+1,?___flsub+1
  5220  006130  C03B  F04B         	movff	?___fladd+2,?___flsub+2
  5221  006134  C03C  F04C         	movff	?___fladd+3,?___flsub+3
  5222  006138  0012               	return		;funcret
  5223  00613A                     __end_of___flsub:
  5224                           	opt stack 0
  5225                           tblptru	equ	0xFF8
  5226                           tblptrh	equ	0xFF7
  5227                           tblptrl	equ	0xFF6
  5228                           tablat	equ	0xFF5
  5229                           prodh	equ	0xFF4
  5230                           prodl	equ	0xFF3
  5231                           indf0	equ	0xFEF
  5232                           plusw0	equ	0xFEB
  5233                           fsr0h	equ	0xFEA
  5234                           fsr0l	equ	0xFE9
  5235                           wreg	equ	0xFE8
  5236                           indf2	equ	0xFDF
  5237                           postinc2	equ	0xFDE
  5238                           postdec2	equ	0xFDD
  5239                           plusw2	equ	0xFDB
  5240                           fsr2h	equ	0xFDA
  5241                           fsr2l	equ	0xFD9
  5242                           status	equ	0xFD8
  5243                           
  5244 ;; *************** function ___flneg *****************
  5245 ;; Defined at:
  5246 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\flneg.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;  f1              4    0[COMRAM] long 
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;		None
  5251 ;; Return value:  Size  Location     Type
  5252 ;;                  4    0[COMRAM] long 
  5253 ;; Registers used:
  5254 ;;		wreg, status,2, status,0
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5260 ;;      Params:         4       0       0       0       0       0       0
  5261 ;;      Locals:         0       0       0       0       0       0       0
  5262 ;;      Temps:          0       0       0       0       0       0       0
  5263 ;;      Totals:         4       0       0       0       0       0       0
  5264 ;;Total ram usage:        4 bytes
  5265 ;; Hardware stack levels used:    1
  5266 ;; This function calls:
  5267 ;;		Nothing
  5268 ;; This function is called by:
  5269 ;;		_sprintf
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           	psect	text17
  5274  005FB0                     __ptext17:
  5275                           	opt stack 0
  5276  005FB0                     ___flneg:
  5277                           	opt stack 29
  5278                           
  5279                           ;incstack = 0
  5280  005FB0  5001               	movf	___flneg@f1,w,c
  5281  005FB2  1002               	iorwf	___flneg@f1+1,w,c
  5282  005FB4  1003               	iorwf	___flneg@f1+2,w,c
  5283  005FB6  1004               	iorwf	___flneg@f1+3,w,c
  5284  005FB8  E002               	bz	l3694
  5285  005FBA  0E80               	movlw	128
  5286  005FBC  1A04               	xorwf	___flneg@f1+3,f,c
  5287  005FBE                     l3694:
  5288  005FBE  C001  F001         	movff	___flneg@f1,?___flneg
  5289  005FC2  C002  F002         	movff	___flneg@f1+1,?___flneg+1
  5290  005FC6  C003  F003         	movff	___flneg@f1+2,?___flneg+2
  5291  005FCA  C004  F004         	movff	___flneg@f1+3,?___flneg+3
  5292  005FCE  0012               	return		;funcret
  5293  005FD0                     __end_of___flneg:
  5294                           	opt stack 0
  5295                           tblptru	equ	0xFF8
  5296                           tblptrh	equ	0xFF7
  5297                           tblptrl	equ	0xFF6
  5298                           tablat	equ	0xFF5
  5299                           prodh	equ	0xFF4
  5300                           prodl	equ	0xFF3
  5301                           indf0	equ	0xFEF
  5302                           plusw0	equ	0xFEB
  5303                           fsr0h	equ	0xFEA
  5304                           fsr0l	equ	0xFE9
  5305                           wreg	equ	0xFE8
  5306                           indf2	equ	0xFDF
  5307                           postinc2	equ	0xFDE
  5308                           postdec2	equ	0xFDD
  5309                           plusw2	equ	0xFDB
  5310                           fsr2h	equ	0xFDA
  5311                           fsr2l	equ	0xFD9
  5312                           status	equ	0xFD8
  5313                           
  5314 ;; *************** function ___flge *****************
  5315 ;; Defined at:
  5316 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\flge.c"
  5317 ;; Parameters:    Size  Location     Type
  5318 ;;  ff1             4    0[COMRAM] long 
  5319 ;;  ff2             4    4[COMRAM] long 
  5320 ;; Auto vars:     Size  Location     Type
  5321 ;;		None
  5322 ;; Return value:  Size  Location     Type
  5323 ;;		None               void
  5324 ;; Registers used:
  5325 ;;		wreg, status,2, status,0
  5326 ;; Tracked objects:
  5327 ;;		On entry : 0/0
  5328 ;;		On exit  : 0/0
  5329 ;;		Unchanged: 0/0
  5330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5331 ;;      Params:         8       0       0       0       0       0       0
  5332 ;;      Locals:         0       0       0       0       0       0       0
  5333 ;;      Temps:          4       0       0       0       0       0       0
  5334 ;;      Totals:        12       0       0       0       0       0       0
  5335 ;;Total ram usage:       12 bytes
  5336 ;; Hardware stack levels used:    1
  5337 ;; This function calls:
  5338 ;;		Nothing
  5339 ;; This function is called by:
  5340 ;;		_sprintf
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           	psect	text18
  5345  0063CE                     __ptext18:
  5346                           	opt stack 0
  5347  0063CE                     ___flge:
  5348                           	opt stack 29
  5349                           
  5350                           ;incstack = 0
  5351  0063CE  6A09               	clrf	??___flge& (0+255),c
  5352  0063D0  6A0A               	clrf	(??___flge+1)& (0+255),c
  5353  0063D2  0E80               	movlw	128
  5354  0063D4  1403               	andwf	___flge@ff1+2,w,c
  5355  0063D6  6E0B               	movwf	(??___flge+2)& (0+255),c
  5356  0063D8  0E7F               	movlw	127
  5357  0063DA  1404               	andwf	___flge@ff1+3,w,c
  5358  0063DC  D838               	call	PL118	;call to abstracted procedure
  5359  0063DE  E104               	bnz	l3674
  5360  0063E0  6A01               	clrf	___flge@ff1,c
  5361  0063E2  6A02               	clrf	___flge@ff1+1,c
  5362  0063E4  6A03               	clrf	___flge@ff1+2,c
  5363  0063E6  6A04               	clrf	___flge@ff1+3,c
  5364  0063E8                     l3674:
  5365  0063E8  6A09               	clrf	??___flge& (0+255),c
  5366  0063EA  6A0A               	clrf	(??___flge+1)& (0+255),c
  5367  0063EC  0E80               	movlw	128
  5368  0063EE  1407               	andwf	___flge@ff2+2,w,c
  5369  0063F0  6E0B               	movwf	(??___flge+2)& (0+255),c
  5370  0063F2  0E7F               	movlw	127
  5371  0063F4  1408               	andwf	___flge@ff2+3,w,c
  5372  0063F6  D82B               	call	PL118	;call to abstracted procedure
  5373  0063F8  E104               	bnz	l790
  5374  0063FA  6A05               	clrf	___flge@ff2,c
  5375  0063FC  6A06               	clrf	___flge@ff2+1,c
  5376  0063FE  6A07               	clrf	___flge@ff2+2,c
  5377  006400  6A08               	clrf	___flge@ff2+3,c
  5378  006402                     l790:
  5379  006402  AE04               	btfss	___flge@ff1+3,7,c
  5380  006404  D009               	goto	l3680
  5381  006406  6C01               	negf	___flge@ff1,c
  5382  006408  1E02               	comf	___flge@ff1+1,f,c
  5383  00640A  B0D8               	btfsc	status,0,c
  5384  00640C  2A02               	incf	___flge@ff1+1,f,c
  5385  00640E  1E03               	comf	___flge@ff1+2,f,c
  5386  006410  B0D8               	btfsc	status,0,c
  5387  006412  2A03               	incf	___flge@ff1+2,f,c
  5388  006414  0E80               	movlw	128
  5389  006416  5604               	subfwb	___flge@ff1+3,f,c
  5390  006418                     l3680:
  5391  006418  AE08               	btfss	___flge@ff2+3,7,c
  5392  00641A  D009               	goto	l792
  5393  00641C  6C05               	negf	___flge@ff2,c
  5394  00641E  1E06               	comf	___flge@ff2+1,f,c
  5395  006420  B0D8               	btfsc	status,0,c
  5396  006422  2A06               	incf	___flge@ff2+1,f,c
  5397  006424  1E07               	comf	___flge@ff2+2,f,c
  5398  006426  B0D8               	btfsc	status,0,c
  5399  006428  2A07               	incf	___flge@ff2+2,f,c
  5400  00642A  0E80               	movlw	128
  5401  00642C  5608               	subfwb	___flge@ff2+3,f,c
  5402  00642E                     l792:
  5403  00642E  0E80               	movlw	128
  5404  006430  1A04               	xorwf	___flge@ff1+3,f,c
  5405  006432  1A08               	xorwf	___flge@ff2+3,f,c
  5406  006434  5005               	movf	___flge@ff2,w,c
  5407  006436  5C01               	subwf	___flge@ff1,w,c
  5408  006438  5006               	movf	___flge@ff2+1,w,c
  5409  00643A  5802               	subwfb	___flge@ff1+1,w,c
  5410  00643C  5007               	movf	___flge@ff2+2,w,c
  5411  00643E  5803               	subwfb	___flge@ff1+2,w,c
  5412  006440  5008               	movf	___flge@ff2+3,w,c
  5413  006442  5804               	subwfb	___flge@ff1+3,w,c
  5414  006444  E202               	bc	l3686
  5415  006446  90D8               	bcf	status,0,c
  5416  006448  0012               	return	
  5417  00644A                     l3686:
  5418  00644A  80D8               	bsf	status,0,c
  5419  00644C  0012               	return		;funcret
  5420  00644E                     __end_of___flge:
  5421                           	opt stack 0
  5422  00644E                     PL118:
  5423                           	opt stack 29
  5424  00644E  6E0C               	movwf	(??___flge+3)& (0+255),c
  5425  006450  5009               	movf	??___flge,w,c
  5426  006452  100A               	iorwf	??___flge+1,w,c
  5427  006454  100B               	iorwf	??___flge+2,w,c
  5428  006456  100C               	iorwf	??___flge+3,w,c
  5429  006458  0012               	return	
  5430  00645A                     __end_ofPL118:
  5431                           	opt stack 0
  5432                           tblptru	equ	0xFF8
  5433                           tblptrh	equ	0xFF7
  5434                           tblptrl	equ	0xFF6
  5435                           tablat	equ	0xFF5
  5436                           prodh	equ	0xFF4
  5437                           prodl	equ	0xFF3
  5438                           indf0	equ	0xFEF
  5439                           plusw0	equ	0xFEB
  5440                           fsr0h	equ	0xFEA
  5441                           fsr0l	equ	0xFE9
  5442                           wreg	equ	0xFE8
  5443                           indf2	equ	0xFDF
  5444                           postinc2	equ	0xFDE
  5445                           postdec2	equ	0xFDD
  5446                           plusw2	equ	0xFDB
  5447                           fsr2h	equ	0xFDA
  5448                           fsr2l	equ	0xFD9
  5449                           status	equ	0xFD8
  5450                           
  5451 ;; *************** function _putrsserial *****************
  5452 ;; Defined at:
  5453 ;;		line 11 in file "serial.c"
  5454 ;; Parameters:    Size  Location     Type
  5455 ;;  data            2    1[COMRAM] PTR const unsigned char 
  5456 ;;		 -> main@aux(20), STR_2(24), STR_1(24), 
  5457 ;; Auto vars:     Size  Location     Type
  5458 ;;		None
  5459 ;; Return value:  Size  Location     Type
  5460 ;;                  1    wreg      void 
  5461 ;; Registers used:
  5462 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5463 ;; Tracked objects:
  5464 ;;		On entry : 0/0
  5465 ;;		On exit  : 0/0
  5466 ;;		Unchanged: 0/0
  5467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5468 ;;      Params:         2       0       0       0       0       0       0
  5469 ;;      Locals:         0       0       0       0       0       0       0
  5470 ;;      Temps:          2       0       0       0       0       0       0
  5471 ;;      Totals:         4       0       0       0       0       0       0
  5472 ;;Total ram usage:        4 bytes
  5473 ;; Hardware stack levels used:    1
  5474 ;; Hardware stack levels required when called:    1
  5475 ;; This function calls:
  5476 ;;		_writeserial
  5477 ;; This function is called by:
  5478 ;;		_main
  5479 ;; This function uses a non-reentrant model
  5480 ;;
  5481                           
  5482                           	psect	text19
  5483  0061C0                     __ptext19:
  5484                           	opt stack 0
  5485  0061C0                     _putrsserial:
  5486                           	opt stack 29
  5487  0061C0                     l192:
  5488  0061C0  A2AC               	btfss	4012,1,c	;volatile
  5489  0061C2  D7FE               	goto	l192
  5490                           
  5491                           ;serial.c: 16: writeserial(*data);
  5492  0061C4  C002  FFF6         	movff	putrsserial@data,tblptrl
  5493  0061C8  C003  FFF7         	movff	putrsserial@data+1,tblptrh
  5494  0061CC  6AF8               	clrf	tblptru,c
  5495  0061CE  0E05               	movlw	(high __ramtop+-1)
  5496  0061D0  64F7               	cpfsgt	tblptrh,c
  5497  0061D2  D003               	bra	u4217
  5498  0061D4  0008               	tblrd		*
  5499  0061D6  50F5               	movf	tablat,w,c
  5500  0061D8  D001               	bra	u4210
  5501  0061DA                     u4217:
  5502  0061DA  D817               	call	PL128	;call to abstracted procedure
  5503  0061DC                     u4210:
  5504  0061DC  EC33  F02F         	call	_writeserial
  5505                           
  5506                           ;serial.c: 17: } while( *data++ );
  5507  0061E0  5002               	movf	putrsserial@data,w,c
  5508  0061E2  6E04               	movwf	??_putrsserial& (0+255),c
  5509  0061E4  5003               	movf	putrsserial@data+1,w,c
  5510  0061E6  6E05               	movwf	(??_putrsserial+1)& (0+255),c
  5511  0061E8  4A02               	infsnz	putrsserial@data,f,c
  5512  0061EA  2A03               	incf	putrsserial@data+1,f,c
  5513  0061EC  C004  FFF6         	movff	??_putrsserial,tblptrl
  5514  0061F0  C005  FFF7         	movff	??_putrsserial+1,tblptrh
  5515  0061F4  6AF8               	clrf	tblptru,c
  5516  0061F6  0E05               	movlw	(high __ramtop+-1)
  5517  0061F8  64F7               	cpfsgt	tblptrh,c
  5518  0061FA  D003               	bra	u4227
  5519  0061FC  0008               	tblrd		*
  5520  0061FE  50F5               	movf	tablat,w,c
  5521  006200  D001               	bra	u4220
  5522  006202                     u4227:
  5523  006202  D803               	call	PL128	;call to abstracted procedure
  5524  006204                     u4220:
  5525  006204  0900               	iorlw	0
  5526  006206  E1DC               	bnz	l192
  5527  006208  0012               	return		;funcret
  5528  00620A                     __end_of_putrsserial:
  5529                           	opt stack 0
  5530  00620A                     PL128:
  5531                           	opt stack 29
  5532  00620A  CFF6 FFE9          	movff	tblptrl,fsr0l
  5533  00620E  CFF7 FFEA          	movff	tblptrh,fsr0h
  5534  006212  50EF               	movf	indf0,w,c
  5535  006214  0012               	return	
  5536  006216                     __end_ofPL128:
  5537                           	opt stack 0
  5538                           tblptru	equ	0xFF8
  5539                           tblptrh	equ	0xFF7
  5540                           tblptrl	equ	0xFF6
  5541                           tablat	equ	0xFF5
  5542                           prodh	equ	0xFF4
  5543                           prodl	equ	0xFF3
  5544                           indf0	equ	0xFEF
  5545                           plusw0	equ	0xFEB
  5546                           fsr0h	equ	0xFEA
  5547                           fsr0l	equ	0xFE9
  5548                           wreg	equ	0xFE8
  5549                           indf2	equ	0xFDF
  5550                           postinc2	equ	0xFDE
  5551                           postdec2	equ	0xFDD
  5552                           plusw2	equ	0xFDB
  5553                           fsr2h	equ	0xFDA
  5554                           fsr2l	equ	0xFD9
  5555                           status	equ	0xFD8
  5556                           
  5557 ;; *************** function _writeserial *****************
  5558 ;; Defined at:
  5559 ;;		line 29 in file "serial.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;  data            1    wreg     unsigned char 
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;  data            1    0[COMRAM] unsigned char 
  5564 ;; Return value:  Size  Location     Type
  5565 ;;                  1    wreg      void 
  5566 ;; Registers used:
  5567 ;;		wreg
  5568 ;; Tracked objects:
  5569 ;;		On entry : 0/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5573 ;;      Params:         0       0       0       0       0       0       0
  5574 ;;      Locals:         1       0       0       0       0       0       0
  5575 ;;      Temps:          0       0       0       0       0       0       0
  5576 ;;      Totals:         1       0       0       0       0       0       0
  5577 ;;Total ram usage:        1 bytes
  5578 ;; Hardware stack levels used:    1
  5579 ;; This function calls:
  5580 ;;		Nothing
  5581 ;; This function is called by:
  5582 ;;		_putrsserial
  5583 ;; This function uses a non-reentrant model
  5584 ;;
  5585                           
  5586                           	psect	text20
  5587  005E66                     __ptext20:
  5588                           	opt stack 0
  5589  005E66                     _writeserial:
  5590                           	opt stack 29
  5591                           
  5592                           ;incstack = 0
  5593                           ;writeserial@data stored from wreg
  5594  005E66  6E01               	movwf	writeserial@data,c
  5595                           
  5596                           ;serial.c: 31: TXREG = data;
  5597  005E68  C001  FFAD         	movff	writeserial@data,4013	;volatile
  5598  005E6C  0012               	return		;funcret
  5599  005E6E                     __end_of_writeserial:
  5600                           	opt stack 0
  5601                           tblptru	equ	0xFF8
  5602                           tblptrh	equ	0xFF7
  5603                           tblptrl	equ	0xFF6
  5604                           tablat	equ	0xFF5
  5605                           prodh	equ	0xFF4
  5606                           prodl	equ	0xFF3
  5607                           indf0	equ	0xFEF
  5608                           plusw0	equ	0xFEB
  5609                           fsr0h	equ	0xFEA
  5610                           fsr0l	equ	0xFE9
  5611                           wreg	equ	0xFE8
  5612                           indf2	equ	0xFDF
  5613                           postinc2	equ	0xFDE
  5614                           postdec2	equ	0xFDD
  5615                           plusw2	equ	0xFDB
  5616                           fsr2h	equ	0xFDA
  5617                           fsr2l	equ	0xFD9
  5618                           status	equ	0xFD8
  5619                           
  5620 ;; *************** function _initDispl *****************
  5621 ;; Defined at:
  5622 ;;		line 34 in file "dog104.c"
  5623 ;; Parameters:    Size  Location     Type
  5624 ;;		None
  5625 ;; Auto vars:     Size  Location     Type
  5626 ;;  i               1    0        unsigned char 
  5627 ;; Return value:  Size  Location     Type
  5628 ;;                  1    wreg      void 
  5629 ;; Registers used:
  5630 ;;		wreg, status,2, status,0, cstack
  5631 ;; Tracked objects:
  5632 ;;		On entry : 0/0
  5633 ;;		On exit  : 0/0
  5634 ;;		Unchanged: 0/0
  5635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5636 ;;      Params:         0       0       0       0       0       0       0
  5637 ;;      Locals:         0       0       0       0       0       0       0
  5638 ;;      Temps:          0       0       0       0       0       0       0
  5639 ;;      Totals:         0       0       0       0       0       0       0
  5640 ;;Total ram usage:        0 bytes
  5641 ;; Hardware stack levels used:    1
  5642 ;; Hardware stack levels required when called:    7
  5643 ;; This function calls:
  5644 ;;		_ClrDisplay
  5645 ;;		_DisplayOnOff
  5646 ;;		_WriteIns
  5647 ;; This function is called by:
  5648 ;;		_main
  5649 ;; This function uses a non-reentrant model
  5650 ;;
  5651                           
  5652                           	psect	text21
  5653  006178                     __ptext21:
  5654                           	opt stack 0
  5655  006178                     _initDispl:
  5656                           	opt stack 23
  5657                           
  5658                           ;dog104.c: 36: uint8_t i;
  5659                           ;dog104.c: 45: WriteIns(0x3A);
  5660                           
  5661                           ;incstack = 0
  5662  006178  0E3A               	movlw	58
  5663  00617A  EC59  F02F         	call	_WriteIns
  5664                           
  5665                           ;dog104.c: 46: WriteIns(0x09);
  5666  00617E  0E09               	movlw	9
  5667  006180  EC59  F02F         	call	_WriteIns
  5668                           
  5669                           ;dog104.c: 48: WriteIns(0x06);
  5670  006184  0E06               	movlw	6
  5671  006186  EC59  F02F         	call	_WriteIns
  5672                           
  5673                           ;dog104.c: 53: WriteIns(0x1E);
  5674  00618A  0E1E               	movlw	30
  5675  00618C  EC59  F02F         	call	_WriteIns
  5676                           
  5677                           ;dog104.c: 54: WriteIns(0x39);
  5678  006190  0E39               	movlw	57
  5679  006192  EC59  F02F         	call	_WriteIns
  5680                           
  5681                           ;dog104.c: 55: WriteIns(0x1B);
  5682  006196  0E1B               	movlw	27
  5683  006198  EC59  F02F         	call	_WriteIns
  5684                           
  5685                           ;dog104.c: 56: WriteIns(0x6E);
  5686  00619C  0E6E               	movlw	110
  5687  00619E  EC59  F02F         	call	_WriteIns
  5688                           
  5689                           ;dog104.c: 57: WriteIns(0x56);
  5690  0061A2  0E56               	movlw	86
  5691  0061A4  EC59  F02F         	call	_WriteIns
  5692                           
  5693                           ;dog104.c: 58: WriteIns(0x7A);
  5694  0061A8  0E7A               	movlw	122
  5695  0061AA  EC59  F02F         	call	_WriteIns
  5696                           
  5697                           ;dog104.c: 59: WriteIns(dh_function_set);
  5698  0061AE  0100               	movlb	0	; () banked
  5699  0061B0  51DA               	movf	_dh_function_set& (0+255),w,b
  5700  0061B2  EC59  F02F         	call	_WriteIns
  5701                           
  5702                           ;dog104.c: 61: ClrDisplay();
  5703  0061B6  EC53  F02F         	call	_ClrDisplay	;wreg free
  5704                           
  5705                           ;dog104.c: 62: DisplayOnOff(0x04 | 0x02 | 0x01);
  5706  0061BA  0E07               	movlw	7
  5707  0061BC  EF3C  F02F         	goto	_DisplayOnOff
  5708  0061C0                     __end_of_initDispl:
  5709                           	opt stack 0
  5710                           tblptru	equ	0xFF8
  5711                           tblptrh	equ	0xFF7
  5712                           tblptrl	equ	0xFF6
  5713                           tablat	equ	0xFF5
  5714                           prodh	equ	0xFF4
  5715                           prodl	equ	0xFF3
  5716                           indf0	equ	0xFEF
  5717                           plusw0	equ	0xFEB
  5718                           fsr0h	equ	0xFEA
  5719                           fsr0l	equ	0xFE9
  5720                           wreg	equ	0xFE8
  5721                           indf2	equ	0xFDF
  5722                           postinc2	equ	0xFDE
  5723                           postdec2	equ	0xFDD
  5724                           plusw2	equ	0xFDB
  5725                           fsr2h	equ	0xFDA
  5726                           fsr2l	equ	0xFD9
  5727                           status	equ	0xFD8
  5728                           
  5729 ;; *************** function _DisplayOnOff *****************
  5730 ;; Defined at:
  5731 ;;		line 121 in file "dog104.c"
  5732 ;; Parameters:    Size  Location     Type
  5733 ;;  data            1    wreg     char 
  5734 ;; Auto vars:     Size  Location     Type
  5735 ;;  data            1    5[COMRAM] char 
  5736 ;; Return value:  Size  Location     Type
  5737 ;;                  1    wreg      void 
  5738 ;; Registers used:
  5739 ;;		wreg, status,2, status,0, cstack
  5740 ;; Tracked objects:
  5741 ;;		On entry : 0/0
  5742 ;;		On exit  : 0/0
  5743 ;;		Unchanged: 0/0
  5744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5745 ;;      Params:         0       0       0       0       0       0       0
  5746 ;;      Locals:         1       0       0       0       0       0       0
  5747 ;;      Temps:          0       0       0       0       0       0       0
  5748 ;;      Totals:         1       0       0       0       0       0       0
  5749 ;;Total ram usage:        1 bytes
  5750 ;; Hardware stack levels used:    1
  5751 ;; Hardware stack levels required when called:    5
  5752 ;; This function calls:
  5753 ;;		_WriteIns
  5754 ;; This function is called by:
  5755 ;;		_main
  5756 ;;		_initDispl
  5757 ;; This function uses a non-reentrant model
  5758 ;;
  5759                           
  5760                           	psect	text22
  5761  005E78                     __ptext22:
  5762                           	opt stack 0
  5763  005E78                     _DisplayOnOff:
  5764                           	opt stack 24
  5765                           
  5766                           ;incstack = 0
  5767                           ;DisplayOnOff@data stored from wreg
  5768  005E78  6E06               	movwf	DisplayOnOff@data,c
  5769                           
  5770                           ;dog104.c: 123: WriteIns(0x08 + data);
  5771  005E7A  5006               	movf	DisplayOnOff@data,w,c
  5772  005E7C  0F08               	addlw	8
  5773  005E7E  EF59  F02F         	goto	_WriteIns
  5774  005E82                     __end_of_DisplayOnOff:
  5775                           	opt stack 0
  5776                           tblptru	equ	0xFF8
  5777                           tblptrh	equ	0xFF7
  5778                           tblptrl	equ	0xFF6
  5779                           tablat	equ	0xFF5
  5780                           prodh	equ	0xFF4
  5781                           prodl	equ	0xFF3
  5782                           indf0	equ	0xFEF
  5783                           plusw0	equ	0xFEB
  5784                           fsr0h	equ	0xFEA
  5785                           fsr0l	equ	0xFE9
  5786                           wreg	equ	0xFE8
  5787                           indf2	equ	0xFDF
  5788                           postinc2	equ	0xFDE
  5789                           postdec2	equ	0xFDD
  5790                           plusw2	equ	0xFDB
  5791                           fsr2h	equ	0xFDA
  5792                           fsr2l	equ	0xFD9
  5793                           status	equ	0xFD8
  5794                           
  5795 ;; *************** function _ClrDisplay *****************
  5796 ;; Defined at:
  5797 ;;		line 146 in file "dog104.c"
  5798 ;; Parameters:    Size  Location     Type
  5799 ;;		None
  5800 ;; Auto vars:     Size  Location     Type
  5801 ;;		None
  5802 ;; Return value:  Size  Location     Type
  5803 ;;                  1    wreg      void 
  5804 ;; Registers used:
  5805 ;;		wreg, status,2, status,0, cstack
  5806 ;; Tracked objects:
  5807 ;;		On entry : 0/0
  5808 ;;		On exit  : 0/0
  5809 ;;		Unchanged: 0/0
  5810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5811 ;;      Params:         0       0       0       0       0       0       0
  5812 ;;      Locals:         0       0       0       0       0       0       0
  5813 ;;      Temps:          0       0       0       0       0       0       0
  5814 ;;      Totals:         0       0       0       0       0       0       0
  5815 ;;Total ram usage:        0 bytes
  5816 ;; Hardware stack levels used:    1
  5817 ;; Hardware stack levels required when called:    6
  5818 ;; This function calls:
  5819 ;;		_SetPostion
  5820 ;;		_WriteIns
  5821 ;; This function is called by:
  5822 ;;		_initDispl
  5823 ;; This function uses a non-reentrant model
  5824 ;;
  5825                           
  5826                           	psect	text23
  5827  005EA6                     __ptext23:
  5828                           	opt stack 0
  5829  005EA6                     _ClrDisplay:
  5830                           	opt stack 23
  5831                           
  5832                           ;dog104.c: 148: WriteIns(0x01);
  5833                           
  5834                           ;incstack = 0
  5835  005EA6  0E01               	movlw	1
  5836  005EA8  EC59  F02F         	call	_WriteIns
  5837                           
  5838                           ;dog104.c: 149: SetPostion(0);
  5839  005EAC  0E00               	movlw	0
  5840  005EAE  EF37  F02F         	goto	_SetPostion
  5841  005EB2                     __end_of_ClrDisplay:
  5842                           	opt stack 0
  5843                           tblptru	equ	0xFF8
  5844                           tblptrh	equ	0xFF7
  5845                           tblptrl	equ	0xFF6
  5846                           tablat	equ	0xFF5
  5847                           prodh	equ	0xFF4
  5848                           prodl	equ	0xFF3
  5849                           indf0	equ	0xFEF
  5850                           plusw0	equ	0xFEB
  5851                           fsr0h	equ	0xFEA
  5852                           fsr0l	equ	0xFE9
  5853                           wreg	equ	0xFE8
  5854                           indf2	equ	0xFDF
  5855                           postinc2	equ	0xFDE
  5856                           postdec2	equ	0xFDD
  5857                           plusw2	equ	0xFDB
  5858                           fsr2h	equ	0xFDA
  5859                           fsr2l	equ	0xFD9
  5860                           status	equ	0xFD8
  5861                           
  5862 ;; *************** function _SetPostion *****************
  5863 ;; Defined at:
  5864 ;;		line 112 in file "dog104.c"
  5865 ;; Parameters:    Size  Location     Type
  5866 ;;  pos             1    wreg     char 
  5867 ;; Auto vars:     Size  Location     Type
  5868 ;;  pos             1    5[COMRAM] char 
  5869 ;; Return value:  Size  Location     Type
  5870 ;;                  1    wreg      void 
  5871 ;; Registers used:
  5872 ;;		wreg, status,2, status,0, cstack
  5873 ;; Tracked objects:
  5874 ;;		On entry : 0/0
  5875 ;;		On exit  : 0/0
  5876 ;;		Unchanged: 0/0
  5877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5878 ;;      Params:         0       0       0       0       0       0       0
  5879 ;;      Locals:         1       0       0       0       0       0       0
  5880 ;;      Temps:          0       0       0       0       0       0       0
  5881 ;;      Totals:         1       0       0       0       0       0       0
  5882 ;;Total ram usage:        1 bytes
  5883 ;; Hardware stack levels used:    1
  5884 ;; Hardware stack levels required when called:    5
  5885 ;; This function calls:
  5886 ;;		_WriteIns
  5887 ;; This function is called by:
  5888 ;;		_main
  5889 ;;		_ClrDisplay
  5890 ;; This function uses a non-reentrant model
  5891 ;;
  5892                           
  5893                           	psect	text24
  5894  005E6E                     __ptext24:
  5895                           	opt stack 0
  5896  005E6E                     _SetPostion:
  5897                           	opt stack 23
  5898                           
  5899                           ;incstack = 0
  5900                           ;SetPostion@pos stored from wreg
  5901  005E6E  6E06               	movwf	SetPostion@pos,c
  5902                           
  5903                           ;dog104.c: 114: WriteIns(0x80 + pos);
  5904  005E70  5006               	movf	SetPostion@pos,w,c
  5905  005E72  0F80               	addlw	128
  5906  005E74  EF59  F02F         	goto	_WriteIns
  5907  005E78                     __end_of_SetPostion:
  5908                           	opt stack 0
  5909                           tblptru	equ	0xFF8
  5910                           tblptrh	equ	0xFF7
  5911                           tblptrl	equ	0xFF6
  5912                           tablat	equ	0xFF5
  5913                           prodh	equ	0xFF4
  5914                           prodl	equ	0xFF3
  5915                           indf0	equ	0xFEF
  5916                           plusw0	equ	0xFEB
  5917                           fsr0h	equ	0xFEA
  5918                           fsr0l	equ	0xFE9
  5919                           wreg	equ	0xFE8
  5920                           indf2	equ	0xFDF
  5921                           postinc2	equ	0xFDE
  5922                           postdec2	equ	0xFDD
  5923                           plusw2	equ	0xFDB
  5924                           fsr2h	equ	0xFDA
  5925                           fsr2l	equ	0xFD9
  5926                           status	equ	0xFD8
  5927                           
  5928 ;; *************** function _WriteString *****************
  5929 ;; Defined at:
  5930 ;;		line 78 in file "dog104.c"
  5931 ;; Parameters:    Size  Location     Type
  5932 ;;  stringi         1    5[COMRAM] PTR char 
  5933 ;;		 -> main@aux(20), 
  5934 ;; Auto vars:     Size  Location     Type
  5935 ;;		None
  5936 ;; Return value:  Size  Location     Type
  5937 ;;                  1    wreg      void 
  5938 ;; Registers used:
  5939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5940 ;; Tracked objects:
  5941 ;;		On entry : 0/0
  5942 ;;		On exit  : 0/0
  5943 ;;		Unchanged: 0/0
  5944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5945 ;;      Params:         1       0       0       0       0       0       0
  5946 ;;      Locals:         0       0       0       0       0       0       0
  5947 ;;      Temps:          0       0       0       0       0       0       0
  5948 ;;      Totals:         1       0       0       0       0       0       0
  5949 ;;Total ram usage:        1 bytes
  5950 ;; Hardware stack levels used:    1
  5951 ;; Hardware stack levels required when called:    5
  5952 ;; This function calls:
  5953 ;;		_WriteData
  5954 ;; This function is called by:
  5955 ;;		_main
  5956 ;; This function uses a non-reentrant model
  5957 ;;
  5958                           
  5959                           	psect	text25
  5960  005EF0                     __ptext25:
  5961                           	opt stack 0
  5962  005EF0                     _WriteString:
  5963                           	opt stack 25
  5964  005EF0                     
  5965                           ;dog104.c: 81: {
  5966                           ;dog104.c: 82: WriteData(*stringi++);
  5967  005EF0  D806               	call	PL142	;call to abstracted procedure
  5968  005EF2  EC63  F02F         	call	_WriteData
  5969  005EF6  2A06               	incf	WriteString@stringi,f,c
  5970                           
  5971                           ;dog104.c: 83: }
  5972                           ;dog104.c: 84: while(*stringi);
  5973  005EF8  D802               	call	PL142	;call to abstracted procedure
  5974  005EFA  E1FA               	bnz	l4232
  5975  005EFC  0012               	return		;funcret
  5976  005EFE                     __end_of_WriteString:
  5977                           	opt stack 0
  5978  005EFE                     PL142:
  5979                           	opt stack 25
  5980  005EFE  5006               	movf	WriteString@stringi,w,c
  5981  005F00  6ED9               	movwf	fsr2l,c
  5982  005F02  6ADA               	clrf	fsr2h,c
  5983  005F04  50DF               	movf	indf2,w,c
  5984  005F06  0012               	return	
  5985  005F08                     __end_ofPL142:
  5986                           	opt stack 0
  5987                           tblptru	equ	0xFF8
  5988                           tblptrh	equ	0xFF7
  5989                           tblptrl	equ	0xFF6
  5990                           tablat	equ	0xFF5
  5991                           prodh	equ	0xFF4
  5992                           prodl	equ	0xFF3
  5993                           indf0	equ	0xFEF
  5994                           plusw0	equ	0xFEB
  5995                           fsr0h	equ	0xFEA
  5996                           fsr0l	equ	0xFE9
  5997                           wreg	equ	0xFE8
  5998                           indf2	equ	0xFDF
  5999                           postinc2	equ	0xFDE
  6000                           postdec2	equ	0xFDD
  6001                           plusw2	equ	0xFDB
  6002                           fsr2h	equ	0xFDA
  6003                           fsr2l	equ	0xFD9
  6004                           status	equ	0xFD8
  6005                           
  6006 ;; *************** function _WriteData *****************
  6007 ;; Defined at:
  6008 ;;		line 201 in file "dog104.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;  data            1    wreg     char 
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;  data            1    4[COMRAM] char 
  6013 ;; Return value:  Size  Location     Type
  6014 ;;                  1    wreg      void 
  6015 ;; Registers used:
  6016 ;;		wreg, status,2, status,0, cstack
  6017 ;; Tracked objects:
  6018 ;;		On entry : 0/0
  6019 ;;		On exit  : 0/0
  6020 ;;		Unchanged: 0/0
  6021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6022 ;;      Params:         0       0       0       0       0       0       0
  6023 ;;      Locals:         1       0       0       0       0       0       0
  6024 ;;      Temps:          0       0       0       0       0       0       0
  6025 ;;      Totals:         1       0       0       0       0       0       0
  6026 ;;Total ram usage:        1 bytes
  6027 ;; Hardware stack levels used:    1
  6028 ;; Hardware stack levels required when called:    4
  6029 ;; This function calls:
  6030 ;;		_CheckBusy
  6031 ;;		_IIC_put
  6032 ;; This function is called by:
  6033 ;;		_WriteString
  6034 ;; This function uses a non-reentrant model
  6035 ;;
  6036                           
  6037                           	psect	text26
  6038  005EC6                     __ptext26:
  6039                           	opt stack 0
  6040  005EC6                     _WriteData:
  6041                           	opt stack 25
  6042                           
  6043                           ;incstack = 0
  6044                           ;WriteData@data stored from wreg
  6045  005EC6  6E05               	movwf	WriteData@data,c
  6046  005EC8                     l3320:
  6047  005EC8  EC2F  F02F         	call	_CheckBusy	;wreg free
  6048  005ECC  06E8               	decf	wreg,f,c
  6049  005ECE  E0FC               	bz	l3320
  6050                           
  6051                           ;dog104.c: 204: IIC_put(0x40, data);
  6052  005ED0  C005  F003         	movff	WriteData@data,IIC_put@db
  6053  005ED4  0E40               	movlw	64
  6054  005ED6  EF9F  F02F         	goto	_IIC_put
  6055  005EDA                     __end_of_WriteData:
  6056                           	opt stack 0
  6057                           tblptru	equ	0xFF8
  6058                           tblptrh	equ	0xFF7
  6059                           tblptrl	equ	0xFF6
  6060                           tablat	equ	0xFF5
  6061                           prodh	equ	0xFF4
  6062                           prodl	equ	0xFF3
  6063                           indf0	equ	0xFEF
  6064                           plusw0	equ	0xFEB
  6065                           fsr0h	equ	0xFEA
  6066                           fsr0l	equ	0xFE9
  6067                           wreg	equ	0xFE8
  6068                           indf2	equ	0xFDF
  6069                           postinc2	equ	0xFDE
  6070                           postdec2	equ	0xFDD
  6071                           plusw2	equ	0xFDB
  6072                           fsr2h	equ	0xFDA
  6073                           fsr2l	equ	0xFD9
  6074                           status	equ	0xFD8
  6075                           
  6076 ;; *************** function _I2C_Init *****************
  6077 ;; Defined at:
  6078 ;;		line 11 in file "my_i2c.c"
  6079 ;; Parameters:    Size  Location     Type
  6080 ;;  clock_output    1    wreg     unsigned char 
  6081 ;; Auto vars:     Size  Location     Type
  6082 ;;  clock_output    1    0[COMRAM] unsigned char 
  6083 ;; Return value:  Size  Location     Type
  6084 ;;                  1    wreg      void 
  6085 ;; Registers used:
  6086 ;;		wreg, status,2, status,0
  6087 ;; Tracked objects:
  6088 ;;		On entry : 0/0
  6089 ;;		On exit  : 0/0
  6090 ;;		Unchanged: 0/0
  6091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6092 ;;      Params:         0       0       0       0       0       0       0
  6093 ;;      Locals:         1       0       0       0       0       0       0
  6094 ;;      Temps:          0       0       0       0       0       0       0
  6095 ;;      Totals:         1       0       0       0       0       0       0
  6096 ;;Total ram usage:        1 bytes
  6097 ;; Hardware stack levels used:    1
  6098 ;; This function calls:
  6099 ;;		Nothing
  6100 ;; This function is called by:
  6101 ;;		_main
  6102 ;; This function uses a non-reentrant model
  6103 ;;
  6104                           
  6105                           	psect	text27
  6106  005F08                     __ptext27:
  6107                           	opt stack 0
  6108  005F08                     _I2C_Init:
  6109                           	opt stack 30
  6110                           
  6111                           ;incstack = 0
  6112                           ;I2C_Init@clock_output stored from wreg
  6113  005F08  6E01               	movwf	I2C_Init@clock_output,c
  6114                           
  6115                           ;my_i2c.c: 13: SSPSTAT &= 0x3F;
  6116  005F0A  0E3F               	movlw	63
  6117  005F0C  16C7               	andwf	4039,f,c	;volatile
  6118                           
  6119                           ;my_i2c.c: 14: SSPCON1 = 0x00;
  6120  005F0E  6AC6               	clrf	4038,c	;volatile
  6121                           
  6122                           ;my_i2c.c: 15: SSPCON2 = 0x00;
  6123  005F10  6AC5               	clrf	4037,c	;volatile
  6124                           
  6125                           ;my_i2c.c: 16: SSPCON1 |= 0b00001000;
  6126  005F12  86C6               	bsf	4038,3,c	;volatile
  6127                           
  6128                           ;my_i2c.c: 17: SSPSTAT |= 0b10000000;
  6129  005F14  8EC7               	bsf	4039,7,c	;volatile
  6130                           
  6131                           ;my_i2c.c: 19: TRISCbits.TRISC3 = 1;
  6132  005F16  8694               	bsf	3988,3,c	;volatile
  6133                           
  6134                           ;my_i2c.c: 20: TRISCbits.TRISC4 = 1;
  6135  005F18  8894               	bsf	3988,4,c	;volatile
  6136                           
  6137                           ;my_i2c.c: 22: SSPCON1 |= 0b00100000;
  6138  005F1A  8AC6               	bsf	4038,5,c	;volatile
  6139                           
  6140                           ;my_i2c.c: 24: SSPADD = clock_output;
  6141  005F1C  C001  FFC8         	movff	I2C_Init@clock_output,4040	;volatile
  6142  005F20  0012               	return		;funcret
  6143  005F22                     __end_of_I2C_Init:
  6144                           	opt stack 0
  6145                           tblptru	equ	0xFF8
  6146                           tblptrh	equ	0xFF7
  6147                           tblptrl	equ	0xFF6
  6148                           tablat	equ	0xFF5
  6149                           prodh	equ	0xFF4
  6150                           prodl	equ	0xFF3
  6151                           indf0	equ	0xFEF
  6152                           plusw0	equ	0xFEB
  6153                           fsr0h	equ	0xFEA
  6154                           fsr0l	equ	0xFE9
  6155                           wreg	equ	0xFE8
  6156                           indf2	equ	0xFDF
  6157                           postinc2	equ	0xFDE
  6158                           postdec2	equ	0xFDD
  6159                           plusw2	equ	0xFDB
  6160                           fsr2h	equ	0xFDA
  6161                           fsr2l	equ	0xFD9
  6162                           status	equ	0xFD8
  6163                           
  6164 ;; *************** function _I2C_Close *****************
  6165 ;; Defined at:
  6166 ;;		line 58 in file "my_i2c.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;		None
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;		None
  6171 ;; Return value:  Size  Location     Type
  6172 ;;                  1    wreg      void 
  6173 ;; Registers used:
  6174 ;;		status,2, status,0
  6175 ;; Tracked objects:
  6176 ;;		On entry : 0/0
  6177 ;;		On exit  : 0/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6180 ;;      Params:         0       0       0       0       0       0       0
  6181 ;;      Locals:         0       0       0       0       0       0       0
  6182 ;;      Temps:          0       0       0       0       0       0       0
  6183 ;;      Totals:         0       0       0       0       0       0       0
  6184 ;;Total ram usage:        0 bytes
  6185 ;; Hardware stack levels used:    1
  6186 ;; This function calls:
  6187 ;;		Nothing
  6188 ;; This function is called by:
  6189 ;;		_main
  6190 ;; This function uses a non-reentrant model
  6191 ;;
  6192                           
  6193                           	psect	text28
  6194  005E5A                     __ptext28:
  6195                           	opt stack 0
  6196  005E5A                     _I2C_Close:
  6197                           	opt stack 30
  6198                           
  6199                           ;my_i2c.c: 60: SSPCON1 &= 0xDF;
  6200                           
  6201                           ;incstack = 0
  6202  005E5A  9AC6               	bcf	4038,5,c	;volatile
  6203  005E5C  0012               	return		;funcret
  6204  005E5E                     __end_of_I2C_Close:
  6205                           	opt stack 0
  6206                           tblptru	equ	0xFF8
  6207                           tblptrh	equ	0xFF7
  6208                           tblptrl	equ	0xFF6
  6209                           tablat	equ	0xFF5
  6210                           prodh	equ	0xFF4
  6211                           prodl	equ	0xFF3
  6212                           indf0	equ	0xFEF
  6213                           plusw0	equ	0xFEB
  6214                           fsr0h	equ	0xFEA
  6215                           fsr0l	equ	0xFE9
  6216                           wreg	equ	0xFE8
  6217                           indf2	equ	0xFDF
  6218                           postinc2	equ	0xFDE
  6219                           postdec2	equ	0xFDD
  6220                           plusw2	equ	0xFDB
  6221                           fsr2h	equ	0xFDA
  6222                           fsr2l	equ	0xFD9
  6223                           status	equ	0xFD8
  6224                           
  6225 ;; *************** function _ES15007_Init_Norm *****************
  6226 ;; Defined at:
  6227 ;;		line 170 in file "ES15007.c"
  6228 ;; Parameters:    Size  Location     Type
  6229 ;;		None
  6230 ;; Auto vars:     Size  Location     Type
  6231 ;;		None
  6232 ;; Return value:  Size  Location     Type
  6233 ;;                  1    wreg      void 
  6234 ;; Registers used:
  6235 ;;		None
  6236 ;; Tracked objects:
  6237 ;;		On entry : 3F/0
  6238 ;;		On exit  : 3F/0
  6239 ;;		Unchanged: 3F/0
  6240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6241 ;;      Params:         0       0       0       0       0       0       0
  6242 ;;      Locals:         0       0       0       0       0       0       0
  6243 ;;      Temps:          0       0       0       0       0       0       0
  6244 ;;      Totals:         0       0       0       0       0       0       0
  6245 ;;Total ram usage:        0 bytes
  6246 ;; Hardware stack levels used:    1
  6247 ;; This function calls:
  6248 ;;		Nothing
  6249 ;; This function is called by:
  6250 ;;		_main
  6251 ;; This function uses a non-reentrant model
  6252 ;;
  6253                           
  6254                           	psect	text29
  6255  005E58                     __ptext29:
  6256                           	opt stack 0
  6257  005E58                     _ES15007_Init_Norm:
  6258                           	opt stack 30
  6259                           
  6260                           ; BSR set to: 0
  6261                           
  6262                           ;incstack = 0
  6263  005E58  0012               	return		;funcret
  6264  005E5A                     __end_of_ES15007_Init_Norm:
  6265                           	opt stack 0
  6266                           tblptru	equ	0xFF8
  6267                           tblptrh	equ	0xFF7
  6268                           tblptrl	equ	0xFF6
  6269                           tablat	equ	0xFF5
  6270                           prodh	equ	0xFF4
  6271                           prodl	equ	0xFF3
  6272                           indf0	equ	0xFEF
  6273                           plusw0	equ	0xFEB
  6274                           fsr0h	equ	0xFEA
  6275                           fsr0l	equ	0xFE9
  6276                           wreg	equ	0xFE8
  6277                           indf2	equ	0xFDF
  6278                           postinc2	equ	0xFDE
  6279                           postdec2	equ	0xFDD
  6280                           plusw2	equ	0xFDB
  6281                           fsr2h	equ	0xFDA
  6282                           fsr2l	equ	0xFD9
  6283                           status	equ	0xFD8
  6284                           
  6285 ;; *************** function _DisplLines *****************
  6286 ;; Defined at:
  6287 ;;		line 91 in file "dog104.c"
  6288 ;; Parameters:    Size  Location     Type
  6289 ;;  lines           1    wreg     unsigned char 
  6290 ;; Auto vars:     Size  Location     Type
  6291 ;;  lines           1    5[COMRAM] unsigned char 
  6292 ;; Return value:  Size  Location     Type
  6293 ;;                  1    wreg      void 
  6294 ;; Registers used:
  6295 ;;		wreg, status,2, status,0, cstack
  6296 ;; Tracked objects:
  6297 ;;		On entry : 0/0
  6298 ;;		On exit  : 3F/0
  6299 ;;		Unchanged: 0/0
  6300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6301 ;;      Params:         0       0       0       0       0       0       0
  6302 ;;      Locals:         1       0       0       0       0       0       0
  6303 ;;      Temps:          0       0       0       0       0       0       0
  6304 ;;      Totals:         1       0       0       0       0       0       0
  6305 ;;Total ram usage:        1 bytes
  6306 ;; Hardware stack levels used:    1
  6307 ;; Hardware stack levels required when called:    5
  6308 ;; This function calls:
  6309 ;;		_WriteIns
  6310 ;; This function is called by:
  6311 ;;		_main
  6312 ;; This function uses a non-reentrant model
  6313 ;;
  6314                           
  6315                           	psect	text30
  6316  0060CA                     __ptext30:
  6317                           	opt stack 0
  6318  0060CA                     _DisplLines:
  6319                           	opt stack 25
  6320                           
  6321                           ; BSR set to: 0
  6322                           ;incstack = 0
  6323                           ;DisplLines@lines stored from wreg
  6324  0060CA  6E06               	movwf	DisplLines@lines,c
  6325                           
  6326                           ;dog104.c: 93: if(lines == 0x38)
  6327  0060CC  0E38               	movlw	56
  6328  0060CE  1806               	xorwf	DisplLines@lines,w,c
  6329  0060D0  E107               	bnz	l3844
  6330                           
  6331                           ;dog104.c: 94: {
  6332                           ;dog104.c: 95: WriteIns(lines);
  6333  0060D2  5006               	movf	DisplLines@lines,w,c
  6334  0060D4  EC59  F02F         	call	_WriteIns
  6335                           
  6336                           ;dog104.c: 96: dh_function_set = 0x38;
  6337  0060D8  0E38               	movlw	56
  6338  0060DA  0100               	movlb	0	; () banked
  6339  0060DC  6FDA               	movwf	_dh_function_set& (0+255),b
  6340                           
  6341                           ;dog104.c: 97: }
  6342  0060DE  0C38               	retlw	56
  6343  0060E0                     l3844:
  6344                           
  6345                           ;dog104.c: 98: else
  6346                           ;dog104.c: 99: {
  6347                           ;dog104.c: 100: WriteIns(0x3C);
  6348  0060E0  0E3C               	movlw	60
  6349  0060E2  EC59  F02F         	call	_WriteIns
  6350                           
  6351                           ;dog104.c: 101: WriteIns(0x3A);
  6352  0060E6  0E3A               	movlw	58
  6353  0060E8  EC59  F02F         	call	_WriteIns
  6354                           
  6355                           ;dog104.c: 102: WriteIns(lines);
  6356  0060EC  5006               	movf	DisplLines@lines,w,c
  6357  0060EE  EC59  F02F         	call	_WriteIns
  6358                           
  6359                           ;dog104.c: 103: WriteIns(0x3C);
  6360  0060F2  0E3C               	movlw	60
  6361  0060F4  EC59  F02F         	call	_WriteIns
  6362                           
  6363                           ;dog104.c: 104: dh_function_set = 0x3C;
  6364  0060F8  0E3C               	movlw	60
  6365  0060FA  0100               	movlb	0	; () banked
  6366  0060FC  6FDA               	movwf	_dh_function_set& (0+255),b
  6367                           
  6368                           ; BSR set to: 0
  6369  0060FE  0C3C               	retlw	60	;funcret
  6370  006100                     __end_of_DisplLines:
  6371                           	opt stack 0
  6372                           tblptru	equ	0xFF8
  6373                           tblptrh	equ	0xFF7
  6374                           tblptrl	equ	0xFF6
  6375                           tablat	equ	0xFF5
  6376                           prodh	equ	0xFF4
  6377                           prodl	equ	0xFF3
  6378                           indf0	equ	0xFEF
  6379                           plusw0	equ	0xFEB
  6380                           fsr0h	equ	0xFEA
  6381                           fsr0l	equ	0xFE9
  6382                           wreg	equ	0xFE8
  6383                           indf2	equ	0xFDF
  6384                           postinc2	equ	0xFDE
  6385                           postdec2	equ	0xFDD
  6386                           plusw2	equ	0xFDB
  6387                           fsr2h	equ	0xFDA
  6388                           fsr2l	equ	0xFD9
  6389                           status	equ	0xFD8
  6390                           
  6391 ;; *************** function _WriteIns *****************
  6392 ;; Defined at:
  6393 ;;		line 191 in file "dog104.c"
  6394 ;; Parameters:    Size  Location     Type
  6395 ;;  ins             1    wreg     char 
  6396 ;; Auto vars:     Size  Location     Type
  6397 ;;  ins             1    4[COMRAM] char 
  6398 ;; Return value:  Size  Location     Type
  6399 ;;                  1    wreg      void 
  6400 ;; Registers used:
  6401 ;;		wreg, status,2, status,0, cstack
  6402 ;; Tracked objects:
  6403 ;;		On entry : 0/0
  6404 ;;		On exit  : 0/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6407 ;;      Params:         0       0       0       0       0       0       0
  6408 ;;      Locals:         1       0       0       0       0       0       0
  6409 ;;      Temps:          0       0       0       0       0       0       0
  6410 ;;      Totals:         1       0       0       0       0       0       0
  6411 ;;Total ram usage:        1 bytes
  6412 ;; Hardware stack levels used:    1
  6413 ;; Hardware stack levels required when called:    4
  6414 ;; This function calls:
  6415 ;;		_CheckBusy
  6416 ;;		_IIC_put
  6417 ;; This function is called by:
  6418 ;;		_initDispl
  6419 ;;		_DisplLines
  6420 ;;		_SetPostion
  6421 ;;		_DisplayOnOff
  6422 ;;		_ClrDisplay
  6423 ;; This function uses a non-reentrant model
  6424 ;;
  6425                           
  6426                           	psect	text31
  6427  005EB2                     __ptext31:
  6428                           	opt stack 0
  6429  005EB2                     _WriteIns:
  6430                           	opt stack 25
  6431                           
  6432                           ; BSR set to: 0
  6433                           ;incstack = 0
  6434                           ;WriteIns@ins stored from wreg
  6435  005EB2  6E05               	movwf	WriteIns@ins,c
  6436  005EB4                     l2878:
  6437  005EB4  EC2F  F02F         	call	_CheckBusy	;wreg free
  6438  005EB8  06E8               	decf	wreg,f,c
  6439  005EBA  E0FC               	bz	l2878
  6440                           
  6441                           ;dog104.c: 194: IIC_put(0x80, ins);
  6442  005EBC  C005  F003         	movff	WriteIns@ins,IIC_put@db
  6443  005EC0  0E80               	movlw	128
  6444  005EC2  EF9F  F02F         	goto	_IIC_put
  6445  005EC6                     __end_of_WriteIns:
  6446                           	opt stack 0
  6447                           tblptru	equ	0xFF8
  6448                           tblptrh	equ	0xFF7
  6449                           tblptrl	equ	0xFF6
  6450                           tablat	equ	0xFF5
  6451                           prodh	equ	0xFF4
  6452                           prodl	equ	0xFF3
  6453                           indf0	equ	0xFEF
  6454                           plusw0	equ	0xFEB
  6455                           fsr0h	equ	0xFEA
  6456                           fsr0l	equ	0xFE9
  6457                           wreg	equ	0xFE8
  6458                           indf2	equ	0xFDF
  6459                           postinc2	equ	0xFDE
  6460                           postdec2	equ	0xFDD
  6461                           plusw2	equ	0xFDB
  6462                           fsr2h	equ	0xFDA
  6463                           fsr2l	equ	0xFD9
  6464                           status	equ	0xFD8
  6465                           
  6466 ;; *************** function _IIC_put *****************
  6467 ;; Defined at:
  6468 ;;		line 221 in file "dog104.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;  cb              1    wreg     unsigned char 
  6471 ;;  db              1    2[COMRAM] unsigned char 
  6472 ;; Auto vars:     Size  Location     Type
  6473 ;;  cb              1    3[COMRAM] unsigned char 
  6474 ;; Return value:  Size  Location     Type
  6475 ;;                  1    wreg      void 
  6476 ;; Registers used:
  6477 ;;		wreg, status,2, status,0, cstack
  6478 ;; Tracked objects:
  6479 ;;		On entry : 0/0
  6480 ;;		On exit  : 0/0
  6481 ;;		Unchanged: 0/0
  6482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6483 ;;      Params:         1       0       0       0       0       0       0
  6484 ;;      Locals:         1       0       0       0       0       0       0
  6485 ;;      Temps:          0       0       0       0       0       0       0
  6486 ;;      Totals:         2       0       0       0       0       0       0
  6487 ;;Total ram usage:        2 bytes
  6488 ;; Hardware stack levels used:    1
  6489 ;; Hardware stack levels required when called:    2
  6490 ;; This function calls:
  6491 ;;		_I2C_Start
  6492 ;;		_I2C_Stop
  6493 ;;		_I2C_WriteByte
  6494 ;; This function is called by:
  6495 ;;		_WriteIns
  6496 ;;		_WriteData
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           	psect	text32
  6501  005F3E                     __ptext32:
  6502                           	opt stack 0
  6503  005F3E                     _IIC_put:
  6504                           	opt stack 26
  6505                           
  6506                           ;incstack = 0
  6507                           ;IIC_put@cb stored from wreg
  6508  005F3E  6E04               	movwf	IIC_put@cb,c
  6509                           
  6510                           ;dog104.c: 223: I2C_Start();
  6511  005F40  EC41  F02F         	call	_I2C_Start	;wreg free
  6512                           
  6513                           ;dog104.c: 224: I2C_WriteByte(0x78);
  6514  005F44  0E78               	movlw	120
  6515  005F46  EC35  F030         	call	_I2C_WriteByte
  6516                           
  6517                           ;dog104.c: 225: I2C_WriteByte(cb);
  6518  005F4A  5004               	movf	IIC_put@cb,w,c
  6519  005F4C  EC35  F030         	call	_I2C_WriteByte
  6520                           
  6521                           ;dog104.c: 226: I2C_WriteByte(db);
  6522  005F50  5003               	movf	IIC_put@db,w,c
  6523  005F52  EC35  F030         	call	_I2C_WriteByte
  6524                           
  6525                           ;dog104.c: 227: I2C_Stop();
  6526  005F56  EF47  F02F         	goto	_I2C_Stop	;wreg free
  6527  005F5A                     __end_of_IIC_put:
  6528                           	opt stack 0
  6529                           tblptru	equ	0xFF8
  6530                           tblptrh	equ	0xFF7
  6531                           tblptrl	equ	0xFF6
  6532                           tablat	equ	0xFF5
  6533                           prodh	equ	0xFF4
  6534                           prodl	equ	0xFF3
  6535                           indf0	equ	0xFEF
  6536                           plusw0	equ	0xFEB
  6537                           fsr0h	equ	0xFEA
  6538                           fsr0l	equ	0xFE9
  6539                           wreg	equ	0xFE8
  6540                           indf2	equ	0xFDF
  6541                           postinc2	equ	0xFDE
  6542                           postdec2	equ	0xFDD
  6543                           plusw2	equ	0xFDB
  6544                           fsr2h	equ	0xFDA
  6545                           fsr2l	equ	0xFD9
  6546                           status	equ	0xFD8
  6547                           
  6548 ;; *************** function _CheckBusy *****************
  6549 ;; Defined at:
  6550 ;;		line 211 in file "dog104.c"
  6551 ;; Parameters:    Size  Location     Type
  6552 ;;		None
  6553 ;; Auto vars:     Size  Location     Type
  6554 ;;		None
  6555 ;; Return value:  Size  Location     Type
  6556 ;;                  1    wreg      unsigned char 
  6557 ;; Registers used:
  6558 ;;		wreg, status,2, status,0, cstack
  6559 ;; Tracked objects:
  6560 ;;		On entry : 0/0
  6561 ;;		On exit  : 0/0
  6562 ;;		Unchanged: 0/0
  6563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6564 ;;      Params:         0       0       0       0       0       0       0
  6565 ;;      Locals:         0       0       0       0       0       0       0
  6566 ;;      Temps:          0       0       0       0       0       0       0
  6567 ;;      Totals:         0       0       0       0       0       0       0
  6568 ;;Total ram usage:        0 bytes
  6569 ;; Hardware stack levels used:    1
  6570 ;; Hardware stack levels required when called:    3
  6571 ;; This function calls:
  6572 ;;		_IIC_get
  6573 ;; This function is called by:
  6574 ;;		_WriteIns
  6575 ;;		_WriteData
  6576 ;; This function uses a non-reentrant model
  6577 ;;
  6578                           
  6579                           	psect	text33
  6580  005E5E                     __ptext33:
  6581                           	opt stack 0
  6582  005E5E                     _CheckBusy:
  6583                           	opt stack 25
  6584                           
  6585                           ;dog104.c: 213: return (IIC_get() & 0x80);
  6586                           
  6587                           ;incstack = 0
  6588  005E5E  EC20  F030         	call	_IIC_get	;wreg free
  6589  005E62  0B80               	andlw	128
  6590  005E64  0012               	return		;funcret
  6591  005E66                     __end_of_CheckBusy:
  6592                           	opt stack 0
  6593                           tblptru	equ	0xFF8
  6594                           tblptrh	equ	0xFF7
  6595                           tblptrl	equ	0xFF6
  6596                           tablat	equ	0xFF5
  6597                           prodh	equ	0xFF4
  6598                           prodl	equ	0xFF3
  6599                           indf0	equ	0xFEF
  6600                           plusw0	equ	0xFEB
  6601                           fsr0h	equ	0xFEA
  6602                           fsr0l	equ	0xFE9
  6603                           wreg	equ	0xFE8
  6604                           indf2	equ	0xFDF
  6605                           postinc2	equ	0xFDE
  6606                           postdec2	equ	0xFDD
  6607                           plusw2	equ	0xFDB
  6608                           fsr2h	equ	0xFDA
  6609                           fsr2l	equ	0xFD9
  6610                           status	equ	0xFD8
  6611                           
  6612 ;; *************** function _IIC_get *****************
  6613 ;; Defined at:
  6614 ;;		line 234 in file "dog104.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;		None
  6617 ;; Auto vars:     Size  Location     Type
  6618 ;;  ret             1    3[COMRAM] unsigned char 
  6619 ;; Return value:  Size  Location     Type
  6620 ;;                  1    wreg      unsigned char 
  6621 ;; Registers used:
  6622 ;;		wreg, status,2, status,0, cstack
  6623 ;; Tracked objects:
  6624 ;;		On entry : 0/0
  6625 ;;		On exit  : 0/0
  6626 ;;		Unchanged: 0/0
  6627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6628 ;;      Params:         0       0       0       0       0       0       0
  6629 ;;      Locals:         1       0       0       0       0       0       0
  6630 ;;      Temps:          0       0       0       0       0       0       0
  6631 ;;      Totals:         1       0       0       0       0       0       0
  6632 ;;Total ram usage:        1 bytes
  6633 ;; Hardware stack levels used:    1
  6634 ;; Hardware stack levels required when called:    2
  6635 ;; This function calls:
  6636 ;;		_I2C_ReadByte
  6637 ;;		_I2C_RepeatedStart
  6638 ;;		_I2C_Start
  6639 ;;		_I2C_Stop
  6640 ;;		_I2C_WriteByte
  6641 ;; This function is called by:
  6642 ;;		_CheckBusy
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646                           	psect	text34
  6647  006040                     __ptext34:
  6648                           	opt stack 0
  6649  006040                     _IIC_get:
  6650                           	opt stack 25
  6651                           
  6652                           ;dog104.c: 236: uint8_t ret;
  6653                           ;dog104.c: 238: I2C_Start();
  6654                           
  6655                           ;incstack = 0
  6656  006040  EC41  F02F         	call	_I2C_Start	;wreg free
  6657                           
  6658                           ;dog104.c: 239: I2C_WriteByte(0x78);
  6659  006044  0E78               	movlw	120
  6660  006046  EC35  F030         	call	_I2C_WriteByte
  6661                           
  6662                           ;dog104.c: 240: I2C_WriteByte(0x80);
  6663  00604A  0E80               	movlw	128
  6664  00604C  EC35  F030         	call	_I2C_WriteByte
  6665                           
  6666                           ;dog104.c: 241: I2C_RepeatedStart();
  6667  006050  EC4D  F02F         	call	_I2C_RepeatedStart	;wreg free
  6668                           
  6669                           ;dog104.c: 242: I2C_WriteByte(0x78 + 1);
  6670  006054  0E79               	movlw	121
  6671  006056  EC35  F030         	call	_I2C_WriteByte
  6672                           
  6673                           ;dog104.c: 243: ret = I2C_ReadByte(0);
  6674  00605A  0E00               	movlw	0
  6675  00605C  EC9D  F030         	call	_I2C_ReadByte
  6676  006060  6E04               	movwf	IIC_get@ret,c
  6677                           
  6678                           ;dog104.c: 244: I2C_Stop();
  6679  006062  EC47  F02F         	call	_I2C_Stop	;wreg free
  6680                           
  6681                           ;dog104.c: 246: return ret;
  6682  006066  5004               	movf	IIC_get@ret,w,c
  6683  006068  0012               	return		;funcret
  6684  00606A                     __end_of_IIC_get:
  6685                           	opt stack 0
  6686                           tblptru	equ	0xFF8
  6687                           tblptrh	equ	0xFF7
  6688                           tblptrl	equ	0xFF6
  6689                           tablat	equ	0xFF5
  6690                           prodh	equ	0xFF4
  6691                           prodl	equ	0xFF3
  6692                           indf0	equ	0xFEF
  6693                           plusw0	equ	0xFEB
  6694                           fsr0h	equ	0xFEA
  6695                           fsr0l	equ	0xFE9
  6696                           wreg	equ	0xFE8
  6697                           indf2	equ	0xFDF
  6698                           postinc2	equ	0xFDE
  6699                           postdec2	equ	0xFDD
  6700                           plusw2	equ	0xFDB
  6701                           fsr2h	equ	0xFDA
  6702                           fsr2l	equ	0xFD9
  6703                           status	equ	0xFD8
  6704                           
  6705 ;; *************** function _Delay_ms *****************
  6706 ;; Defined at:
  6707 ;;		line 11 in file "my_delays.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;  count           2    0[COMRAM] unsigned int 
  6710 ;; Auto vars:     Size  Location     Type
  6711 ;;  i               2    3[COMRAM] unsigned int 
  6712 ;; Return value:  Size  Location     Type
  6713 ;;                  1    wreg      void 
  6714 ;; Registers used:
  6715 ;;		wreg, status,2, status,0
  6716 ;; Tracked objects:
  6717 ;;		On entry : 0/0
  6718 ;;		On exit  : 0/0
  6719 ;;		Unchanged: 0/0
  6720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6721 ;;      Params:         2       0       0       0       0       0       0
  6722 ;;      Locals:         2       0       0       0       0       0       0
  6723 ;;      Temps:          1       0       0       0       0       0       0
  6724 ;;      Totals:         5       0       0       0       0       0       0
  6725 ;;Total ram usage:        5 bytes
  6726 ;; Hardware stack levels used:    1
  6727 ;; This function calls:
  6728 ;;		Nothing
  6729 ;; This function is called by:
  6730 ;;		_main
  6731 ;; This function uses a non-reentrant model
  6732 ;;
  6733                           
  6734                           	psect	text35
  6735  005FD0                     __ptext35:
  6736                           	opt stack 0
  6737  005FD0                     _Delay_ms:
  6738                           	opt stack 30
  6739                           
  6740                           ;my_delays.c: 13: unsigned int i;
  6741                           ;my_delays.c: 15: for(i = 0; i < count; i ++)
  6742                           
  6743                           ;incstack = 0
  6744  005FD0  6A04               	clrf	Delay_ms@i,c
  6745  005FD2  6A05               	clrf	Delay_ms@i+1,c
  6746  005FD4  D009               	goto	l83
  6747  005FD6                     l4240:
  6748                           
  6749                           ;my_delays.c: 16: {
  6750                           ;my_delays.c: 17: _delay((unsigned long)((1)*(8000000/4000.0)));
  6751  005FD6  0E03               	movlw	3
  6752  005FD8  6E03               	movwf	??_Delay_ms& (0+255),c
  6753  005FDA  0E98               	movlw	152
  6754  005FDC                     u4927:
  6755  005FDC  2EE8               	decfsz	wreg,f,c
  6756  005FDE  D7FE               	bra	u4927
  6757  005FE0  2E03               	decfsz	??_Delay_ms& (0+255),f,c
  6758  005FE2  D7FC               	bra	u4927
  6759  005FE4  4A04               	infsnz	Delay_ms@i,f,c
  6760  005FE6  2A05               	incf	Delay_ms@i+1,f,c
  6761  005FE8                     l83:
  6762  005FE8  5001               	movf	Delay_ms@count,w,c
  6763  005FEA  5C04               	subwf	Delay_ms@i,w,c
  6764  005FEC  5002               	movf	Delay_ms@count+1,w,c
  6765  005FEE  5805               	subwfb	Delay_ms@i+1,w,c
  6766  005FF0  E3F2               	bnc	l4240
  6767  005FF2  0012               	return		;funcret
  6768  005FF4                     __end_of_Delay_ms:
  6769                           	opt stack 0
  6770                           tblptru	equ	0xFF8
  6771                           tblptrh	equ	0xFF7
  6772                           tblptrl	equ	0xFF6
  6773                           tablat	equ	0xFF5
  6774                           prodh	equ	0xFF4
  6775                           prodl	equ	0xFF3
  6776                           indf0	equ	0xFEF
  6777                           plusw0	equ	0xFEB
  6778                           fsr0h	equ	0xFEA
  6779                           fsr0l	equ	0xFE9
  6780                           wreg	equ	0xFE8
  6781                           indf2	equ	0xFDF
  6782                           postinc2	equ	0xFDE
  6783                           postdec2	equ	0xFDD
  6784                           plusw2	equ	0xFDB
  6785                           fsr2h	equ	0xFDA
  6786                           fsr2l	equ	0xFD9
  6787                           status	equ	0xFD8
  6788                           
  6789 ;; *************** function _ADXL355_Read_Axis *****************
  6790 ;; Defined at:
  6791 ;;		line 26 in file "adxl355.c"
  6792 ;; Parameters:    Size  Location     Type
  6793 ;;  address         1    wreg     unsigned char 
  6794 ;; Auto vars:     Size  Location     Type
  6795 ;;  address         1   19[BANK0 ] unsigned char 
  6796 ;;  axis           18   21[BANK0 ] struct axis_value
  6797 ;;  buffer         15    0[BANK0 ] unsigned char [15]
  6798 ;;  i               1   20[BANK0 ] unsigned char 
  6799 ;; Return value:  Size  Location     Type
  6800 ;;                  18   97[COMRAM] struct axis_value
  6801 ;; Registers used:
  6802 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  6803 ;; Tracked objects:
  6804 ;;		On entry : 0/0
  6805 ;;		On exit  : 0/0
  6806 ;;		Unchanged: 0/0
  6807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6808 ;;      Params:        18       0       0       0       0       0       0
  6809 ;;      Locals:         0      39       0       0       0       0       0
  6810 ;;      Temps:          8       0       0       0       0       0       0
  6811 ;;      Totals:        26      39       0       0       0       0       0
  6812 ;;Total ram usage:       65 bytes
  6813 ;; Hardware stack levels used:    1
  6814 ;; Hardware stack levels required when called:    2
  6815 ;; This function calls:
  6816 ;;		_I2C_ReadByte
  6817 ;;		_I2C_RepeatedStart
  6818 ;;		_I2C_Start
  6819 ;;		_I2C_Stop
  6820 ;;		_I2C_WriteByte
  6821 ;;		___aldiv
  6822 ;;		___fladd
  6823 ;;		___fldiv
  6824 ;;		___xxtofl
  6825 ;; This function is called by:
  6826 ;;		_main
  6827 ;; This function uses a non-reentrant model
  6828 ;;
  6829                           
  6830                           	psect	text36
  6831  006E0E                     __ptext36:
  6832                           	opt stack 0
  6833  006E0E                     _ADXL355_Read_Axis:
  6834                           	opt stack 28
  6835                           
  6836                           ;incstack = 0
  6837                           ;ADXL355_Read_Axis@address stored from wreg
  6838  006E0E  0100               	movlb	0	; () banked
  6839  006E10  6F93               	movwf	ADXL355_Read_Axis@address& (0+255),b
  6840                           
  6841                           ;adxl355.c: 32: I2C_Start();
  6842  006E12  EC41  F02F         	call	_I2C_Start	;wreg free
  6843                           
  6844                           ;adxl355.c: 33: I2C_WriteByte(address);
  6845  006E16  0100               	movlb	0	; () banked
  6846  006E18  5193               	movf	ADXL355_Read_Axis@address& (0+255),w,b
  6847  006E1A  EC35  F030         	call	_I2C_WriteByte
  6848                           
  6849                           ;adxl355.c: 34: I2C_WriteByte(0x06);
  6850  006E1E  0E06               	movlw	6
  6851  006E20  EC35  F030         	call	_I2C_WriteByte
  6852                           
  6853                           ;adxl355.c: 35: I2C_RepeatedStart();
  6854  006E24  EC4D  F02F         	call	_I2C_RepeatedStart	;wreg free
  6855                           
  6856                           ;adxl355.c: 36: I2C_WriteByte(address + 1);
  6857  006E28  0100               	movlb	0	; () banked
  6858  006E2A  2993               	incf	ADXL355_Read_Axis@address& (0+255),w,b
  6859  006E2C  EC35  F030         	call	_I2C_WriteByte
  6860                           
  6861                           ;adxl355.c: 38: for(i = 0; i < 10; i++)
  6862  006E30  0100               	movlb	0	; () banked
  6863  006E32  6B94               	clrf	ADXL355_Read_Axis@i& (0+255),b
  6864  006E34                     l3862:
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;adxl355.c: 39: {
  6868                           ;adxl355.c: 40: buffer[i] = I2C_ReadByte(1);
  6869  006E34  D8F9               	call	PL130	;call to abstracted procedure
  6870  006E36  0E01               	movlw	1
  6871  006E38  EC9D  F030         	call	_I2C_ReadByte
  6872  006E3C  6EDF               	movwf	indf2,c
  6873  006E3E  0100               	movlb	0	; () banked
  6874  006E40  2B94               	incf	ADXL355_Read_Axis@i& (0+255),f,b
  6875                           
  6876                           ; BSR set to: 0
  6877  006E42  0E09               	movlw	9
  6878  006E44  6594               	cpfsgt	ADXL355_Read_Axis@i& (0+255),b
  6879  006E46  D7F6               	goto	l3862
  6880                           
  6881                           ; BSR set to: 0
  6882                           ;adxl355.c: 41: }
  6883                           ;adxl355.c: 43: buffer[++i] = I2C_ReadByte(0);
  6884  006E48  2B94               	incf	ADXL355_Read_Axis@i& (0+255),f,b
  6885  006E4A  D8EE               	call	PL130	;call to abstracted procedure
  6886  006E4C  0E00               	movlw	0
  6887  006E4E  EC9D  F030         	call	_I2C_ReadByte
  6888  006E52  6EDF               	movwf	indf2,c
  6889                           
  6890                           ;adxl355.c: 44: I2C_Stop();
  6891  006E54  EC47  F02F         	call	_I2C_Stop	;wreg free
  6892                           
  6893                           ;adxl355.c: 46: axis.x_axis = (uint32_t) buffer[2] << 24 | (uint32_t) buffer[3] << 16 | 
      +                          buffer[4] >> 8;
  6894  006E58  C083  F074         	movff	ADXL355_Read_Axis@buffer+3,??_ADXL355_Read_Axis
  6895  006E5C  D8D5               	call	PL42	;call to abstracted procedure
  6896  006E5E  C082  F078         	movff	ADXL355_Read_Axis@buffer+2,??_ADXL355_Read_Axis+4
  6897  006E62  D8C7               	call	PL38	;call to abstracted procedure
  6898  006E64  0100               	movlb	0	; () banked
  6899  006E66  6F95               	movwf	ADXL355_Read_Axis@axis& (0+255),b
  6900  006E68  5075               	movf	??_ADXL355_Read_Axis+1,w,c
  6901  006E6A  1079               	iorwf	??_ADXL355_Read_Axis+5,w,c
  6902  006E6C  6F96               	movwf	(ADXL355_Read_Axis@axis+1)& (0+255),b
  6903  006E6E  5076               	movf	??_ADXL355_Read_Axis+2,w,c
  6904  006E70  107A               	iorwf	??_ADXL355_Read_Axis+6,w,c
  6905  006E72  6F97               	movwf	(ADXL355_Read_Axis@axis+2)& (0+255),b
  6906  006E74  5077               	movf	??_ADXL355_Read_Axis+3,w,c
  6907  006E76  107B               	iorwf	??_ADXL355_Read_Axis+7,w,c
  6908  006E78  6F98               	movwf	(ADXL355_Read_Axis@axis+3)& (0+255),b
  6909                           
  6910                           ; BSR set to: 0
  6911                           ;adxl355.c: 47: axis.y_axis = (uint32_t) buffer[5] << 24 | (uint32_t) buffer[6] << 16 | 
      +                          buffer[7] >> 8;
  6912  006E7A  C086  F074         	movff	ADXL355_Read_Axis@buffer+6,??_ADXL355_Read_Axis
  6913  006E7E  D8C4               	call	PL42	;call to abstracted procedure
  6914  006E80  C085  F078         	movff	ADXL355_Read_Axis@buffer+5,??_ADXL355_Read_Axis+4
  6915  006E84  D8B6               	call	PL38	;call to abstracted procedure
  6916  006E86  6F99               	movwf	(ADXL355_Read_Axis@axis+4)& (0+255),b
  6917  006E88  5075               	movf	??_ADXL355_Read_Axis+1,w,c
  6918  006E8A  1079               	iorwf	??_ADXL355_Read_Axis+5,w,c
  6919  006E8C  6F9A               	movwf	(ADXL355_Read_Axis@axis+5)& (0+255),b
  6920  006E8E  5076               	movf	??_ADXL355_Read_Axis+2,w,c
  6921  006E90  107A               	iorwf	??_ADXL355_Read_Axis+6,w,c
  6922  006E92  6F9B               	movwf	(ADXL355_Read_Axis@axis+6)& (0+255),b
  6923  006E94  5077               	movf	??_ADXL355_Read_Axis+3,w,c
  6924  006E96  107B               	iorwf	??_ADXL355_Read_Axis+7,w,c
  6925  006E98  6F9C               	movwf	(ADXL355_Read_Axis@axis+7)& (0+255),b
  6926                           
  6927                           ; BSR set to: 0
  6928                           ;adxl355.c: 48: axis.z_axis = (uint32_t) buffer[8] << 24 | (uint32_t) buffer[9] << 16 | 
      +                          buffer[10] >> 8;
  6929  006E9A  C089  F074         	movff	ADXL355_Read_Axis@buffer+9,??_ADXL355_Read_Axis
  6930  006E9E  D8B4               	call	PL42	;call to abstracted procedure
  6931  006EA0  C088  F078         	movff	ADXL355_Read_Axis@buffer+8,??_ADXL355_Read_Axis+4
  6932  006EA4  D8A6               	call	PL38	;call to abstracted procedure
  6933  006EA6  6F9D               	movwf	(ADXL355_Read_Axis@axis+8)& (0+255),b
  6934  006EA8  5075               	movf	??_ADXL355_Read_Axis+1,w,c
  6935  006EAA  1079               	iorwf	??_ADXL355_Read_Axis+5,w,c
  6936  006EAC  6F9E               	movwf	(ADXL355_Read_Axis@axis+9)& (0+255),b
  6937  006EAE  5076               	movf	??_ADXL355_Read_Axis+2,w,c
  6938  006EB0  107A               	iorwf	??_ADXL355_Read_Axis+6,w,c
  6939  006EB2  6F9F               	movwf	(ADXL355_Read_Axis@axis+10)& (0+255),b
  6940  006EB4  5077               	movf	??_ADXL355_Read_Axis+3,w,c
  6941  006EB6  107B               	iorwf	??_ADXL355_Read_Axis+7,w,c
  6942  006EB8  6FA0               	movwf	(ADXL355_Read_Axis@axis+11)& (0+255),b
  6943                           
  6944                           ; BSR set to: 0
  6945                           ;adxl355.c: 50: axis.x_axis /= 4096;
  6946  006EBA  C095  F001         	movff	ADXL355_Read_Axis@axis,___aldiv@dividend
  6947  006EBE  C096  F002         	movff	ADXL355_Read_Axis@axis+1,___aldiv@dividend+1
  6948  006EC2  C097  F003         	movff	ADXL355_Read_Axis@axis+2,___aldiv@dividend+2
  6949  006EC6  C098  F004         	movff	ADXL355_Read_Axis@axis+3,___aldiv@dividend+3
  6950  006ECA  D8A8               	call	PL104	;call to abstracted procedure
  6951  006ECC  EC33  F033         	call	___aldiv	;wreg free
  6952  006ED0  C001  F095         	movff	?___aldiv,ADXL355_Read_Axis@axis
  6953  006ED4  C002  F096         	movff	?___aldiv+1,ADXL355_Read_Axis@axis+1
  6954  006ED8  C003  F097         	movff	?___aldiv+2,ADXL355_Read_Axis@axis+2
  6955  006EDC  C004  F098         	movff	?___aldiv+3,ADXL355_Read_Axis@axis+3
  6956                           
  6957                           ;adxl355.c: 51: axis.y_axis /= 4096;
  6958  006EE0  C099  F001         	movff	ADXL355_Read_Axis@axis+4,___aldiv@dividend
  6959  006EE4  C09A  F002         	movff	ADXL355_Read_Axis@axis+5,___aldiv@dividend+1
  6960  006EE8  C09B  F003         	movff	ADXL355_Read_Axis@axis+6,___aldiv@dividend+2
  6961  006EEC  C09C  F004         	movff	ADXL355_Read_Axis@axis+7,___aldiv@dividend+3
  6962  006EF0  D895               	call	PL104	;call to abstracted procedure
  6963  006EF2  EC33  F033         	call	___aldiv	;wreg free
  6964  006EF6  C001  F099         	movff	?___aldiv,ADXL355_Read_Axis@axis+4
  6965  006EFA  C002  F09A         	movff	?___aldiv+1,ADXL355_Read_Axis@axis+5
  6966  006EFE  C003  F09B         	movff	?___aldiv+2,ADXL355_Read_Axis@axis+6
  6967  006F02  C004  F09C         	movff	?___aldiv+3,ADXL355_Read_Axis@axis+7
  6968                           
  6969                           ;adxl355.c: 52: axis.z_axis /= 4096;
  6970  006F06  C09D  F001         	movff	ADXL355_Read_Axis@axis+8,___aldiv@dividend
  6971  006F0A  C09E  F002         	movff	ADXL355_Read_Axis@axis+9,___aldiv@dividend+1
  6972  006F0E  C09F  F003         	movff	ADXL355_Read_Axis@axis+10,___aldiv@dividend+2
  6973  006F12  C0A0  F004         	movff	ADXL355_Read_Axis@axis+11,___aldiv@dividend+3
  6974  006F16  D882               	call	PL104	;call to abstracted procedure
  6975  006F18  EC33  F033         	call	___aldiv	;wreg free
  6976  006F1C  C001  F09D         	movff	?___aldiv,ADXL355_Read_Axis@axis+8
  6977  006F20  C002  F09E         	movff	?___aldiv+1,ADXL355_Read_Axis@axis+9
  6978  006F24  C003  F09F         	movff	?___aldiv+2,ADXL355_Read_Axis@axis+10
  6979  006F28  C004  F0A0         	movff	?___aldiv+3,ADXL355_Read_Axis@axis+11
  6980                           
  6981                           ;adxl355.c: 54: axis.temp_reg = (((uint16_t)buffer[0]) << 8) | (buffer[1]);
  6982  006F2C  0100               	movlb	0	; () banked
  6983  006F2E  5180               	movf	ADXL355_Read_Axis@buffer& (0+255),w,b
  6984  006F30  6E74               	movwf	??_ADXL355_Read_Axis& (0+255),c
  6985  006F32  5181               	movf	(ADXL355_Read_Axis@buffer+1)& (0+255),w,b
  6986  006F34  6FA1               	movwf	(ADXL355_Read_Axis@axis+12)& (0+255),b
  6987  006F36  C074  F0A2         	movff	??_ADXL355_Read_Axis,ADXL355_Read_Axis@axis+13
  6988                           
  6989                           ; BSR set to: 0
  6990                           ;adxl355.c: 55: axis.temp = ((axis.temp_reg - (float)1852.0)/ (float)-9.05) + 25;
  6991  006F3A  0ECD               	movlw	205
  6992  006F3C  6E4D               	movwf	___fldiv@a,c
  6993  006F3E  0ECC               	movlw	204
  6994  006F40  6E4E               	movwf	___fldiv@a+1,c
  6995  006F42  0E10               	movlw	16
  6996  006F44  6E4F               	movwf	___fldiv@a+2,c
  6997  006F46  0EC1               	movlw	193
  6998  006F48  6E50               	movwf	___fldiv@a+3,c
  6999  006F4A  0E00               	movlw	0
  7000  006F4C  6E3D               	movwf	___fladd@a,c
  7001  006F4E  0E80               	movlw	128
  7002  006F50  6E3E               	movwf	___fladd@a+1,c
  7003  006F52  0EE7               	movlw	231
  7004  006F54  6E3F               	movwf	___fladd@a+2,c
  7005  006F56  0EC4               	movlw	196
  7006  006F58  6E40               	movwf	___fladd@a+3,c
  7007  006F5A  EE20  F0A1         	lfsr	2,ADXL355_Read_Axis@axis+12
  7008  006F5E  CFDE F001          	movff	postinc2,___xxtofl@val
  7009  006F62  CFDD F002          	movff	postdec2,___xxtofl@val+1
  7010  006F66  0E00               	movlw	0
  7011  006F68  BE02               	btfsc	___xxtofl@val+1,7,c
  7012  006F6A  0EFF               	movlw	-1
  7013  006F6C  6E03               	movwf	___xxtofl@val+2,c
  7014  006F6E  6E04               	movwf	___xxtofl@val+3,c
  7015  006F70  0E01               	movlw	1
  7016  006F72  ECF7  F033         	call	___xxtofl
  7017  006F76  C001  F039         	movff	?___xxtofl,___fladd@b
  7018  006F7A  C002  F03A         	movff	?___xxtofl+1,___fladd@b+1
  7019  006F7E  C003  F03B         	movff	?___xxtofl+2,___fladd@b+2
  7020  006F82  C004  F03C         	movff	?___xxtofl+3,___fladd@b+3
  7021  006F86  EC58  F03A         	call	___fladd	;wreg free
  7022  006F8A  C039  F049         	movff	?___fladd,___fldiv@b
  7023  006F8E  C03A  F04A         	movff	?___fladd+1,___fldiv@b+1
  7024  006F92  C03B  F04B         	movff	?___fladd+2,___fldiv@b+2
  7025  006F96  C03C  F04C         	movff	?___fladd+3,___fldiv@b+3
  7026  006F9A  EC35  F035         	call	___fldiv	;wreg free
  7027  006F9E  C049  F08F         	movff	?___fldiv,_ADXL355_Read_Axis$1707
  7028  006FA2  C04A  F090         	movff	?___fldiv+1,_ADXL355_Read_Axis$1707+1
  7029  006FA6  C04B  F091         	movff	?___fldiv+2,_ADXL355_Read_Axis$1707+2
  7030  006FAA  C04C  F092         	movff	?___fldiv+3,_ADXL355_Read_Axis$1707+3
  7031                           
  7032                           ;adxl355.c: 55: axis.temp = ((axis.temp_reg - (float)1852.0)/ (float)-9.05) + 25;
  7033  006FAE  C08F  F039         	movff	_ADXL355_Read_Axis$1707,___fladd@b
  7034  006FB2  C090  F03A         	movff	_ADXL355_Read_Axis$1707+1,___fladd@b+1
  7035  006FB6  C091  F03B         	movff	_ADXL355_Read_Axis$1707+2,___fladd@b+2
  7036  006FBA  C092  F03C         	movff	_ADXL355_Read_Axis$1707+3,___fladd@b+3
  7037  006FBE  6A3D               	clrf	___fladd@a,c
  7038  006FC0  6A3E               	clrf	___fladd@a+1,c
  7039  006FC2  0EC8               	movlw	200
  7040  006FC4  6E3F               	movwf	___fladd@a+2,c
  7041  006FC6  0E41               	movlw	65
  7042  006FC8  6E40               	movwf	___fladd@a+3,c
  7043  006FCA  EC58  F03A         	call	___fladd	;wreg free
  7044  006FCE  C039  F0A3         	movff	?___fladd,ADXL355_Read_Axis@axis+14
  7045  006FD2  C03A  F0A4         	movff	?___fladd+1,ADXL355_Read_Axis@axis+15
  7046  006FD6  C03B  F0A5         	movff	?___fladd+2,ADXL355_Read_Axis@axis+16
  7047  006FDA  C03C  F0A6         	movff	?___fladd+3,ADXL355_Read_Axis@axis+17
  7048                           
  7049                           ;adxl355.c: 57: return axis;
  7050  006FDE  EE20  F095         	lfsr	2,ADXL355_Read_Axis@axis
  7051  006FE2  EE00  F062         	lfsr	0,?_ADXL355_Read_Axis
  7052  006FE6  0E11               	movlw	17
  7053  006FE8                     u4251:
  7054  006FE8  CFDB FFEB          	movff	plusw2,plusw0
  7055  006FEC  06E8               	decf	wreg,f,c
  7056  006FEE  E2FC               	bc	u4251
  7057  006FF0  0012               	return		;funcret
  7058  006FF2                     __end_of_ADXL355_Read_Axis:
  7059                           	opt stack 0
  7060  006FF2                     PL38:
  7061                           	opt stack 28
  7062  006FF2  6A79               	clrf	(??_ADXL355_Read_Axis+5)& (0+255),c
  7063  006FF4  6A7A               	clrf	(??_ADXL355_Read_Axis+6)& (0+255),c
  7064  006FF6  6A7B               	clrf	(??_ADXL355_Read_Axis+7)& (0+255),c
  7065  006FF8  C078  F07B         	movff	??_ADXL355_Read_Axis+4,??_ADXL355_Read_Axis+7
  7066  006FFC  6A7A               	clrf	??_ADXL355_Read_Axis+6,c
  7067  006FFE  6A79               	clrf	??_ADXL355_Read_Axis+5,c
  7068  007000  6A78               	clrf	??_ADXL355_Read_Axis+4,c
  7069  007002  5074               	movf	??_ADXL355_Read_Axis,w,c
  7070  007004  1078               	iorwf	??_ADXL355_Read_Axis+4,w,c
  7071  007006  0012               	return	
  7072  007008                     __end_ofPL38:
  7073                           	opt stack 0
  7074  007008                     PL42:
  7075                           	opt stack 28
  7076  007008  6A75               	clrf	(??_ADXL355_Read_Axis+1)& (0+255),c
  7077  00700A  6A76               	clrf	(??_ADXL355_Read_Axis+2)& (0+255),c
  7078  00700C  6A77               	clrf	(??_ADXL355_Read_Axis+3)& (0+255),c
  7079  00700E  C075  F077         	movff	??_ADXL355_Read_Axis+1,??_ADXL355_Read_Axis+3
  7080  007012  C074  F076         	movff	??_ADXL355_Read_Axis,??_ADXL355_Read_Axis+2
  7081  007016  6A75               	clrf	??_ADXL355_Read_Axis+1,c
  7082  007018  6A74               	clrf	??_ADXL355_Read_Axis,c
  7083  00701A  0012               	return	
  7084  00701C                     __end_ofPL42:
  7085                           	opt stack 0
  7086  00701C                     PL104:
  7087                           	opt stack 28
  7088  00701C  6A05               	clrf	___aldiv@divisor,c
  7089  00701E  0E10               	movlw	16
  7090  007020  6E06               	movwf	___aldiv@divisor+1,c
  7091  007022  6A07               	clrf	___aldiv@divisor+2,c
  7092  007024  6A08               	clrf	___aldiv@divisor+3,c
  7093  007026  0C10               	retlw	16
  7094  007028                     __end_ofPL104:
  7095                           	opt stack 0
  7096  007028                     PL130:
  7097                           	opt stack 28
  7098  007028  5194               	movf	ADXL355_Read_Axis@i& (0+255),w,b
  7099  00702A  0F80               	addlw	low ADXL355_Read_Axis@buffer
  7100  00702C  6ED9               	movwf	fsr2l,c
  7101  00702E  6ADA               	clrf	fsr2h,c
  7102  007030  0012               	return	
  7103  007032                     __end_ofPL130:
  7104                           	opt stack 0
  7105                           tblptru	equ	0xFF8
  7106                           tblptrh	equ	0xFF7
  7107                           tblptrl	equ	0xFF6
  7108                           tablat	equ	0xFF5
  7109                           prodh	equ	0xFF4
  7110                           prodl	equ	0xFF3
  7111                           indf0	equ	0xFEF
  7112                           plusw0	equ	0xFEB
  7113                           fsr0h	equ	0xFEA
  7114                           fsr0l	equ	0xFE9
  7115                           wreg	equ	0xFE8
  7116                           indf2	equ	0xFDF
  7117                           postinc2	equ	0xFDE
  7118                           postdec2	equ	0xFDD
  7119                           plusw2	equ	0xFDB
  7120                           fsr2h	equ	0xFDA
  7121                           fsr2l	equ	0xFD9
  7122                           status	equ	0xFD8
  7123                           
  7124 ;; *************** function ___fladd *****************
  7125 ;; Defined at:
  7126 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprcadd.c"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;  b               4   56[COMRAM] struct axis_value
  7129 ;;  a               4   60[COMRAM] struct axis_value
  7130 ;; Auto vars:     Size  Location     Type
  7131 ;;  grs             1   71[COMRAM] unsigned char 
  7132 ;;  bexp            1   70[COMRAM] unsigned char 
  7133 ;;  aexp            1   69[COMRAM] unsigned char 
  7134 ;;  signs           1   68[COMRAM] unsigned char 
  7135 ;; Return value:  Size  Location     Type
  7136 ;;                  4   56[COMRAM] unsigned char 
  7137 ;; Registers used:
  7138 ;;		wreg, status,2, status,0
  7139 ;; Tracked objects:
  7140 ;;		On entry : 0/0
  7141 ;;		On exit  : 0/0
  7142 ;;		Unchanged: 0/0
  7143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7144 ;;      Params:         8       0       0       0       0       0       0
  7145 ;;      Locals:         4       0       0       0       0       0       0
  7146 ;;      Temps:          4       0       0       0       0       0       0
  7147 ;;      Totals:        16       0       0       0       0       0       0
  7148 ;;Total ram usage:       16 bytes
  7149 ;; Hardware stack levels used:    1
  7150 ;; This function calls:
  7151 ;;		Nothing
  7152 ;; This function is called by:
  7153 ;;		_ADXL355_Read_Axis
  7154 ;;		_sprintf
  7155 ;;		___flsub
  7156 ;; This function uses a non-reentrant model
  7157 ;;
  7158                           
  7159                           	psect	text37
  7160  0074B0                     __ptext37:
  7161                           	opt stack 0
  7162  0074B0                     ___fladd:
  7163                           	opt stack 28
  7164                           
  7165                           ;incstack = 0
  7166  0074B0  503C               	movf	___fladd@b+3,w,c
  7167  0074B2  0B80               	andlw	128
  7168  0074B4  6E45               	movwf	___fladd@signs,c
  7169  0074B6  503C               	movf	___fladd@b+3,w,c
  7170  0074B8  243C               	addwf	___fladd@b+3,w,c
  7171  0074BA  6E47               	movwf	___fladd@bexp,c
  7172  0074BC  BE3B               	btfsc	___fladd@b+2,7,c
  7173  0074BE  8047               	bsf	___fladd@bexp,0,c
  7174  0074C0  5047               	movf	___fladd@bexp,w,c
  7175  0074C2  E005               	bz	l1059
  7176  0074C4  2847               	incf	___fladd@bexp,w,c
  7177  0074C6  E101               	bnz	l2896
  7178  0074C8  D90D               	call	PL112	;call to abstracted procedure
  7179  0074CA                     l2896:
  7180  0074CA  8E3B               	bsf	___fladd@b+2,7,c
  7181  0074CC  D003               	goto	L9
  7182  0074CE                     l1059:
  7183  0074CE  6A39               	clrf	___fladd@b,c
  7184  0074D0  6A3A               	clrf	___fladd@b+1,c
  7185  0074D2  6A3B               	clrf	___fladd@b+2,c
  7186  0074D4                     L9:
  7187  0074D4  6A3C               	clrf	___fladd@b+3,c
  7188  0074D6  5040               	movf	___fladd@a+3,w,c
  7189  0074D8  0B80               	andlw	128
  7190  0074DA  6E46               	movwf	___fladd@aexp,c
  7191  0074DC  1845               	xorwf	___fladd@signs,w,c
  7192  0074DE  E001               	bz	l2904
  7193  0074E0  8C45               	bsf	___fladd@signs,6,c
  7194  0074E2                     l2904:
  7195  0074E2  5040               	movf	___fladd@a+3,w,c
  7196  0074E4  2440               	addwf	___fladd@a+3,w,c
  7197  0074E6  6E46               	movwf	___fladd@aexp,c
  7198  0074E8  BE3F               	btfsc	___fladd@a+2,7,c
  7199  0074EA  8046               	bsf	___fladd@aexp,0,c
  7200  0074EC  5046               	movf	___fladd@aexp,w,c
  7201  0074EE  E008               	bz	l1064
  7202  0074F0  2846               	incf	___fladd@aexp,w,c
  7203  0074F2  E104               	bnz	l2916
  7204  0074F4  6A3D               	clrf	___fladd@a,c
  7205  0074F6  6A3E               	clrf	___fladd@a+1,c
  7206  0074F8  6A3F               	clrf	___fladd@a+2,c
  7207  0074FA  6A40               	clrf	___fladd@a+3,c
  7208  0074FC                     l2916:
  7209  0074FC  8E3F               	bsf	___fladd@a+2,7,c
  7210  0074FE  D003               	goto	L10
  7211  007500                     l1064:
  7212  007500  6A3D               	clrf	___fladd@a,c
  7213  007502  6A3E               	clrf	___fladd@a+1,c
  7214  007504  6A3F               	clrf	___fladd@a+2,c
  7215  007506                     L10:
  7216  007506  6A40               	clrf	___fladd@a+3,c
  7217  007508  5047               	movf	___fladd@bexp,w,c
  7218  00750A  5C46               	subwf	___fladd@aexp,w,c
  7219  00750C  E222               	bc	l2956
  7220  00750E  AC45               	btfss	___fladd@signs,6,c
  7221  007510  D002               	goto	l2926
  7222  007512  0E80               	movlw	128
  7223  007514  1A45               	xorwf	___fladd@signs,f,c
  7224  007516                     l2926:
  7225  007516  C047  F048         	movff	___fladd@bexp,___fladd@grs
  7226  00751A  C046  F047         	movff	___fladd@aexp,___fladd@bexp
  7227  00751E  C048  F046         	movff	___fladd@grs,___fladd@aexp
  7228  007522  C039  F048         	movff	___fladd@b,___fladd@grs
  7229  007526  C03D  F039         	movff	___fladd@a,___fladd@b
  7230  00752A  C048  F03D         	movff	___fladd@grs,___fladd@a
  7231  00752E  C03A  F048         	movff	___fladd@b+1,___fladd@grs
  7232  007532  C03E  F03A         	movff	___fladd@a+1,___fladd@b+1
  7233  007536  C048  F03E         	movff	___fladd@grs,___fladd@a+1
  7234  00753A  C03B  F048         	movff	___fladd@b+2,___fladd@grs
  7235  00753E  C03F  F03B         	movff	___fladd@a+2,___fladd@b+2
  7236  007542  C048  F03F         	movff	___fladd@grs,___fladd@a+2
  7237  007546  C03C  F048         	movff	___fladd@b+3,___fladd@grs
  7238  00754A  C040  F03C         	movff	___fladd@a+3,___fladd@b+3
  7239  00754E  C048  F040         	movff	___fladd@grs,___fladd@a+3
  7240  007552                     l2956:
  7241  007552  6A48               	clrf	___fladd@grs,c
  7242  007554  5047               	movf	___fladd@bexp,w,c
  7243  007556  C046  F041         	movff	___fladd@aexp,??___fladd
  7244  00755A  6A42               	clrf	(??___fladd+1)& (0+255),c
  7245  00755C  5E41               	subwf	??___fladd,f,c
  7246  00755E  0E00               	movlw	0
  7247  007560  5A42               	subwfb	??___fladd+1,f,c
  7248  007562  BE42               	btfsc	??___fladd+1,7,c
  7249  007564  D018               	goto	l1071
  7250  007566  5042               	movf	??___fladd+1,w,c
  7251  007568  E103               	bnz	u2710
  7252  00756A  0E1A               	movlw	26
  7253  00756C  5C41               	subwf	??___fladd,w,c
  7254  00756E  E313               	bnc	l1071
  7255  007570                     u2710:
  7256  007570  D8C9               	call	PL140	;call to abstracted procedure
  7257  007572  0E01               	movlw	1
  7258  007574  B4D8               	btfsc	status,2,c
  7259  007576  0E00               	movlw	0
  7260  007578  6E48               	movwf	___fladd@grs,c
  7261  00757A  D8B4               	call	PL112	;call to abstracted procedure
  7262  00757C  C046  F047         	movff	___fladd@aexp,___fladd@bexp
  7263  007580  D00D               	goto	l1070
  7264  007582                     l1072:
  7265  007582  A048               	btfss	___fladd@grs,0,c
  7266  007584  D005               	goto	l2966
  7267  007586  90D8               	bcf	status,0,c
  7268  007588  3048               	rrcf	___fladd@grs,w,c
  7269  00758A  0901               	iorlw	1
  7270  00758C  6E48               	movwf	___fladd@grs,c
  7271  00758E  D002               	goto	l2968
  7272  007590                     l2966:
  7273  007590  90D8               	bcf	status,0,c
  7274  007592  3248               	rrcf	___fladd@grs,f,c
  7275  007594                     l2968:
  7276  007594  D89E               	call	PL92	;call to abstracted procedure
  7277  007596                     l1071:
  7278  007596  5046               	movf	___fladd@aexp,w,c
  7279  007598  5C47               	subwf	___fladd@bexp,w,c
  7280  00759A  E3F3               	bnc	l1072
  7281  00759C                     l1070:
  7282  00759C  BC45               	btfsc	___fladd@signs,6,c
  7283  00759E  D019               	goto	l2998
  7284  0075A0  5047               	movf	___fladd@bexp,w,c
  7285  0075A2  E101               	bnz	l2980
  7286  0075A4  D0AA               	goto	PL126	;call to abstracted procedure
  7287  0075A6                     l2980:
  7288  0075A6  503D               	movf	___fladd@a,w,c
  7289  0075A8  2639               	addwf	___fladd@b,f,c
  7290  0075AA  503E               	movf	___fladd@a+1,w,c
  7291  0075AC  223A               	addwfc	___fladd@b+1,f,c
  7292  0075AE  503F               	movf	___fladd@a+2,w,c
  7293  0075B0  223B               	addwfc	___fladd@b+2,f,c
  7294  0075B2  5040               	movf	___fladd@a+3,w,c
  7295  0075B4  223C               	addwfc	___fladd@b+3,f,c
  7296  0075B6  A03C               	btfss	___fladd@b+3,0,c
  7297  0075B8  D057               	goto	l1084
  7298  0075BA  A048               	btfss	___fladd@grs,0,c
  7299  0075BC  D006               	goto	l2988
  7300  0075BE  90D8               	bcf	status,0,c
  7301  0075C0  3248               	rrcf	___fladd@grs,f,c
  7302  0075C2  5048               	movf	___fladd@grs,w,c
  7303  0075C4  0901               	iorlw	1
  7304  0075C6  6E48               	movwf	___fladd@grs,c
  7305  0075C8  D002               	goto	l2990
  7306  0075CA                     l2988:
  7307  0075CA  90D8               	bcf	status,0,c
  7308  0075CC  3248               	rrcf	___fladd@grs,f,c
  7309  0075CE                     l2990:
  7310  0075CE  D881               	call	PL92	;call to abstracted procedure
  7311  0075D0  D04B               	goto	l1084
  7312  0075D2                     l2998:
  7313  0075D2  503D               	movf	___fladd@a,w,c
  7314  0075D4  5C39               	subwf	___fladd@b,w,c
  7315  0075D6  503E               	movf	___fladd@a+1,w,c
  7316  0075D8  583A               	subwfb	___fladd@b+1,w,c
  7317  0075DA  503F               	movf	___fladd@a+2,w,c
  7318  0075DC  583B               	subwfb	___fladd@b+2,w,c
  7319  0075DE  503C               	movf	___fladd@b+3,w,c
  7320  0075E0  0A80               	xorlw	128
  7321  0075E2  6E41               	movwf	??___fladd& (0+255),c
  7322  0075E4  5040               	movf	___fladd@a+3,w,c
  7323  0075E6  0A80               	xorlw	128
  7324  0075E8  5841               	subwfb	??___fladd& (0+255),w,c
  7325  0075EA  E21F               	bc	l3008
  7326  0075EC  5039               	movf	___fladd@b,w,c
  7327  0075EE  5C3D               	subwf	___fladd@a,w,c
  7328  0075F0  6E41               	movwf	??___fladd& (0+255),c
  7329  0075F2  503A               	movf	___fladd@b+1,w,c
  7330  0075F4  583E               	subwfb	___fladd@a+1,w,c
  7331  0075F6  6E42               	movwf	(??___fladd+1)& (0+255),c
  7332  0075F8  503B               	movf	___fladd@b+2,w,c
  7333  0075FA  583F               	subwfb	___fladd@a+2,w,c
  7334  0075FC  6E43               	movwf	(??___fladd+2)& (0+255),c
  7335  0075FE  503C               	movf	___fladd@b+3,w,c
  7336  007600  5840               	subwfb	___fladd@a+3,w,c
  7337  007602  6E44               	movwf	(??___fladd+3)& (0+255),c
  7338  007604  0EFF               	movlw	255
  7339  007606  2441               	addwf	??___fladd,w,c
  7340  007608  6E39               	movwf	___fladd@b,c
  7341  00760A  0EFF               	movlw	255
  7342  00760C  2042               	addwfc	??___fladd+1,w,c
  7343  00760E  6E3A               	movwf	___fladd@b+1,c
  7344  007610  0EFF               	movlw	255
  7345  007612  2043               	addwfc	??___fladd+2,w,c
  7346  007614  6E3B               	movwf	___fladd@b+2,c
  7347  007616  0EFF               	movlw	255
  7348  007618  2044               	addwfc	??___fladd+3,w,c
  7349  00761A  6E3C               	movwf	___fladd@b+3,c
  7350  00761C  0E80               	movlw	128
  7351  00761E  1A45               	xorwf	___fladd@signs,f,c
  7352  007620  6C48               	negf	___fladd@grs,c
  7353  007622  5048               	movf	___fladd@grs,w,c
  7354  007624  E10A               	bnz	l1087
  7355  007626  D863               	call	PL114	;call to abstracted procedure
  7356  007628  D008               	goto	l1087
  7357  00762A                     l3008:
  7358  00762A  503D               	movf	___fladd@a,w,c
  7359  00762C  5E39               	subwf	___fladd@b,f,c
  7360  00762E  503E               	movf	___fladd@a+1,w,c
  7361  007630  5A3A               	subwfb	___fladd@b+1,f,c
  7362  007632  503F               	movf	___fladd@a+2,w,c
  7363  007634  5A3B               	subwfb	___fladd@b+2,f,c
  7364  007636  5040               	movf	___fladd@a+3,w,c
  7365  007638  5A3C               	subwfb	___fladd@b+3,f,c
  7366  00763A                     l1087:
  7367  00763A  D864               	call	PL140	;call to abstracted procedure
  7368  00763C  E113               	bnz	l3030
  7369  00763E  5048               	movf	___fladd@grs,w,c
  7370  007640  E111               	bnz	l3030
  7371  007642  D05B               	goto	PL126	;call to abstracted procedure
  7372  007644                     l3014:
  7373  007644  90D8               	bcf	status,0,c
  7374  007646  3639               	rlcf	___fladd@b,f,c
  7375  007648  363A               	rlcf	___fladd@b+1,f,c
  7376  00764A  363B               	rlcf	___fladd@b+2,f,c
  7377  00764C  363C               	rlcf	___fladd@b+3,f,c
  7378  00764E  BE48               	btfsc	___fladd@grs,7,c
  7379  007650  8039               	bsf	___fladd@b,0,c
  7380  007652  A048               	btfss	___fladd@grs,0,c
  7381  007654  D002               	goto	l3024
  7382  007656  80D8               	bsf	status,0,c
  7383  007658  D001               	goto	L11
  7384  00765A                     l3024:
  7385  00765A  90D8               	bcf	status,0,c
  7386  00765C                     L11:
  7387  00765C  3648               	rlcf	___fladd@grs,f,c
  7388  00765E  5047               	movf	___fladd@bexp,w,c
  7389  007660  E001               	bz	l3030
  7390  007662  0647               	decf	___fladd@bexp,f,c
  7391  007664                     l3030:
  7392  007664  AE3B               	btfss	___fladd@b+2,7,c
  7393  007666  D7EE               	goto	l3014
  7394  007668                     l1084:
  7395  007668  6A46               	clrf	___fladd@aexp,c
  7396  00766A  AE48               	btfss	___fladd@grs,7,c
  7397  00766C  D00A               	goto	l1096
  7398  00766E  C048  F041         	movff	___fladd@grs,??___fladd
  7399  007672  0E7F               	movlw	127
  7400  007674  1641               	andwf	??___fladd,f,c
  7401  007676  E003               	bz	l1097
  7402  007678                     l3034:
  7403  007678  0E01               	movlw	1
  7404  00767A  6E46               	movwf	___fladd@aexp,c
  7405  00767C  D002               	goto	l1096
  7406  00767E                     l1097:
  7407  00767E  B039               	btfsc	___fladd@b,0,c
  7408  007680  D7FB               	goto	l3034
  7409  007682                     l1096:
  7410  007682  5046               	movf	___fladd@aexp,w,c
  7411  007684  E00B               	bz	l3046
  7412  007686  D833               	call	PL114	;call to abstracted procedure
  7413  007688  A03C               	btfss	___fladd@b+3,0,c
  7414  00768A  D008               	goto	l3046
  7415  00768C  343C               	rlcf	___fladd@b+3,w,c
  7416  00768E  323C               	rrcf	___fladd@b+3,f,c
  7417  007690  323B               	rrcf	___fladd@b+2,f,c
  7418  007692  323A               	rrcf	___fladd@b+1,f,c
  7419  007694  3239               	rrcf	___fladd@b,f,c
  7420  007696  2847               	incf	___fladd@bexp,w,c
  7421  007698  E001               	bz	l3046
  7422  00769A  2A47               	incf	___fladd@bexp,f,c
  7423  00769C                     l3046:
  7424  00769C  2847               	incf	___fladd@bexp,w,c
  7425  00769E  E002               	bz	l1105
  7426  0076A0  5047               	movf	___fladd@bexp,w,c
  7427  0076A2  E104               	bnz	l1103
  7428  0076A4                     l1105:
  7429  0076A4  D81F               	call	PL112	;call to abstracted procedure
  7430  0076A6  5047               	movf	___fladd@bexp,w,c
  7431  0076A8  E101               	bnz	l1103
  7432  0076AA  6A45               	clrf	___fladd@signs,c
  7433  0076AC                     l1103:
  7434  0076AC  A047               	btfss	___fladd@bexp,0,c
  7435  0076AE  D002               	goto	l3056
  7436  0076B0  8E3B               	bsf	___fladd@b+2,7,c
  7437  0076B2  D001               	goto	l3058
  7438  0076B4                     l3056:
  7439  0076B4  9E3B               	bcf	___fladd@b+2,7,c
  7440  0076B6                     l3058:
  7441  0076B6  90D8               	bcf	status,0,c
  7442  0076B8  3047               	rrcf	___fladd@bexp,w,c
  7443  0076BA  6E3C               	movwf	___fladd@b+3,c
  7444  0076BC  BE45               	btfsc	___fladd@signs,7,c
  7445  0076BE  8E3C               	bsf	___fladd@b+3,7,c
  7446  0076C0  C039  F039         	movff	___fladd@b,?___fladd
  7447  0076C4  C03A  F03A         	movff	___fladd@b+1,?___fladd+1
  7448  0076C8  C03B  F03B         	movff	___fladd@b+2,?___fladd+2
  7449  0076CC  C03C  F03C         	movff	___fladd@b+3,?___fladd+3
  7450  0076D0  0012               	return		;funcret
  7451  0076D2                     __end_of___fladd:
  7452                           	opt stack 0
  7453  0076D2                     PL92:
  7454                           	opt stack 28
  7455  0076D2  B039               	btfsc	___fladd@b,0,c
  7456  0076D4  8E48               	bsf	___fladd@grs,7,c
  7457  0076D6  343C               	rlcf	___fladd@b+3,w,c
  7458  0076D8  323C               	rrcf	___fladd@b+3,f,c
  7459  0076DA  323B               	rrcf	___fladd@b+2,f,c
  7460  0076DC  323A               	rrcf	___fladd@b+1,f,c
  7461  0076DE  3239               	rrcf	___fladd@b,f,c
  7462  0076E0  2A47               	incf	___fladd@bexp,f,c
  7463  0076E2  0012               	return	
  7464  0076E4                     __end_ofPL92:
  7465                           	opt stack 0
  7466  0076E4                     PL112:
  7467                           	opt stack 28
  7468  0076E4  6A39               	clrf	___fladd@b,c
  7469  0076E6  6A3A               	clrf	___fladd@b+1,c
  7470  0076E8  6A3B               	clrf	___fladd@b+2,c
  7471  0076EA  6A3C               	clrf	___fladd@b+3,c
  7472  0076EC  0012               	return	
  7473  0076EE                     __end_ofPL112:
  7474                           	opt stack 0
  7475  0076EE                     PL114:
  7476                           	opt stack 28
  7477  0076EE  2A39               	incf	___fladd@b,f,c
  7478  0076F0  0E00               	movlw	0
  7479  0076F2  223A               	addwfc	___fladd@b+1,f,c
  7480  0076F4  223B               	addwfc	___fladd@b+2,f,c
  7481  0076F6  223C               	addwfc	___fladd@b+3,f,c
  7482  0076F8  0C00               	retlw	0
  7483  0076FA                     __end_ofPL114:
  7484                           	opt stack 0
  7485  0076FA                     PL126:
  7486                           	opt stack 28
  7487  0076FA  6A39               	clrf	?___fladd,c
  7488  0076FC  6A3A               	clrf	?___fladd+1,c
  7489  0076FE  6A3B               	clrf	?___fladd+2,c
  7490  007700  6A3C               	clrf	?___fladd+3,c
  7491  007702  0012               	return	
  7492  007704                     __end_ofPL126:
  7493                           	opt stack 0
  7494  007704                     PL140:
  7495                           	opt stack 28
  7496  007704  5039               	movf	___fladd@b,w,c
  7497  007706  103A               	iorwf	___fladd@b+1,w,c
  7498  007708  103B               	iorwf	___fladd@b+2,w,c
  7499  00770A  103C               	iorwf	___fladd@b+3,w,c
  7500  00770C  0012               	return	
  7501  00770E                     __end_ofPL140:
  7502                           	opt stack 0
  7503                           tblptru	equ	0xFF8
  7504                           tblptrh	equ	0xFF7
  7505                           tblptrl	equ	0xFF6
  7506                           tablat	equ	0xFF5
  7507                           prodh	equ	0xFF4
  7508                           prodl	equ	0xFF3
  7509                           indf0	equ	0xFEF
  7510                           plusw0	equ	0xFEB
  7511                           fsr0h	equ	0xFEA
  7512                           fsr0l	equ	0xFE9
  7513                           wreg	equ	0xFE8
  7514                           indf2	equ	0xFDF
  7515                           postinc2	equ	0xFDE
  7516                           postdec2	equ	0xFDD
  7517                           plusw2	equ	0xFDB
  7518                           fsr2h	equ	0xFDA
  7519                           fsr2l	equ	0xFD9
  7520                           status	equ	0xFD8
  7521                           
  7522 ;; *************** function ___aldiv *****************
  7523 ;; Defined at:
  7524 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\aldiv.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;  dividend        4    0[COMRAM] long 
  7527 ;;  divisor         4    4[COMRAM] long 
  7528 ;; Auto vars:     Size  Location     Type
  7529 ;;  quotient        4   10[COMRAM] long 
  7530 ;;  sign            1    9[COMRAM] unsigned char 
  7531 ;;  counter         1    8[COMRAM] unsigned char 
  7532 ;; Return value:  Size  Location     Type
  7533 ;;                  4    0[COMRAM] long 
  7534 ;; Registers used:
  7535 ;;		wreg, status,2, status,0
  7536 ;; Tracked objects:
  7537 ;;		On entry : 0/0
  7538 ;;		On exit  : 0/0
  7539 ;;		Unchanged: 0/0
  7540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7541 ;;      Params:         8       0       0       0       0       0       0
  7542 ;;      Locals:         6       0       0       0       0       0       0
  7543 ;;      Temps:          0       0       0       0       0       0       0
  7544 ;;      Totals:        14       0       0       0       0       0       0
  7545 ;;Total ram usage:       14 bytes
  7546 ;; Hardware stack levels used:    1
  7547 ;; This function calls:
  7548 ;;		Nothing
  7549 ;; This function is called by:
  7550 ;;		_ADXL355_Read_Axis
  7551 ;; This function uses a non-reentrant model
  7552 ;;
  7553                           
  7554                           	psect	text38
  7555  006666                     __ptext38:
  7556                           	opt stack 0
  7557  006666                     ___aldiv:
  7558                           	opt stack 29
  7559                           
  7560                           ;incstack = 0
  7561  006666  6A0A               	clrf	___aldiv@sign,c
  7562  006668  AE08               	btfss	___aldiv@divisor+3,7,c
  7563  00666A  D00A               	goto	l3508
  7564  00666C  1E08               	comf	___aldiv@divisor+3,f,c
  7565  00666E  1E07               	comf	___aldiv@divisor+2,f,c
  7566  006670  1E06               	comf	___aldiv@divisor+1,f,c
  7567  006672  6C05               	negf	___aldiv@divisor,c
  7568  006674  0E00               	movlw	0
  7569  006676  2206               	addwfc	___aldiv@divisor+1,f,c
  7570  006678  2207               	addwfc	___aldiv@divisor+2,f,c
  7571  00667A  2208               	addwfc	___aldiv@divisor+3,f,c
  7572  00667C  0E01               	movlw	1
  7573  00667E  6E0A               	movwf	___aldiv@sign,c
  7574  006680                     l3508:
  7575  006680  AE04               	btfss	___aldiv@dividend+3,7,c
  7576  006682  D00A               	goto	l3514
  7577  006684  1E04               	comf	___aldiv@dividend+3,f,c
  7578  006686  1E03               	comf	___aldiv@dividend+2,f,c
  7579  006688  1E02               	comf	___aldiv@dividend+1,f,c
  7580  00668A  6C01               	negf	___aldiv@dividend,c
  7581  00668C  0E00               	movlw	0
  7582  00668E  2202               	addwfc	___aldiv@dividend+1,f,c
  7583  006690  2203               	addwfc	___aldiv@dividend+2,f,c
  7584  006692  2204               	addwfc	___aldiv@dividend+3,f,c
  7585  006694  0E01               	movlw	1
  7586  006696  1A0A               	xorwf	___aldiv@sign,f,c
  7587  006698                     l3514:
  7588  006698  6A0B               	clrf	___aldiv@quotient,c
  7589  00669A  6A0C               	clrf	___aldiv@quotient+1,c
  7590  00669C  6A0D               	clrf	___aldiv@quotient+2,c
  7591  00669E  6A0E               	clrf	___aldiv@quotient+3,c
  7592  0066A0  5005               	movf	___aldiv@divisor,w,c
  7593  0066A2  1006               	iorwf	___aldiv@divisor+1,w,c
  7594  0066A4  1007               	iorwf	___aldiv@divisor+2,w,c
  7595  0066A6  1008               	iorwf	___aldiv@divisor+3,w,c
  7596  0066A8  E029               	bz	l3536
  7597  0066AA  0E01               	movlw	1
  7598  0066AC  6E09               	movwf	___aldiv@counter,c
  7599  0066AE  D006               	goto	l3522
  7600  0066B0                     l3520:
  7601  0066B0  90D8               	bcf	status,0,c
  7602  0066B2  3605               	rlcf	___aldiv@divisor,f,c
  7603  0066B4  3606               	rlcf	___aldiv@divisor+1,f,c
  7604  0066B6  3607               	rlcf	___aldiv@divisor+2,f,c
  7605  0066B8  3608               	rlcf	___aldiv@divisor+3,f,c
  7606  0066BA  2A09               	incf	___aldiv@counter,f,c
  7607  0066BC                     l3522:
  7608  0066BC  AE08               	btfss	___aldiv@divisor+3,7,c
  7609  0066BE  D7F8               	goto	l3520
  7610  0066C0                     l3524:
  7611  0066C0  90D8               	bcf	status,0,c
  7612  0066C2  360B               	rlcf	___aldiv@quotient,f,c
  7613  0066C4  360C               	rlcf	___aldiv@quotient+1,f,c
  7614  0066C6  360D               	rlcf	___aldiv@quotient+2,f,c
  7615  0066C8  360E               	rlcf	___aldiv@quotient+3,f,c
  7616  0066CA  5005               	movf	___aldiv@divisor,w,c
  7617  0066CC  5C01               	subwf	___aldiv@dividend,w,c
  7618  0066CE  5006               	movf	___aldiv@divisor+1,w,c
  7619  0066D0  5802               	subwfb	___aldiv@dividend+1,w,c
  7620  0066D2  5007               	movf	___aldiv@divisor+2,w,c
  7621  0066D4  5803               	subwfb	___aldiv@dividend+2,w,c
  7622  0066D6  5008               	movf	___aldiv@divisor+3,w,c
  7623  0066D8  5804               	subwfb	___aldiv@dividend+3,w,c
  7624  0066DA  E309               	bnc	l3532
  7625  0066DC  5005               	movf	___aldiv@divisor,w,c
  7626  0066DE  5E01               	subwf	___aldiv@dividend,f,c
  7627  0066E0  5006               	movf	___aldiv@divisor+1,w,c
  7628  0066E2  5A02               	subwfb	___aldiv@dividend+1,f,c
  7629  0066E4  5007               	movf	___aldiv@divisor+2,w,c
  7630  0066E6  5A03               	subwfb	___aldiv@dividend+2,f,c
  7631  0066E8  5008               	movf	___aldiv@divisor+3,w,c
  7632  0066EA  5A04               	subwfb	___aldiv@dividend+3,f,c
  7633  0066EC  800B               	bsf	___aldiv@quotient,0,c
  7634  0066EE                     l3532:
  7635  0066EE  90D8               	bcf	status,0,c
  7636  0066F0  3208               	rrcf	___aldiv@divisor+3,f,c
  7637  0066F2  3207               	rrcf	___aldiv@divisor+2,f,c
  7638  0066F4  3206               	rrcf	___aldiv@divisor+1,f,c
  7639  0066F6  3205               	rrcf	___aldiv@divisor,f,c
  7640  0066F8  2E09               	decfsz	___aldiv@counter,f,c
  7641  0066FA  D7E2               	goto	l3524
  7642  0066FC                     l3536:
  7643  0066FC  500A               	movf	___aldiv@sign,w,c
  7644  0066FE  E008               	bz	l3540
  7645  006700  1E0E               	comf	___aldiv@quotient+3,f,c
  7646  006702  1E0D               	comf	___aldiv@quotient+2,f,c
  7647  006704  1E0C               	comf	___aldiv@quotient+1,f,c
  7648  006706  6C0B               	negf	___aldiv@quotient,c
  7649  006708  0E00               	movlw	0
  7650  00670A  220C               	addwfc	___aldiv@quotient+1,f,c
  7651  00670C  220D               	addwfc	___aldiv@quotient+2,f,c
  7652  00670E  220E               	addwfc	___aldiv@quotient+3,f,c
  7653  006710                     l3540:
  7654  006710  C00B  F001         	movff	___aldiv@quotient,?___aldiv
  7655  006714  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
  7656  006718  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
  7657  00671C  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
  7658  006720  0012               	return		;funcret
  7659  006722                     __end_of___aldiv:
  7660                           	opt stack 0
  7661                           tblptru	equ	0xFF8
  7662                           tblptrh	equ	0xFF7
  7663                           tblptrl	equ	0xFF6
  7664                           tablat	equ	0xFF5
  7665                           prodh	equ	0xFF4
  7666                           prodl	equ	0xFF3
  7667                           indf0	equ	0xFEF
  7668                           plusw0	equ	0xFEB
  7669                           fsr0h	equ	0xFEA
  7670                           fsr0l	equ	0xFE9
  7671                           wreg	equ	0xFE8
  7672                           indf2	equ	0xFDF
  7673                           postinc2	equ	0xFDE
  7674                           postdec2	equ	0xFDD
  7675                           plusw2	equ	0xFDB
  7676                           fsr2h	equ	0xFDA
  7677                           fsr2l	equ	0xFD9
  7678                           status	equ	0xFD8
  7679                           
  7680 ;; *************** function _I2C_RepeatedStart *****************
  7681 ;; Defined at:
  7682 ;;		line 36 in file "my_i2c.c"
  7683 ;; Parameters:    Size  Location     Type
  7684 ;;		None
  7685 ;; Auto vars:     Size  Location     Type
  7686 ;;		None
  7687 ;; Return value:  Size  Location     Type
  7688 ;;                  1    wreg      void 
  7689 ;; Registers used:
  7690 ;;		wreg, status,2, status,0, cstack
  7691 ;; Tracked objects:
  7692 ;;		On entry : 0/0
  7693 ;;		On exit  : 0/0
  7694 ;;		Unchanged: 0/0
  7695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7696 ;;      Params:         0       0       0       0       0       0       0
  7697 ;;      Locals:         0       0       0       0       0       0       0
  7698 ;;      Temps:          0       0       0       0       0       0       0
  7699 ;;      Totals:         0       0       0       0       0       0       0
  7700 ;;Total ram usage:        0 bytes
  7701 ;; Hardware stack levels used:    1
  7702 ;; Hardware stack levels required when called:    1
  7703 ;; This function calls:
  7704 ;;		_I2C_Idle
  7705 ;; This function is called by:
  7706 ;;		_ADXL355_Read_Axis
  7707 ;;		_IIC_get
  7708 ;; This function uses a non-reentrant model
  7709 ;;
  7710                           
  7711                           	psect	text39
  7712  005E9A                     __ptext39:
  7713                           	opt stack 0
  7714  005E9A                     _I2C_RepeatedStart:
  7715                           	opt stack 25
  7716                           
  7717                           ;my_i2c.c: 38: I2C_Idle();
  7718                           
  7719                           ;incstack = 0
  7720  005E9A  EC6D  F02F         	call	_I2C_Idle	;wreg free
  7721                           
  7722                           ;my_i2c.c: 40: SSPCON2bits.RSEN = 1;
  7723  005E9E  82C5               	bsf	4037,1,c	;volatile
  7724  005EA0                     l124:
  7725  005EA0  A2C5               	btfss	4037,1,c	;volatile
  7726  005EA2  0012               	return		;funcret
  7727  005EA4  D7FD               	goto	l124
  7728  005EA6                     __end_of_I2C_RepeatedStart:
  7729                           	opt stack 0
  7730                           tblptru	equ	0xFF8
  7731                           tblptrh	equ	0xFF7
  7732                           tblptrl	equ	0xFF6
  7733                           tablat	equ	0xFF5
  7734                           prodh	equ	0xFF4
  7735                           prodl	equ	0xFF3
  7736                           indf0	equ	0xFEF
  7737                           plusw0	equ	0xFEB
  7738                           fsr0h	equ	0xFEA
  7739                           fsr0l	equ	0xFE9
  7740                           wreg	equ	0xFE8
  7741                           indf2	equ	0xFDF
  7742                           postinc2	equ	0xFDE
  7743                           postdec2	equ	0xFDD
  7744                           plusw2	equ	0xFDB
  7745                           fsr2h	equ	0xFDA
  7746                           fsr2l	equ	0xFD9
  7747                           status	equ	0xFD8
  7748                           
  7749 ;; *************** function _I2C_ReadByte *****************
  7750 ;; Defined at:
  7751 ;;		line 63 in file "my_i2c.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;  acknowledge     1    wreg     unsigned char 
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;  acknowledge     1    1[COMRAM] unsigned char 
  7756 ;;  buffer_I2C      1    2[COMRAM] unsigned char 
  7757 ;; Return value:  Size  Location     Type
  7758 ;;                  1    wreg      unsigned char 
  7759 ;; Registers used:
  7760 ;;		wreg, status,2, status,0, cstack
  7761 ;; Tracked objects:
  7762 ;;		On entry : 0/0
  7763 ;;		On exit  : 0/0
  7764 ;;		Unchanged: 0/0
  7765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7766 ;;      Params:         0       0       0       0       0       0       0
  7767 ;;      Locals:         2       0       0       0       0       0       0
  7768 ;;      Temps:          0       0       0       0       0       0       0
  7769 ;;      Totals:         2       0       0       0       0       0       0
  7770 ;;Total ram usage:        2 bytes
  7771 ;; Hardware stack levels used:    1
  7772 ;; Hardware stack levels required when called:    1
  7773 ;; This function calls:
  7774 ;;		_I2C_Idle
  7775 ;; This function is called by:
  7776 ;;		_ADXL355_Read_Axis
  7777 ;;		_IIC_get
  7778 ;; This function uses a non-reentrant model
  7779 ;;
  7780                           
  7781                           	psect	text40
  7782  00613A                     __ptext40:
  7783                           	opt stack 0
  7784  00613A                     _I2C_ReadByte:
  7785                           	opt stack 25
  7786                           
  7787                           ;incstack = 0
  7788                           ;I2C_ReadByte@acknowledge stored from wreg
  7789  00613A  6E02               	movwf	I2C_ReadByte@acknowledge,c
  7790                           
  7791                           ;my_i2c.c: 67: I2C_Idle();
  7792  00613C  EC6D  F02F         	call	_I2C_Idle	;wreg free
  7793                           
  7794                           ;my_i2c.c: 69: if(((SSPCON1 & 0x0F) == 0x08) || ((SSPCON1 & 0x0F) == 0x0B))
  7795  006140  50C6               	movf	4038,w,c	;volatile
  7796  006142  0B0F               	andlw	15
  7797  006144  0A08               	xorlw	8
  7798  006146  E004               	bz	l147
  7799  006148  50C6               	movf	4038,w,c	;volatile
  7800  00614A  0B0F               	andlw	15
  7801  00614C  0A0B               	xorlw	11
  7802  00614E  E101               	bnz	l148
  7803  006150                     l147:
  7804                           
  7805                           ;my_i2c.c: 70: {
  7806                           ;my_i2c.c: 71: SSPCON2bits.RCEN = 1;
  7807  006150  86C5               	bsf	4037,3,c	;volatile
  7808  006152                     l148:
  7809  006152  A0C7               	btfss	4039,0,c	;volatile
  7810  006154  D7FE               	goto	l148
  7811                           
  7812                           ;my_i2c.c: 76: buffer_I2C = SSPBUF;
  7813  006156  CFC9 F003          	movff	4041,I2C_ReadByte@buffer_I2C	;volatile
  7814                           
  7815                           ;my_i2c.c: 78: I2C_Idle();
  7816  00615A  EC6D  F02F         	call	_I2C_Idle	;wreg free
  7817                           
  7818                           ;my_i2c.c: 80: if(acknowledge == 1)
  7819  00615E  0402               	decf	I2C_ReadByte@acknowledge,w,c
  7820  006160  E105               	bnz	l151
  7821                           
  7822                           ;my_i2c.c: 81: {
  7823                           ;my_i2c.c: 82: SSPCON2bits.ACKDT = 0;
  7824  006162  9AC5               	bcf	4037,5,c	;volatile
  7825                           
  7826                           ;my_i2c.c: 83: SSPCON2bits.ACKEN = 1;
  7827  006164  88C5               	bsf	4037,4,c	;volatile
  7828  006166                     l152:
  7829  006166  B8C5               	btfsc	4037,4,c	;volatile
  7830  006168  D7FE               	goto	l152
  7831  00616A  D004               	goto	l2838
  7832  00616C                     l151:
  7833                           
  7834                           ;my_i2c.c: 87: else
  7835                           ;my_i2c.c: 88: {
  7836                           ;my_i2c.c: 89: SSPCON2bits.ACKDT = 1;
  7837  00616C  8AC5               	bsf	4037,5,c	;volatile
  7838                           
  7839                           ;my_i2c.c: 90: SSPCON2bits.ACKEN = 1;
  7840  00616E  88C5               	bsf	4037,4,c	;volatile
  7841  006170                     l156:
  7842  006170  B8C5               	btfsc	4037,4,c	;volatile
  7843  006172  D7FE               	goto	l156
  7844  006174                     l2838:
  7845                           
  7846                           ;my_i2c.c: 93: }
  7847                           ;my_i2c.c: 95: return (buffer_I2C);
  7848  006174  5003               	movf	I2C_ReadByte@buffer_I2C,w,c
  7849  006176  0012               	return		;funcret
  7850  006178                     __end_of_I2C_ReadByte:
  7851                           	opt stack 0
  7852                           tblptru	equ	0xFF8
  7853                           tblptrh	equ	0xFF7
  7854                           tblptrl	equ	0xFF6
  7855                           tablat	equ	0xFF5
  7856                           prodh	equ	0xFF4
  7857                           prodl	equ	0xFF3
  7858                           indf0	equ	0xFEF
  7859                           plusw0	equ	0xFEB
  7860                           fsr0h	equ	0xFEA
  7861                           fsr0l	equ	0xFE9
  7862                           wreg	equ	0xFE8
  7863                           indf2	equ	0xFDF
  7864                           postinc2	equ	0xFDE
  7865                           postdec2	equ	0xFDD
  7866                           plusw2	equ	0xFDB
  7867                           fsr2h	equ	0xFDA
  7868                           fsr2l	equ	0xFD9
  7869                           status	equ	0xFD8
  7870                           
  7871 ;; *************** function _ADXL355_Init *****************
  7872 ;; Defined at:
  7873 ;;		line 19 in file "adxl355.c"
  7874 ;; Parameters:    Size  Location     Type
  7875 ;;  _range          1    wreg     unsigned char 
  7876 ;;  _power_mode     1    5[COMRAM] unsigned char 
  7877 ;; Auto vars:     Size  Location     Type
  7878 ;;  _range          1    6[COMRAM] unsigned char 
  7879 ;; Return value:  Size  Location     Type
  7880 ;;                  1    wreg      void 
  7881 ;; Registers used:
  7882 ;;		wreg, status,2, status,0, cstack
  7883 ;; Tracked objects:
  7884 ;;		On entry : 0/0
  7885 ;;		On exit  : 0/0
  7886 ;;		Unchanged: 0/0
  7887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7888 ;;      Params:         1       0       0       0       0       0       0
  7889 ;;      Locals:         1       0       0       0       0       0       0
  7890 ;;      Temps:          0       0       0       0       0       0       0
  7891 ;;      Totals:         2       0       0       0       0       0       0
  7892 ;;Total ram usage:        2 bytes
  7893 ;; Hardware stack levels used:    1
  7894 ;; Hardware stack levels required when called:    3
  7895 ;; This function calls:
  7896 ;;		_I2C_Write_Byte
  7897 ;; This function is called by:
  7898 ;;		_main
  7899 ;; This function uses a non-reentrant model
  7900 ;;
  7901                           
  7902                           	psect	text41
  7903  005F92                     __ptext41:
  7904                           	opt stack 0
  7905  005F92                     _ADXL355_Init:
  7906                           	opt stack 27
  7907                           
  7908                           ;incstack = 0
  7909                           ;ADXL355_Init@_range stored from wreg
  7910  005F92  6E07               	movwf	ADXL355_Init@_range,c
  7911                           
  7912                           ;adxl355.c: 21: I2C_Write_Byte(0xA6, 0x2C, _range);
  7913  005F94  0E2C               	movlw	44
  7914  005F96  6E03               	movwf	I2C_Write_Byte@mem_address,c
  7915  005F98  C007  F004         	movff	ADXL355_Init@_range,I2C_Write_Byte@content
  7916  005F9C  0EA6               	movlw	166
  7917  005F9E  EC91  F02F         	call	_I2C_Write_Byte
  7918                           
  7919                           ;adxl355.c: 22: I2C_Write_Byte(0xA6, 0x2D, _power_mode);
  7920  005FA2  0E2D               	movlw	45
  7921  005FA4  6E03               	movwf	I2C_Write_Byte@mem_address,c
  7922  005FA6  C006  F004         	movff	ADXL355_Init@_power_mode,I2C_Write_Byte@content
  7923  005FAA  0EA6               	movlw	166
  7924  005FAC  EF91  F02F         	goto	_I2C_Write_Byte
  7925  005FB0                     __end_of_ADXL355_Init:
  7926                           	opt stack 0
  7927                           tblptru	equ	0xFF8
  7928                           tblptrh	equ	0xFF7
  7929                           tblptrl	equ	0xFF6
  7930                           tablat	equ	0xFF5
  7931                           prodh	equ	0xFF4
  7932                           prodl	equ	0xFF3
  7933                           indf0	equ	0xFEF
  7934                           plusw0	equ	0xFEB
  7935                           fsr0h	equ	0xFEA
  7936                           fsr0l	equ	0xFE9
  7937                           wreg	equ	0xFE8
  7938                           indf2	equ	0xFDF
  7939                           postinc2	equ	0xFDE
  7940                           postdec2	equ	0xFDD
  7941                           plusw2	equ	0xFDB
  7942                           fsr2h	equ	0xFDA
  7943                           fsr2l	equ	0xFD9
  7944                           status	equ	0xFD8
  7945                           
  7946 ;; *************** function _I2C_Write_Byte *****************
  7947 ;; Defined at:
  7948 ;;		line 74 in file "adxl355.c"
  7949 ;; Parameters:    Size  Location     Type
  7950 ;;  i2c_address     1    wreg     unsigned char 
  7951 ;;  mem_address     1    2[COMRAM] unsigned char 
  7952 ;;  content         1    3[COMRAM] unsigned char 
  7953 ;; Auto vars:     Size  Location     Type
  7954 ;;  i2c_address     1    4[COMRAM] unsigned char 
  7955 ;; Return value:  Size  Location     Type
  7956 ;;                  1    wreg      void 
  7957 ;; Registers used:
  7958 ;;		wreg, status,2, status,0, cstack
  7959 ;; Tracked objects:
  7960 ;;		On entry : 0/0
  7961 ;;		On exit  : 0/0
  7962 ;;		Unchanged: 0/0
  7963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7964 ;;      Params:         2       0       0       0       0       0       0
  7965 ;;      Locals:         1       0       0       0       0       0       0
  7966 ;;      Temps:          0       0       0       0       0       0       0
  7967 ;;      Totals:         3       0       0       0       0       0       0
  7968 ;;Total ram usage:        3 bytes
  7969 ;; Hardware stack levels used:    1
  7970 ;; Hardware stack levels required when called:    2
  7971 ;; This function calls:
  7972 ;;		_I2C_Start
  7973 ;;		_I2C_Stop
  7974 ;;		_I2C_WriteByte
  7975 ;; This function is called by:
  7976 ;;		_ADXL355_Init
  7977 ;; This function uses a non-reentrant model
  7978 ;;
  7979                           
  7980                           	psect	text42
  7981  005F22                     __ptext42:
  7982                           	opt stack 0
  7983  005F22                     _I2C_Write_Byte:
  7984                           	opt stack 27
  7985                           
  7986                           ;incstack = 0
  7987                           ;I2C_Write_Byte@i2c_address stored from wreg
  7988  005F22  6E05               	movwf	I2C_Write_Byte@i2c_address,c
  7989                           
  7990                           ;adxl355.c: 76: I2C_Start();
  7991  005F24  EC41  F02F         	call	_I2C_Start	;wreg free
  7992                           
  7993                           ;adxl355.c: 77: I2C_WriteByte(i2c_address);
  7994  005F28  5005               	movf	I2C_Write_Byte@i2c_address,w,c
  7995  005F2A  EC35  F030         	call	_I2C_WriteByte
  7996                           
  7997                           ;adxl355.c: 78: I2C_WriteByte(mem_address);
  7998  005F2E  5003               	movf	I2C_Write_Byte@mem_address,w,c
  7999  005F30  EC35  F030         	call	_I2C_WriteByte
  8000                           
  8001                           ;adxl355.c: 79: I2C_WriteByte(content);
  8002  005F34  5004               	movf	I2C_Write_Byte@content,w,c
  8003  005F36  EC35  F030         	call	_I2C_WriteByte
  8004                           
  8005                           ;adxl355.c: 80: I2C_Stop();
  8006  005F3A  EF47  F02F         	goto	_I2C_Stop	;wreg free
  8007  005F3E                     __end_of_I2C_Write_Byte:
  8008                           	opt stack 0
  8009                           tblptru	equ	0xFF8
  8010                           tblptrh	equ	0xFF7
  8011                           tblptrl	equ	0xFF6
  8012                           tablat	equ	0xFF5
  8013                           prodh	equ	0xFF4
  8014                           prodl	equ	0xFF3
  8015                           indf0	equ	0xFEF
  8016                           plusw0	equ	0xFEB
  8017                           fsr0h	equ	0xFEA
  8018                           fsr0l	equ	0xFE9
  8019                           wreg	equ	0xFE8
  8020                           indf2	equ	0xFDF
  8021                           postinc2	equ	0xFDE
  8022                           postdec2	equ	0xFDD
  8023                           plusw2	equ	0xFDB
  8024                           fsr2h	equ	0xFDA
  8025                           fsr2l	equ	0xFD9
  8026                           status	equ	0xFD8
  8027                           
  8028 ;; *************** function _I2C_WriteByte *****************
  8029 ;; Defined at:
  8030 ;;		line 98 in file "my_i2c.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;  data_out        1    wreg     unsigned char 
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;  data_out        1    1[COMRAM] unsigned char 
  8035 ;; Return value:  Size  Location     Type
  8036 ;;                  1    wreg      unsigned char 
  8037 ;; Registers used:
  8038 ;;		wreg, status,2, status,0, cstack
  8039 ;; Tracked objects:
  8040 ;;		On entry : 0/0
  8041 ;;		On exit  : 0/0
  8042 ;;		Unchanged: 0/0
  8043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8044 ;;      Params:         0       0       0       0       0       0       0
  8045 ;;      Locals:         1       0       0       0       0       0       0
  8046 ;;      Temps:          0       0       0       0       0       0       0
  8047 ;;      Totals:         1       0       0       0       0       0       0
  8048 ;;Total ram usage:        1 bytes
  8049 ;; Hardware stack levels used:    1
  8050 ;; Hardware stack levels required when called:    1
  8051 ;; This function calls:
  8052 ;;		_I2C_Idle
  8053 ;; This function is called by:
  8054 ;;		_ADXL355_Read_Axis
  8055 ;;		_I2C_Write_Byte
  8056 ;;		_IIC_put
  8057 ;;		_IIC_get
  8058 ;; This function uses a non-reentrant model
  8059 ;;
  8060                           
  8061                           	psect	text43
  8062  00606A                     __ptext43:
  8063                           	opt stack 0
  8064  00606A                     _I2C_WriteByte:
  8065                           	opt stack 26
  8066                           
  8067                           ;incstack = 0
  8068                           ;I2C_WriteByte@data_out stored from wreg
  8069  00606A  6E02               	movwf	I2C_WriteByte@data_out,c
  8070                           
  8071                           ;my_i2c.c: 100: I2C_Idle();
  8072  00606C  EC6D  F02F         	call	_I2C_Idle	;wreg free
  8073                           
  8074                           ;my_i2c.c: 102: SSPBUF = data_out;
  8075  006070  C002  FFC9         	movff	I2C_WriteByte@data_out,4041	;volatile
  8076                           
  8077                           ;my_i2c.c: 104: if(SSPCON1bits.WCOL)
  8078  006074  BEC6               	btfsc	4038,7,c	;volatile
  8079  006076  0012               	return	
  8080                           
  8081                           ;my_i2c.c: 108: else
  8082                           ;my_i2c.c: 109: {
  8083                           ;my_i2c.c: 110: if(((SSPCON1 & 0x0F) == 0x08) || ((SSPCON1 & 0x0F) == 0x0B))
  8084  006078  50C6               	movf	4038,w,c	;volatile
  8085  00607A  0B0F               	andlw	15
  8086  00607C  0A08               	xorlw	8
  8087  00607E  E005               	bz	l168
  8088  006080  50C6               	movf	4038,w,c	;volatile
  8089  006082  0B0F               	andlw	15
  8090  006084  0A0B               	xorlw	11
  8091  006086  A4D8               	btfss	status,2,c
  8092  006088  0012               	return	
  8093  00608A                     l168:
  8094  00608A  B0C7               	btfsc	4039,0,c	;volatile
  8095  00608C  D7FE               	goto	l168
  8096                           
  8097                           ;my_i2c.c: 114: I2C_Idle();
  8098  00608E  EC6D  F02F         	call	_I2C_Idle	;wreg free
  8099                           
  8100                           ;my_i2c.c: 116: if(SSPCON2bits.ACKSTAT)
  8101  006092  50C5               	movf	4037,w,c	;volatile
  8102  006094  0012               	return		;funcret
  8103  006096                     __end_of_I2C_WriteByte:
  8104                           	opt stack 0
  8105                           tblptru	equ	0xFF8
  8106                           tblptrh	equ	0xFF7
  8107                           tblptrl	equ	0xFF6
  8108                           tablat	equ	0xFF5
  8109                           prodh	equ	0xFF4
  8110                           prodl	equ	0xFF3
  8111                           indf0	equ	0xFEF
  8112                           plusw0	equ	0xFEB
  8113                           fsr0h	equ	0xFEA
  8114                           fsr0l	equ	0xFE9
  8115                           wreg	equ	0xFE8
  8116                           indf2	equ	0xFDF
  8117                           postinc2	equ	0xFDE
  8118                           postdec2	equ	0xFDD
  8119                           plusw2	equ	0xFDB
  8120                           fsr2h	equ	0xFDA
  8121                           fsr2l	equ	0xFD9
  8122                           status	equ	0xFD8
  8123                           
  8124 ;; *************** function _I2C_Stop *****************
  8125 ;; Defined at:
  8126 ;;		line 45 in file "my_i2c.c"
  8127 ;; Parameters:    Size  Location     Type
  8128 ;;		None
  8129 ;; Auto vars:     Size  Location     Type
  8130 ;;		None
  8131 ;; Return value:  Size  Location     Type
  8132 ;;                  1    wreg      void 
  8133 ;; Registers used:
  8134 ;;		wreg, status,2, status,0, cstack
  8135 ;; Tracked objects:
  8136 ;;		On entry : 0/0
  8137 ;;		On exit  : 0/0
  8138 ;;		Unchanged: 0/0
  8139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8140 ;;      Params:         0       0       0       0       0       0       0
  8141 ;;      Locals:         0       0       0       0       0       0       0
  8142 ;;      Temps:          0       0       0       0       0       0       0
  8143 ;;      Totals:         0       0       0       0       0       0       0
  8144 ;;Total ram usage:        0 bytes
  8145 ;; Hardware stack levels used:    1
  8146 ;; Hardware stack levels required when called:    1
  8147 ;; This function calls:
  8148 ;;		_I2C_Idle
  8149 ;; This function is called by:
  8150 ;;		_ADXL355_Read_Axis
  8151 ;;		_I2C_Write_Byte
  8152 ;;		_IIC_put
  8153 ;;		_IIC_get
  8154 ;; This function uses a non-reentrant model
  8155 ;;
  8156                           
  8157                           	psect	text44
  8158  005E8E                     __ptext44:
  8159                           	opt stack 0
  8160  005E8E                     _I2C_Stop:
  8161                           	opt stack 26
  8162                           
  8163                           ;my_i2c.c: 47: I2C_Idle();
  8164                           
  8165                           ;incstack = 0
  8166  005E8E  EC6D  F02F         	call	_I2C_Idle	;wreg free
  8167                           
  8168                           ;my_i2c.c: 48: SSPCON2bits.PEN = 1;
  8169  005E92  84C5               	bsf	4037,2,c	;volatile
  8170  005E94                     l130:
  8171  005E94  A4C5               	btfss	4037,2,c	;volatile
  8172  005E96  0012               	return		;funcret
  8173  005E98  D7FD               	goto	l130
  8174  005E9A                     __end_of_I2C_Stop:
  8175                           	opt stack 0
  8176                           tblptru	equ	0xFF8
  8177                           tblptrh	equ	0xFF7
  8178                           tblptrl	equ	0xFF6
  8179                           tablat	equ	0xFF5
  8180                           prodh	equ	0xFF4
  8181                           prodl	equ	0xFF3
  8182                           indf0	equ	0xFEF
  8183                           plusw0	equ	0xFEB
  8184                           fsr0h	equ	0xFEA
  8185                           fsr0l	equ	0xFE9
  8186                           wreg	equ	0xFE8
  8187                           indf2	equ	0xFDF
  8188                           postinc2	equ	0xFDE
  8189                           postdec2	equ	0xFDD
  8190                           plusw2	equ	0xFDB
  8191                           fsr2h	equ	0xFDA
  8192                           fsr2l	equ	0xFD9
  8193                           status	equ	0xFD8
  8194                           
  8195 ;; *************** function _I2C_Start *****************
  8196 ;; Defined at:
  8197 ;;		line 27 in file "my_i2c.c"
  8198 ;; Parameters:    Size  Location     Type
  8199 ;;		None
  8200 ;; Auto vars:     Size  Location     Type
  8201 ;;		None
  8202 ;; Return value:  Size  Location     Type
  8203 ;;                  1    wreg      void 
  8204 ;; Registers used:
  8205 ;;		wreg, status,2, status,0, cstack
  8206 ;; Tracked objects:
  8207 ;;		On entry : 0/0
  8208 ;;		On exit  : 0/0
  8209 ;;		Unchanged: 0/0
  8210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8211 ;;      Params:         0       0       0       0       0       0       0
  8212 ;;      Locals:         0       0       0       0       0       0       0
  8213 ;;      Temps:          0       0       0       0       0       0       0
  8214 ;;      Totals:         0       0       0       0       0       0       0
  8215 ;;Total ram usage:        0 bytes
  8216 ;; Hardware stack levels used:    1
  8217 ;; Hardware stack levels required when called:    1
  8218 ;; This function calls:
  8219 ;;		_I2C_Idle
  8220 ;; This function is called by:
  8221 ;;		_ADXL355_Read_Axis
  8222 ;;		_I2C_Write_Byte
  8223 ;;		_IIC_put
  8224 ;;		_IIC_get
  8225 ;; This function uses a non-reentrant model
  8226 ;;
  8227                           
  8228                           	psect	text45
  8229  005E82                     __ptext45:
  8230                           	opt stack 0
  8231  005E82                     _I2C_Start:
  8232                           	opt stack 26
  8233                           
  8234                           ;my_i2c.c: 29: I2C_Idle();
  8235                           
  8236                           ;incstack = 0
  8237  005E82  EC6D  F02F         	call	_I2C_Idle	;wreg free
  8238                           
  8239                           ;my_i2c.c: 31: SSPCON2bits.SEN = 1;
  8240  005E86  80C5               	bsf	4037,0,c	;volatile
  8241  005E88                     l118:
  8242  005E88  A0C5               	btfss	4037,0,c	;volatile
  8243  005E8A  0012               	return		;funcret
  8244  005E8C  D7FD               	goto	l118
  8245  005E8E                     __end_of_I2C_Start:
  8246                           	opt stack 0
  8247                           tblptru	equ	0xFF8
  8248                           tblptrh	equ	0xFF7
  8249                           tblptrl	equ	0xFF6
  8250                           tablat	equ	0xFF5
  8251                           prodh	equ	0xFF4
  8252                           prodl	equ	0xFF3
  8253                           indf0	equ	0xFEF
  8254                           plusw0	equ	0xFEB
  8255                           fsr0h	equ	0xFEA
  8256                           fsr0l	equ	0xFE9
  8257                           wreg	equ	0xFE8
  8258                           indf2	equ	0xFDF
  8259                           postinc2	equ	0xFDE
  8260                           postdec2	equ	0xFDD
  8261                           plusw2	equ	0xFDB
  8262                           fsr2h	equ	0xFDA
  8263                           fsr2l	equ	0xFD9
  8264                           status	equ	0xFD8
  8265                           
  8266 ;; *************** function _I2C_Idle *****************
  8267 ;; Defined at:
  8268 ;;		line 52 in file "my_i2c.c"
  8269 ;; Parameters:    Size  Location     Type
  8270 ;;		None
  8271 ;; Auto vars:     Size  Location     Type
  8272 ;;		None
  8273 ;; Return value:  Size  Location     Type
  8274 ;;                  1    wreg      void 
  8275 ;; Registers used:
  8276 ;;		wreg, status,2, status,0
  8277 ;; Tracked objects:
  8278 ;;		On entry : 0/0
  8279 ;;		On exit  : 0/0
  8280 ;;		Unchanged: 0/0
  8281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8282 ;;      Params:         0       0       0       0       0       0       0
  8283 ;;      Locals:         0       0       0       0       0       0       0
  8284 ;;      Temps:          1       0       0       0       0       0       0
  8285 ;;      Totals:         1       0       0       0       0       0       0
  8286 ;;Total ram usage:        1 bytes
  8287 ;; Hardware stack levels used:    1
  8288 ;; This function calls:
  8289 ;;		Nothing
  8290 ;; This function is called by:
  8291 ;;		_I2C_Start
  8292 ;;		_I2C_RepeatedStart
  8293 ;;		_I2C_Stop
  8294 ;;		_I2C_ReadByte
  8295 ;;		_I2C_WriteByte
  8296 ;; This function uses a non-reentrant model
  8297 ;;
  8298                           
  8299                           	psect	text46
  8300  005EDA                     __ptext46:
  8301                           	opt stack 0
  8302  005EDA                     _I2C_Idle:
  8303                           	opt stack 26
  8304  005EDA                     l2810:
  8305  005EDA  A4C7               	btfss	4039,2,c	;volatile
  8306  005EDC  D003               	goto	u2460
  8307  005EDE  6A01               	clrf	??_I2C_Idle& (0+255),c
  8308  005EE0  2A01               	incf	??_I2C_Idle& (0+255),f,c
  8309  005EE2  D001               	goto	u2468
  8310  005EE4                     u2460:
  8311  005EE4  6A01               	clrf	??_I2C_Idle& (0+255),c
  8312  005EE6                     u2468:
  8313  005EE6  50C5               	movf	4037,w,c	;volatile
  8314  005EE8  0B1F               	andlw	31
  8315  005EEA  1001               	iorwf	??_I2C_Idle,w,c
  8316  005EEC  E1F6               	bnz	l2810
  8317  005EEE  0012               	return		;funcret
  8318  005EF0                     __end_of_I2C_Idle:
  8319                           	opt stack 0
  8320                           tblptru	equ	0xFF8
  8321                           tblptrh	equ	0xFF7
  8322                           tblptrl	equ	0xFF6
  8323                           tablat	equ	0xFF5
  8324                           prodh	equ	0xFF4
  8325                           prodl	equ	0xFF3
  8326                           indf0	equ	0xFEF
  8327                           plusw0	equ	0xFEB
  8328                           fsr0h	equ	0xFEA
  8329                           fsr0l	equ	0xFE9
  8330                           wreg	equ	0xFE8
  8331                           indf2	equ	0xFDF
  8332                           postinc2	equ	0xFDE
  8333                           postdec2	equ	0xFDD
  8334                           plusw2	equ	0xFDB
  8335                           fsr2h	equ	0xFDA
  8336                           fsr2l	equ	0xFD9
  8337                           status	equ	0xFD8
  8338                           
  8339 ;; *************** function _ADXL355_Convert_G *****************
  8340 ;; Defined at:
  8341 ;;		line 83 in file "adxl355.c"
  8342 ;; Parameters:    Size  Location     Type
  8343 ;;  raw_value      18   97[COMRAM] struct axis_value
  8344 ;; Auto vars:     Size  Location     Type
  8345 ;;  g              12  115[COMRAM] struct g_value
  8346 ;; Return value:  Size  Location     Type
  8347 ;;                  12   97[COMRAM] struct g_value
  8348 ;; Registers used:
  8349 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  8350 ;; Tracked objects:
  8351 ;;		On entry : 0/0
  8352 ;;		On exit  : 0/0
  8353 ;;		Unchanged: 0/0
  8354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8355 ;;      Params:        18       0       0       0       0       0       0
  8356 ;;      Locals:        12       0       0       0       0       0       0
  8357 ;;      Temps:          0       0       0       0       0       0       0
  8358 ;;      Totals:        30       0       0       0       0       0       0
  8359 ;;Total ram usage:       30 bytes
  8360 ;; Hardware stack levels used:    1
  8361 ;; Hardware stack levels required when called:    1
  8362 ;; This function calls:
  8363 ;;		___fldiv
  8364 ;;		___xxtofl
  8365 ;; This function is called by:
  8366 ;;		_main
  8367 ;; This function uses a non-reentrant model
  8368 ;;
  8369                           
  8370                           	psect	text47
  8371  0064F6                     __ptext47:
  8372                           	opt stack 0
  8373  0064F6                     _ADXL355_Convert_G:
  8374                           	opt stack 29
  8375                           
  8376                           ;adxl355.c: 85: struct g_value g;
  8377                           ;adxl355.c: 87: g.x_axis = raw_value.x_axis / 256000.0;
  8378                           
  8379                           ;incstack = 0
  8380  0064F6  C062  F001         	movff	ADXL355_Convert_G@raw_value,___xxtofl@val
  8381  0064FA  C063  F002         	movff	ADXL355_Convert_G@raw_value+1,___xxtofl@val+1
  8382  0064FE  C064  F003         	movff	ADXL355_Convert_G@raw_value+2,___xxtofl@val+2
  8383  006502  C065  F004         	movff	ADXL355_Convert_G@raw_value+3,___xxtofl@val+3
  8384  006506  0E01               	movlw	1
  8385  006508  ECF7  F033         	call	___xxtofl
  8386  00650C  D840               	call	PL10	;call to abstracted procedure
  8387  00650E  EC35  F035         	call	___fldiv	;wreg free
  8388  006512  C049  F074         	movff	?___fldiv,ADXL355_Convert_G@g
  8389  006516  C04A  F075         	movff	?___fldiv+1,ADXL355_Convert_G@g+1
  8390  00651A  C04B  F076         	movff	?___fldiv+2,ADXL355_Convert_G@g+2
  8391  00651E  C04C  F077         	movff	?___fldiv+3,ADXL355_Convert_G@g+3
  8392                           
  8393                           ;adxl355.c: 88: g.y_axis = raw_value.y_axis / 256000.0;
  8394  006522  C066  F001         	movff	ADXL355_Convert_G@raw_value+4,___xxtofl@val
  8395  006526  C067  F002         	movff	ADXL355_Convert_G@raw_value+5,___xxtofl@val+1
  8396  00652A  C068  F003         	movff	ADXL355_Convert_G@raw_value+6,___xxtofl@val+2
  8397  00652E  C069  F004         	movff	ADXL355_Convert_G@raw_value+7,___xxtofl@val+3
  8398  006532  0E01               	movlw	1
  8399  006534  ECF7  F033         	call	___xxtofl
  8400  006538  D82A               	call	PL10	;call to abstracted procedure
  8401  00653A  EC35  F035         	call	___fldiv	;wreg free
  8402  00653E  C049  F078         	movff	?___fldiv,ADXL355_Convert_G@g+4
  8403  006542  C04A  F079         	movff	?___fldiv+1,ADXL355_Convert_G@g+5
  8404  006546  C04B  F07A         	movff	?___fldiv+2,ADXL355_Convert_G@g+6
  8405  00654A  C04C  F07B         	movff	?___fldiv+3,ADXL355_Convert_G@g+7
  8406                           
  8407                           ;adxl355.c: 89: g.z_axis = raw_value.z_axis / 256000.0;
  8408  00654E  C06A  F001         	movff	ADXL355_Convert_G@raw_value+8,___xxtofl@val
  8409  006552  C06B  F002         	movff	ADXL355_Convert_G@raw_value+9,___xxtofl@val+1
  8410  006556  C06C  F003         	movff	ADXL355_Convert_G@raw_value+10,___xxtofl@val+2
  8411  00655A  C06D  F004         	movff	ADXL355_Convert_G@raw_value+11,___xxtofl@val+3
  8412  00655E  0E01               	movlw	1
  8413  006560  ECF7  F033         	call	___xxtofl
  8414  006564  D814               	call	PL10	;call to abstracted procedure
  8415  006566  EC35  F035         	call	___fldiv	;wreg free
  8416  00656A  C049  F07C         	movff	?___fldiv,ADXL355_Convert_G@g+8
  8417  00656E  C04A  F07D         	movff	?___fldiv+1,ADXL355_Convert_G@g+9
  8418  006572  C04B  F07E         	movff	?___fldiv+2,ADXL355_Convert_G@g+10
  8419  006576  C04C  F07F         	movff	?___fldiv+3,ADXL355_Convert_G@g+11
  8420                           
  8421                           ;adxl355.c: 91: return g;
  8422  00657A  EE20  F074         	lfsr	2,ADXL355_Convert_G@g
  8423  00657E  EE00  F062         	lfsr	0,?_ADXL355_Convert_G
  8424  006582  0E0B               	movlw	11
  8425  006584                     u4261:
  8426  006584  CFDB FFEB          	movff	plusw2,plusw0
  8427  006588  06E8               	decf	wreg,f,c
  8428  00658A  E2FC               	bc	u4261
  8429  00658C  0012               	return		;funcret
  8430  00658E                     __end_of_ADXL355_Convert_G:
  8431                           	opt stack 0
  8432  00658E                     PL10:
  8433                           	opt stack 29
  8434  00658E  C001  F049         	movff	?___xxtofl,___fldiv@b
  8435  006592  C002  F04A         	movff	?___xxtofl+1,___fldiv@b+1
  8436  006596  C003  F04B         	movff	?___xxtofl+2,___fldiv@b+2
  8437  00659A  C004  F04C         	movff	?___xxtofl+3,___fldiv@b+3
  8438  00659E  6A4D               	clrf	___fldiv@a,c
  8439  0065A0  6A4E               	clrf	___fldiv@a+1,c
  8440  0065A2  0E7A               	movlw	122
  8441  0065A4  6E4F               	movwf	___fldiv@a+2,c
  8442  0065A6  0E48               	movlw	72
  8443  0065A8  6E50               	movwf	___fldiv@a+3,c
  8444  0065AA  0C48               	retlw	72
  8445  0065AC                     __end_ofPL10:
  8446                           	opt stack 0
  8447                           tblptru	equ	0xFF8
  8448                           tblptrh	equ	0xFF7
  8449                           tblptrl	equ	0xFF6
  8450                           tablat	equ	0xFF5
  8451                           prodh	equ	0xFF4
  8452                           prodl	equ	0xFF3
  8453                           indf0	equ	0xFEF
  8454                           plusw0	equ	0xFEB
  8455                           fsr0h	equ	0xFEA
  8456                           fsr0l	equ	0xFE9
  8457                           wreg	equ	0xFE8
  8458                           indf2	equ	0xFDF
  8459                           postinc2	equ	0xFDE
  8460                           postdec2	equ	0xFDD
  8461                           plusw2	equ	0xFDB
  8462                           fsr2h	equ	0xFDA
  8463                           fsr2l	equ	0xFD9
  8464                           status	equ	0xFD8
  8465                           
  8466 ;; *************** function ___xxtofl *****************
  8467 ;; Defined at:
  8468 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\xxtofl.c"
  8469 ;; Parameters:    Size  Location     Type
  8470 ;;  sign            1    wreg     unsigned char 
  8471 ;;  val             4    0[COMRAM] long 
  8472 ;; Auto vars:     Size  Location     Type
  8473 ;;  sign            1    8[COMRAM] unsigned char 
  8474 ;;  arg             4   10[COMRAM] unsigned long 
  8475 ;;  exp             1    9[COMRAM] unsigned char 
  8476 ;; Return value:  Size  Location     Type
  8477 ;;                  4    0[COMRAM] unsigned char 
  8478 ;; Registers used:
  8479 ;;		wreg, status,2, status,0
  8480 ;; Tracked objects:
  8481 ;;		On entry : 0/0
  8482 ;;		On exit  : 0/0
  8483 ;;		Unchanged: 0/0
  8484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8485 ;;      Params:         4       0       0       0       0       0       0
  8486 ;;      Locals:         6       0       0       0       0       0       0
  8487 ;;      Temps:          4       0       0       0       0       0       0
  8488 ;;      Totals:        14       0       0       0       0       0       0
  8489 ;;Total ram usage:       14 bytes
  8490 ;; Hardware stack levels used:    1
  8491 ;; This function calls:
  8492 ;;		Nothing
  8493 ;; This function is called by:
  8494 ;;		_ADXL355_Read_Axis
  8495 ;;		_ADXL355_Convert_G
  8496 ;;		_sprintf
  8497 ;; This function uses a non-reentrant model
  8498 ;;
  8499                           
  8500                           	psect	text48
  8501  0067EE                     __ptext48:
  8502                           	opt stack 0
  8503  0067EE                     ___xxtofl:
  8504                           	opt stack 29
  8505                           
  8506                           ;incstack = 0
  8507                           ;___xxtofl@sign stored from wreg
  8508  0067EE  6E09               	movwf	___xxtofl@sign,c
  8509  0067F0  5009               	movf	___xxtofl@sign,w,c
  8510  0067F2  E01C               	bz	l1185
  8511  0067F4  AE04               	btfss	___xxtofl@val+3,7,c
  8512  0067F6  D01A               	goto	l1185
  8513  0067F8  C001  F005         	movff	___xxtofl@val,??___xxtofl
  8514  0067FC  C002  F006         	movff	___xxtofl@val+1,??___xxtofl+1
  8515  006800  C003  F007         	movff	___xxtofl@val+2,??___xxtofl+2
  8516  006804  C004  F008         	movff	___xxtofl@val+3,??___xxtofl+3
  8517  006808  1E05               	comf	??___xxtofl,f,c
  8518  00680A  1E06               	comf	??___xxtofl+1,f,c
  8519  00680C  1E07               	comf	??___xxtofl+2,f,c
  8520  00680E  1E08               	comf	??___xxtofl+3,f,c
  8521  006810  2A05               	incf	??___xxtofl,f,c
  8522  006812  0E00               	movlw	0
  8523  006814  2206               	addwfc	??___xxtofl+1,f,c
  8524  006816  2207               	addwfc	??___xxtofl+2,f,c
  8525  006818  2208               	addwfc	??___xxtofl+3,f,c
  8526  00681A  C005  F00B         	movff	??___xxtofl,___xxtofl@arg
  8527  00681E  C006  F00C         	movff	??___xxtofl+1,___xxtofl@arg+1
  8528  006822  C007  F00D         	movff	??___xxtofl+2,___xxtofl@arg+2
  8529  006826  C008  F00E         	movff	??___xxtofl+3,___xxtofl@arg+3
  8530  00682A  D008               	goto	l3780
  8531  00682C                     l1185:
  8532  00682C  C001  F00B         	movff	___xxtofl@val,___xxtofl@arg
  8533  006830  C002  F00C         	movff	___xxtofl@val+1,___xxtofl@arg+1
  8534  006834  C003  F00D         	movff	___xxtofl@val+2,___xxtofl@arg+2
  8535  006838  C004  F00E         	movff	___xxtofl@val+3,___xxtofl@arg+3
  8536  00683C                     l3780:
  8537  00683C  5001               	movf	___xxtofl@val,w,c
  8538  00683E  1002               	iorwf	___xxtofl@val+1,w,c
  8539  006840  1003               	iorwf	___xxtofl@val+2,w,c
  8540  006842  1004               	iorwf	___xxtofl@val+3,w,c
  8541  006844  E105               	bnz	l3784
  8542  006846  6A01               	clrf	?___xxtofl,c
  8543  006848  6A02               	clrf	?___xxtofl+1,c
  8544  00684A  6A03               	clrf	?___xxtofl+2,c
  8545  00684C  6A04               	clrf	?___xxtofl+3,c
  8546  00684E  0012               	return	
  8547  006850                     l3784:
  8548  006850  0E96               	movlw	150
  8549  006852  6E0A               	movwf	___xxtofl@exp,c
  8550  006854  D002               	goto	l3788
  8551  006856                     l3786:
  8552  006856  2A0A               	incf	___xxtofl@exp,f,c
  8553  006858  D84C               	call	PL122	;call to abstracted procedure
  8554  00685A                     l3788:
  8555  00685A  6A05               	clrf	??___xxtofl& (0+255),c
  8556  00685C  6A06               	clrf	(??___xxtofl+1)& (0+255),c
  8557  00685E  6A07               	clrf	(??___xxtofl+2)& (0+255),c
  8558  006860  0EFE               	movlw	254
  8559  006862  140E               	andwf	___xxtofl@arg+3,w,c
  8560  006864  D840               	call	PL120	;call to abstracted procedure
  8561  006866  E008               	bz	l1192
  8562  006868  D7F6               	goto	l3786
  8563  00686A                     l3790:
  8564  00686A  2A0A               	incf	___xxtofl@exp,f,c
  8565  00686C  2A0B               	incf	___xxtofl@arg,f,c
  8566  00686E  0E00               	movlw	0
  8567  006870  220C               	addwfc	___xxtofl@arg+1,f,c
  8568  006872  220D               	addwfc	___xxtofl@arg+2,f,c
  8569  006874  220E               	addwfc	___xxtofl@arg+3,f,c
  8570  006876  D83D               	call	PL122	;call to abstracted procedure
  8571  006878                     l1192:
  8572  006878  6A05               	clrf	??___xxtofl& (0+255),c
  8573  00687A  6A06               	clrf	(??___xxtofl+1)& (0+255),c
  8574  00687C  6A07               	clrf	(??___xxtofl+2)& (0+255),c
  8575  00687E  500E               	movf	___xxtofl@arg+3,w,c
  8576  006880  D832               	call	PL120	;call to abstracted procedure
  8577  006882  E007               	bz	l3798
  8578  006884  D7F2               	goto	l3790
  8579  006886                     l3796:
  8580  006886  060A               	decf	___xxtofl@exp,f,c
  8581  006888  90D8               	bcf	status,0,c
  8582  00688A  360B               	rlcf	___xxtofl@arg,f,c
  8583  00688C  360C               	rlcf	___xxtofl@arg+1,f,c
  8584  00688E  360D               	rlcf	___xxtofl@arg+2,f,c
  8585  006890  360E               	rlcf	___xxtofl@arg+3,f,c
  8586  006892                     l3798:
  8587  006892  BE0D               	btfsc	___xxtofl@arg+2,7,c
  8588  006894  D003               	goto	l1199
  8589  006896  0E02               	movlw	2
  8590  006898  600A               	cpfslt	___xxtofl@exp,c
  8591  00689A  D7F5               	goto	l3796
  8592  00689C                     l1199:
  8593  00689C  B00A               	btfsc	___xxtofl@exp,0,c
  8594  00689E  D002               	goto	l1200
  8595  0068A0  0E7F               	movlw	127
  8596  0068A2  160D               	andwf	___xxtofl@arg+2,f,c
  8597  0068A4                     l1200:
  8598  0068A4  90D8               	bcf	status,0,c
  8599  0068A6  320A               	rrcf	___xxtofl@exp,f,c
  8600  0068A8  C00A  F005         	movff	___xxtofl@exp,??___xxtofl
  8601  0068AC  6A06               	clrf	(??___xxtofl+1)& (0+255),c
  8602  0068AE  6A07               	clrf	(??___xxtofl+2)& (0+255),c
  8603  0068B0  6A08               	clrf	(??___xxtofl+3)& (0+255),c
  8604  0068B2  C005  F008         	movff	??___xxtofl,??___xxtofl+3
  8605  0068B6  6A07               	clrf	??___xxtofl+2,c
  8606  0068B8  6A06               	clrf	??___xxtofl+1,c
  8607  0068BA  6A05               	clrf	??___xxtofl,c
  8608  0068BC  5005               	movf	??___xxtofl,w,c
  8609  0068BE  120B               	iorwf	___xxtofl@arg,f,c
  8610  0068C0  5006               	movf	??___xxtofl+1,w,c
  8611  0068C2  120C               	iorwf	___xxtofl@arg+1,f,c
  8612  0068C4  5007               	movf	??___xxtofl+2,w,c
  8613  0068C6  120D               	iorwf	___xxtofl@arg+2,f,c
  8614  0068C8  5008               	movf	??___xxtofl+3,w,c
  8615  0068CA  120E               	iorwf	___xxtofl@arg+3,f,c
  8616  0068CC  5009               	movf	___xxtofl@sign,w,c
  8617  0068CE  E002               	bz	l3810
  8618  0068D0  BE04               	btfsc	___xxtofl@val+3,7,c
  8619  0068D2  8E0E               	bsf	___xxtofl@arg+3,7,c
  8620  0068D4                     l3810:
  8621  0068D4  C00B  F001         	movff	___xxtofl@arg,?___xxtofl
  8622  0068D8  C00C  F002         	movff	___xxtofl@arg+1,?___xxtofl+1
  8623  0068DC  C00D  F003         	movff	___xxtofl@arg+2,?___xxtofl+2
  8624  0068E0  C00E  F004         	movff	___xxtofl@arg+3,?___xxtofl+3
  8625  0068E4  0012               	return		;funcret
  8626  0068E6                     __end_of___xxtofl:
  8627                           	opt stack 0
  8628  0068E6                     PL120:
  8629                           	opt stack 29
  8630  0068E6  6E08               	movwf	(??___xxtofl+3)& (0+255),c
  8631  0068E8  5005               	movf	??___xxtofl,w,c
  8632  0068EA  1006               	iorwf	??___xxtofl+1,w,c
  8633  0068EC  1007               	iorwf	??___xxtofl+2,w,c
  8634  0068EE  1008               	iorwf	??___xxtofl+3,w,c
  8635  0068F0  0012               	return	
  8636  0068F2                     __end_ofPL120:
  8637                           	opt stack 0
  8638  0068F2                     PL122:
  8639                           	opt stack 29
  8640  0068F2  90D8               	bcf	status,0,c
  8641  0068F4  320E               	rrcf	___xxtofl@arg+3,f,c
  8642  0068F6  320D               	rrcf	___xxtofl@arg+2,f,c
  8643  0068F8  320C               	rrcf	___xxtofl@arg+1,f,c
  8644  0068FA  320B               	rrcf	___xxtofl@arg,f,c
  8645  0068FC  0012               	return	
  8646  0068FE                     __end_ofPL122:
  8647                           	opt stack 0
  8648                           tblptru	equ	0xFF8
  8649                           tblptrh	equ	0xFF7
  8650                           tblptrl	equ	0xFF6
  8651                           tablat	equ	0xFF5
  8652                           prodh	equ	0xFF4
  8653                           prodl	equ	0xFF3
  8654                           indf0	equ	0xFEF
  8655                           plusw0	equ	0xFEB
  8656                           fsr0h	equ	0xFEA
  8657                           fsr0l	equ	0xFE9
  8658                           wreg	equ	0xFE8
  8659                           indf2	equ	0xFDF
  8660                           postinc2	equ	0xFDE
  8661                           postdec2	equ	0xFDD
  8662                           plusw2	equ	0xFDB
  8663                           fsr2h	equ	0xFDA
  8664                           fsr2l	equ	0xFD9
  8665                           status	equ	0xFD8
  8666                           
  8667 ;; *************** function ___fldiv *****************
  8668 ;; Defined at:
  8669 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprcdiv.c"
  8670 ;; Parameters:    Size  Location     Type
  8671 ;;  b               4   72[COMRAM] unsigned char 
  8672 ;;  a               4   76[COMRAM] unsigned char 
  8673 ;; Auto vars:     Size  Location     Type
  8674 ;;  grs             4   91[COMRAM] unsigned long 
  8675 ;;  rem             4   85[COMRAM] unsigned long 
  8676 ;;  new_exp         2   89[COMRAM] int 
  8677 ;;  aexp            1   96[COMRAM] unsigned char 
  8678 ;;  bexp            1   95[COMRAM] unsigned char 
  8679 ;;  sign            1   84[COMRAM] unsigned char 
  8680 ;; Return value:  Size  Location     Type
  8681 ;;                  4   72[COMRAM] unsigned char 
  8682 ;; Registers used:
  8683 ;;		wreg, status,2, status,0
  8684 ;; Tracked objects:
  8685 ;;		On entry : 0/0
  8686 ;;		On exit  : 0/0
  8687 ;;		Unchanged: 0/0
  8688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8689 ;;      Params:         8       0       0       0       0       0       0
  8690 ;;      Locals:        13       0       0       0       0       0       0
  8691 ;;      Temps:          4       0       0       0       0       0       0
  8692 ;;      Totals:        25       0       0       0       0       0       0
  8693 ;;Total ram usage:       25 bytes
  8694 ;; Hardware stack levels used:    1
  8695 ;; This function calls:
  8696 ;;		Nothing
  8697 ;; This function is called by:
  8698 ;;		_ADXL355_Read_Axis
  8699 ;;		_ADXL355_Convert_G
  8700 ;; This function uses a non-reentrant model
  8701 ;;
  8702                           
  8703                           	psect	text49
  8704  006A6A                     __ptext49:
  8705                           	opt stack 0
  8706  006A6A                     ___fldiv:
  8707                           	opt stack 29
  8708                           
  8709                           ;incstack = 0
  8710  006A6A  504C               	movf	___fldiv@b+3,w,c
  8711  006A6C  0B80               	andlw	128
  8712  006A6E  6E55               	movwf	___fldiv@sign,c
  8713  006A70  504C               	movf	___fldiv@b+3,w,c
  8714  006A72  244C               	addwf	___fldiv@b+3,w,c
  8715  006A74  6E60               	movwf	___fldiv@bexp,c
  8716  006A76  BE4B               	btfsc	___fldiv@b+2,7,c
  8717  006A78  8060               	bsf	___fldiv@bexp,0,c
  8718  006A7A  5060               	movf	___fldiv@bexp,w,c
  8719  006A7C  E005               	bz	l1116
  8720  006A7E  2860               	incf	___fldiv@bexp,w,c
  8721  006A80  E101               	bnz	l3556
  8722  006A82  D8CF               	call	PL82	;call to abstracted procedure
  8723  006A84                     l3556:
  8724  006A84  8E4B               	bsf	___fldiv@b+2,7,c
  8725  006A86  D003               	goto	L12
  8726  006A88                     l1116:
  8727  006A88  6A49               	clrf	___fldiv@b,c
  8728  006A8A  6A4A               	clrf	___fldiv@b+1,c
  8729  006A8C  6A4B               	clrf	___fldiv@b+2,c
  8730  006A8E                     L12:
  8731  006A8E  6A4C               	clrf	___fldiv@b+3,c
  8732  006A90  5050               	movf	___fldiv@a+3,w,c
  8733  006A92  0B80               	andlw	128
  8734  006A94  1A55               	xorwf	___fldiv@sign,f,c
  8735  006A96  5050               	movf	___fldiv@a+3,w,c
  8736  006A98  2450               	addwf	___fldiv@a+3,w,c
  8737  006A9A  6E61               	movwf	___fldiv@aexp,c
  8738  006A9C  BE4F               	btfsc	___fldiv@a+2,7,c
  8739  006A9E  8061               	bsf	___fldiv@aexp,0,c
  8740  006AA0  5061               	movf	___fldiv@aexp,w,c
  8741  006AA2  E008               	bz	l1120
  8742  006AA4  2861               	incf	___fldiv@aexp,w,c
  8743  006AA6  E104               	bnz	l3572
  8744  006AA8  6A4D               	clrf	___fldiv@a,c
  8745  006AAA  6A4E               	clrf	___fldiv@a+1,c
  8746  006AAC  6A4F               	clrf	___fldiv@a+2,c
  8747  006AAE  6A50               	clrf	___fldiv@a+3,c
  8748  006AB0                     l3572:
  8749  006AB0  8E4F               	bsf	___fldiv@a+2,7,c
  8750  006AB2  D003               	goto	L13
  8751  006AB4                     l1120:
  8752  006AB4  6A4D               	clrf	___fldiv@a,c
  8753  006AB6  6A4E               	clrf	___fldiv@a+1,c
  8754  006AB8  6A4F               	clrf	___fldiv@a+2,c
  8755  006ABA                     L13:
  8756  006ABA  6A50               	clrf	___fldiv@a+3,c
  8757  006ABC  504D               	movf	___fldiv@a,w,c
  8758  006ABE  104E               	iorwf	___fldiv@a+1,w,c
  8759  006AC0  104F               	iorwf	___fldiv@a+2,w,c
  8760  006AC2  1050               	iorwf	___fldiv@a+3,w,c
  8761  006AC4  E10E               	bnz	l3586
  8762  006AC6  D8AD               	call	PL82	;call to abstracted procedure
  8763  006AC8  0E80               	movlw	128
  8764  006ACA  124B               	iorwf	___fldiv@b+2,f,c
  8765  006ACC  0E7F               	movlw	127
  8766  006ACE  124C               	iorwf	___fldiv@b+3,f,c
  8767  006AD0  C049  F049         	movff	___fldiv@b,?___fldiv
  8768  006AD4  C04A  F04A         	movff	___fldiv@b+1,?___fldiv+1
  8769  006AD8  C04B  F04B         	movff	___fldiv@b+2,?___fldiv+2
  8770  006ADC  C04C  F04C         	movff	___fldiv@b+3,?___fldiv+3
  8771  006AE0  0012               	return	
  8772  006AE2                     l3586:
  8773  006AE2  5060               	movf	___fldiv@bexp,w,c
  8774  006AE4  E105               	bnz	l3590
  8775  006AE6  6A49               	clrf	?___fldiv,c
  8776  006AE8  6A4A               	clrf	?___fldiv+1,c
  8777  006AEA  6A4B               	clrf	?___fldiv+2,c
  8778  006AEC  6A4C               	clrf	?___fldiv+3,c
  8779  006AEE  0012               	return	
  8780  006AF0                     l3590:
  8781  006AF0  5061               	movf	___fldiv@aexp,w,c
  8782  006AF2  C060  F051         	movff	___fldiv@bexp,??___fldiv
  8783  006AF6  6A52               	clrf	(??___fldiv+1)& (0+255),c
  8784  006AF8  5E51               	subwf	??___fldiv,f,c
  8785  006AFA  0E00               	movlw	0
  8786  006AFC  5A52               	subwfb	??___fldiv+1,f,c
  8787  006AFE  0E7F               	movlw	127
  8788  006B00  2451               	addwf	??___fldiv,w,c
  8789  006B02  6E5A               	movwf	___fldiv@new_exp,c
  8790  006B04  0E00               	movlw	0
  8791  006B06  2052               	addwfc	??___fldiv+1,w,c
  8792  006B08  6E5B               	movwf	___fldiv@new_exp+1,c
  8793  006B0A  C049  F056         	movff	___fldiv@b,___fldiv@rem
  8794  006B0E  C04A  F057         	movff	___fldiv@b+1,___fldiv@rem+1
  8795  006B12  C04B  F058         	movff	___fldiv@b+2,___fldiv@rem+2
  8796  006B16  C04C  F059         	movff	___fldiv@b+3,___fldiv@rem+3
  8797  006B1A  D883               	call	PL82	;call to abstracted procedure
  8798  006B1C  6A5C               	clrf	___fldiv@grs,c
  8799  006B1E  6A5D               	clrf	___fldiv@grs+1,c
  8800  006B20  6A5E               	clrf	___fldiv@grs+2,c
  8801  006B22  6A5F               	clrf	___fldiv@grs+3,c
  8802  006B24  6A61               	clrf	___fldiv@aexp,c
  8803  006B26  D01B               	goto	l1126
  8804  006B28                     l3600:
  8805  006B28  5061               	movf	___fldiv@aexp,w,c
  8806  006B2A  E006               	bz	l3608
  8807  006B2C  90D8               	bcf	status,0,c
  8808  006B2E  3656               	rlcf	___fldiv@rem,f,c
  8809  006B30  3657               	rlcf	___fldiv@rem+1,f,c
  8810  006B32  3658               	rlcf	___fldiv@rem+2,f,c
  8811  006B34  3659               	rlcf	___fldiv@rem+3,f,c
  8812  006B36  D868               	call	PL58	;call to abstracted procedure
  8813  006B38                     l3608:
  8814  006B38  504D               	movf	___fldiv@a,w,c
  8815  006B3A  5C56               	subwf	___fldiv@rem,w,c
  8816  006B3C  504E               	movf	___fldiv@a+1,w,c
  8817  006B3E  5857               	subwfb	___fldiv@rem+1,w,c
  8818  006B40  504F               	movf	___fldiv@a+2,w,c
  8819  006B42  5858               	subwfb	___fldiv@rem+2,w,c
  8820  006B44  5050               	movf	___fldiv@a+3,w,c
  8821  006B46  5859               	subwfb	___fldiv@rem+3,w,c
  8822  006B48  E309               	bnc	l3614
  8823  006B4A  8C5F               	bsf	___fldiv@grs+3,6,c
  8824  006B4C  504D               	movf	___fldiv@a,w,c
  8825  006B4E  5E56               	subwf	___fldiv@rem,f,c
  8826  006B50  504E               	movf	___fldiv@a+1,w,c
  8827  006B52  5A57               	subwfb	___fldiv@rem+1,f,c
  8828  006B54  504F               	movf	___fldiv@a+2,w,c
  8829  006B56  5A58               	subwfb	___fldiv@rem+2,f,c
  8830  006B58  5050               	movf	___fldiv@a+3,w,c
  8831  006B5A  5A59               	subwfb	___fldiv@rem+3,f,c
  8832  006B5C                     l3614:
  8833  006B5C  2A61               	incf	___fldiv@aexp,f,c
  8834  006B5E                     l1126:
  8835  006B5E  0E19               	movlw	25
  8836  006B60  6461               	cpfsgt	___fldiv@aexp,c
  8837  006B62  D7E2               	goto	l3600
  8838  006B64  5056               	movf	___fldiv@rem,w,c
  8839  006B66  1057               	iorwf	___fldiv@rem+1,w,c
  8840  006B68  1058               	iorwf	___fldiv@rem+2,w,c
  8841  006B6A  1059               	iorwf	___fldiv@rem+3,w,c
  8842  006B6C  E006               	bz	l3626
  8843  006B6E  805C               	bsf	___fldiv@grs,0,c
  8844  006B70  D004               	goto	l3626
  8845  006B72                     l3620:
  8846  006B72  D84A               	call	PL58	;call to abstracted procedure
  8847  006B74  065A               	decf	___fldiv@new_exp,f,c
  8848  006B76  A0D8               	btfss	status,0,c
  8849  006B78  065B               	decf	___fldiv@new_exp+1,f,c
  8850  006B7A                     l3626:
  8851  006B7A  AE4B               	btfss	___fldiv@b+2,7,c
  8852  006B7C  D7FA               	goto	l3620
  8853  006B7E  6A61               	clrf	___fldiv@aexp,c
  8854  006B80  AE5F               	btfss	___fldiv@grs+3,7,c
  8855  006B82  D013               	goto	l1137
  8856  006B84  505C               	movf	___fldiv@grs,w,c
  8857  006B86  6E51               	movwf	??___fldiv& (0+255),c
  8858  006B88  505D               	movf	___fldiv@grs+1,w,c
  8859  006B8A  6E52               	movwf	(??___fldiv+1)& (0+255),c
  8860  006B8C  505E               	movf	___fldiv@grs+2,w,c
  8861  006B8E  6E53               	movwf	(??___fldiv+2)& (0+255),c
  8862  006B90  0E7F               	movlw	127
  8863  006B92  145F               	andwf	___fldiv@grs+3,w,c
  8864  006B94  6E54               	movwf	(??___fldiv+3)& (0+255),c
  8865  006B96  5051               	movf	??___fldiv,w,c
  8866  006B98  1052               	iorwf	??___fldiv+1,w,c
  8867  006B9A  1053               	iorwf	??___fldiv+2,w,c
  8868  006B9C  1054               	iorwf	??___fldiv+3,w,c
  8869  006B9E  E003               	bz	l1138
  8870  006BA0                     l3630:
  8871  006BA0  0E01               	movlw	1
  8872  006BA2  6E61               	movwf	___fldiv@aexp,c
  8873  006BA4  D002               	goto	l1137
  8874  006BA6                     l1138:
  8875  006BA6  B049               	btfsc	___fldiv@b,0,c
  8876  006BA8  D7FB               	goto	l3630
  8877  006BAA                     l1137:
  8878  006BAA  5061               	movf	___fldiv@aexp,w,c
  8879  006BAC  E00E               	bz	l3642
  8880  006BAE  2A49               	incf	___fldiv@b,f,c
  8881  006BB0  0E00               	movlw	0
  8882  006BB2  224A               	addwfc	___fldiv@b+1,f,c
  8883  006BB4  224B               	addwfc	___fldiv@b+2,f,c
  8884  006BB6  224C               	addwfc	___fldiv@b+3,f,c
  8885  006BB8  A04C               	btfss	___fldiv@b+3,0,c
  8886  006BBA  D007               	goto	l3642
  8887  006BBC  344C               	rlcf	___fldiv@b+3,w,c
  8888  006BBE  324C               	rrcf	___fldiv@b+3,f,c
  8889  006BC0  324B               	rrcf	___fldiv@b+2,f,c
  8890  006BC2  324A               	rrcf	___fldiv@b+1,f,c
  8891  006BC4  3249               	rrcf	___fldiv@b,f,c
  8892  006BC6  4A5A               	infsnz	___fldiv@new_exp,f,c
  8893  006BC8  2A5B               	incf	___fldiv@new_exp+1,f,c
  8894  006BCA                     l3642:
  8895  006BCA  BE5B               	btfsc	___fldiv@new_exp+1,7,c
  8896  006BCC  D007               	goto	l3648
  8897  006BCE  505B               	movf	___fldiv@new_exp+1,w,c
  8898  006BD0  E102               	bnz	u3870
  8899  006BD2  285A               	incf	___fldiv@new_exp,w,c
  8900  006BD4  E303               	bnc	l3648
  8901  006BD6                     u3870:
  8902  006BD6  6A5B               	clrf	___fldiv@new_exp+1,c
  8903  006BD8  685A               	setf	___fldiv@new_exp,c
  8904  006BDA  D823               	call	PL82	;call to abstracted procedure
  8905  006BDC                     l3648:
  8906  006BDC  BE5B               	btfsc	___fldiv@new_exp+1,7,c
  8907  006BDE  D004               	goto	l3650
  8908  006BE0  505B               	movf	___fldiv@new_exp+1,w,c
  8909  006BE2  E106               	bnz	l1144
  8910  006BE4  045A               	decf	___fldiv@new_exp,w,c
  8911  006BE6  E204               	bc	l1144
  8912  006BE8                     l3650:
  8913  006BE8  6A5A               	clrf	___fldiv@new_exp,c
  8914  006BEA  6A5B               	clrf	___fldiv@new_exp+1,c
  8915  006BEC  D81A               	call	PL82	;call to abstracted procedure
  8916  006BEE  6A55               	clrf	___fldiv@sign,c
  8917  006BF0                     l1144:
  8918  006BF0  C05A  F060         	movff	___fldiv@new_exp,___fldiv@bexp
  8919  006BF4  A060               	btfss	___fldiv@bexp,0,c
  8920  006BF6  D002               	goto	l3654
  8921  006BF8  8E4B               	bsf	___fldiv@b+2,7,c
  8922  006BFA  D001               	goto	l3656
  8923  006BFC                     l3654:
  8924  006BFC  9E4B               	bcf	___fldiv@b+2,7,c
  8925  006BFE                     l3656:
  8926  006BFE  90D8               	bcf	status,0,c
  8927  006C00  3060               	rrcf	___fldiv@bexp,w,c
  8928  006C02  6E4C               	movwf	___fldiv@b+3,c
  8929  006C04  5055               	movf	___fldiv@sign,w,c
  8930  006C06  D763               	goto	L14
  8931  006C08                     __end_of___fldiv:
  8932                           	opt stack 0
  8933  006C08                     PL58:
  8934                           	opt stack 29
  8935  006C08  90D8               	bcf	status,0,c
  8936  006C0A  3649               	rlcf	___fldiv@b,f,c
  8937  006C0C  364A               	rlcf	___fldiv@b+1,f,c
  8938  006C0E  364B               	rlcf	___fldiv@b+2,f,c
  8939  006C10  364C               	rlcf	___fldiv@b+3,f,c
  8940  006C12  BE5F               	btfsc	___fldiv@grs+3,7,c
  8941  006C14  8049               	bsf	___fldiv@b,0,c
  8942  006C16  90D8               	bcf	status,0,c
  8943  006C18  365C               	rlcf	___fldiv@grs,f,c
  8944  006C1A  365D               	rlcf	___fldiv@grs+1,f,c
  8945  006C1C  365E               	rlcf	___fldiv@grs+2,f,c
  8946  006C1E  365F               	rlcf	___fldiv@grs+3,f,c
  8947  006C20  0012               	return	
  8948  006C22                     __end_ofPL58:
  8949                           	opt stack 0
  8950  006C22                     PL82:
  8951                           	opt stack 29
  8952  006C22  6A49               	clrf	___fldiv@b,c
  8953  006C24  6A4A               	clrf	___fldiv@b+1,c
  8954  006C26  6A4B               	clrf	___fldiv@b+2,c
  8955  006C28  6A4C               	clrf	___fldiv@b+3,c
  8956  006C2A  0012               	return	
  8957  006C2C                     __end_ofPL82:
  8958                           	opt stack 0
  8959                           tblptru	equ	0xFF8
  8960                           tblptrh	equ	0xFF7
  8961                           tblptrl	equ	0xFF6
  8962                           tablat	equ	0xFF5
  8963                           prodh	equ	0xFF4
  8964                           prodl	equ	0xFF3
  8965                           indf0	equ	0xFEF
  8966                           plusw0	equ	0xFEB
  8967                           fsr0h	equ	0xFEA
  8968                           fsr0l	equ	0xFE9
  8969                           wreg	equ	0xFE8
  8970                           indf2	equ	0xFDF
  8971                           postinc2	equ	0xFDE
  8972                           postdec2	equ	0xFDD
  8973                           plusw2	equ	0xFDB
  8974                           fsr2h	equ	0xFDA
  8975                           fsr2l	equ	0xFD9
  8976                           status	equ	0xFD8
  8977                           tblptru	equ	0xFF8
  8978                           tblptrh	equ	0xFF7
  8979                           tblptrl	equ	0xFF6
  8980                           tablat	equ	0xFF5
  8981                           prodh	equ	0xFF4
  8982                           prodl	equ	0xFF3
  8983                           indf0	equ	0xFEF
  8984                           plusw0	equ	0xFEB
  8985                           fsr0h	equ	0xFEA
  8986                           fsr0l	equ	0xFE9
  8987                           wreg	equ	0xFE8
  8988                           indf2	equ	0xFDF
  8989                           postinc2	equ	0xFDE
  8990                           postdec2	equ	0xFDD
  8991                           plusw2	equ	0xFDB
  8992                           fsr2h	equ	0xFDA
  8993                           fsr2l	equ	0xFD9
  8994                           status	equ	0xFD8
  8995                           
  8996                           	psect	rparam
  8997  0000                     tblptru	equ	0xFF8
  8998                           tblptrh	equ	0xFF7
  8999                           tblptrl	equ	0xFF6
  9000                           tablat	equ	0xFF5
  9001                           prodh	equ	0xFF4
  9002                           prodl	equ	0xFF3
  9003                           indf0	equ	0xFEF
  9004                           plusw0	equ	0xFEB
  9005                           fsr0h	equ	0xFEA
  9006                           fsr0l	equ	0xFE9
  9007                           wreg	equ	0xFE8
  9008                           indf2	equ	0xFDF
  9009                           postinc2	equ	0xFDE
  9010                           postdec2	equ	0xFDD
  9011                           plusw2	equ	0xFDB
  9012                           fsr2h	equ	0xFDA
  9013                           fsr2l	equ	0xFD9
  9014                           status	equ	0xFD8
  9015                           tblptru	equ	0xFF8
  9016                           tblptrh	equ	0xFF7
  9017                           tblptrl	equ	0xFF6
  9018                           tablat	equ	0xFF5
  9019                           prodh	equ	0xFF4
  9020                           prodl	equ	0xFF3
  9021                           indf0	equ	0xFEF
  9022                           plusw0	equ	0xFEB
  9023                           fsr0h	equ	0xFEA
  9024                           fsr0l	equ	0xFE9
  9025                           wreg	equ	0xFE8
  9026                           indf2	equ	0xFDF
  9027                           postinc2	equ	0xFDE
  9028                           postdec2	equ	0xFDD
  9029                           plusw2	equ	0xFDB
  9030                           fsr2h	equ	0xFDA
  9031                           fsr2l	equ	0xFD9
  9032                           status	equ	0xFD8


Data Sizes:
    Strings     147
    Constant    180
    Data        1
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    127     127
    BANK0           128     90      91
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_10(CODE[11]), STR_9(CODE[10]), STR_8(CODE[10]), STR_7(CODE[10]), 
		 -> STR_6(CODE[16]), STR_5(CODE[14]), STR_4(CODE[14]), STR_3(CODE[14]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> main@aux(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    WriteString@stringi	PTR char  size(1) Largest target is 20
		 -> main@aux(BANK0[20]), 

    putrsserial@data	PTR const unsigned char  size(2) Largest target is 24
		 -> main@aux(BANK0[20]), STR_2(CODE[24]), STR_1(CODE[24]), 


Critical Paths under _main in COMRAM

    _main->_ADXL355_Convert_G
    _sprintf->___flsub
    _scale->___flmul
    ___awdiv->___awmod
    _fround->___flmul
    ___lbdiv->___lbmod
    ___flmul->___awdiv
    ___fltol->_scale
    ___flsub->___fladd
    _putrsserial->_writeserial
    _initDispl->_DisplayOnOff
    _DisplayOnOff->_WriteIns
    _ClrDisplay->_SetPostion
    _SetPostion->_WriteIns
    _WriteString->_WriteData
    _WriteData->_IIC_put
    _DisplLines->_WriteIns
    _WriteIns->_IIC_put
    _IIC_put->_I2C_WriteByte
    _CheckBusy->_IIC_get
    _IIC_get->_I2C_ReadByte
    _ADXL355_Read_Axis->___fldiv
    ___fladd->_fround
    _I2C_RepeatedStart->_I2C_Idle
    _I2C_ReadByte->_I2C_Idle
    _ADXL355_Init->_I2C_Write_Byte
    _I2C_Write_Byte->_I2C_WriteByte
    _I2C_WriteByte->_I2C_Idle
    _I2C_Stop->_I2C_Idle
    _I2C_Start->_I2C_Idle
    _ADXL355_Convert_G->___fldiv
    ___fldiv->___fladd

Critical Paths under _main in BANK0

    _main->_ADXL355_Read_Axis

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                81    81      0   48625
                                             39 BANK0     51    51      0
                  _ADXL355_Convert_G
                       _ADXL355_Init
                  _ADXL355_Read_Axis
                           _Delay_ms
                         _DisplLines
                       _DisplayOnOff
                  _ES15007_Init_Norm
                          _I2C_Close
                           _I2C_Init
                         _SetPostion
                        _WriteString
                          _initDispl
                        _putrsserial
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             51    44      7   32631
                                             80 COMRAM    45    38      7
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               13     9      4    6700
                                             39 COMRAM     9     5      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1064
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1196
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              21    17      4    4947
                                             39 COMRAM    17    13      4
                            ___flmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     351
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     354
                                              4 COMRAM     4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    3951
                                             14 COMRAM    25    17      8
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         17     9      8     431
                                              0 COMRAM    17     9      8
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          14     6      8     431
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     543
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     543
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     418
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     472
                                             48 COMRAM    10     6      4
                            ___flmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    3667
                                             72 COMRAM     8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flneg                                              4     0      4     211
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8     974
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _putrsserial                                          4     2      2     450
                                              1 COMRAM     4     2      2
                        _writeserial
 ---------------------------------------------------------------------------------
 (2) _writeserial                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initDispl                                            1     1      0    1272
                         _ClrDisplay
                       _DisplayOnOff
                           _WriteIns
 ---------------------------------------------------------------------------------
 (2) _DisplayOnOff                                         1     1      0     329
                                              5 COMRAM     1     1      0
                           _WriteIns
 ---------------------------------------------------------------------------------
 (2) _ClrDisplay                                           0     0      0     636
                         _SetPostion
                           _WriteIns
 ---------------------------------------------------------------------------------
 (3) _SetPostion                                           1     1      0     329
                                              5 COMRAM     1     1      0
                           _WriteIns
 ---------------------------------------------------------------------------------
 (1) _WriteString                                          1     0      1     608
                                              5 COMRAM     1     0      1
                          _WriteData
 ---------------------------------------------------------------------------------
 (2) _WriteData                                            1     1      0     307
                                              4 COMRAM     1     1      0
                          _CheckBusy
                            _IIC_put
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Close                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ES15007_Init_Norm                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DisplLines                                           1     1      0     373
                                              5 COMRAM     1     1      0
                           _WriteIns
 ---------------------------------------------------------------------------------
 (2) _WriteIns                                             1     1      0     307
                                              4 COMRAM     1     1      0
                          _CheckBusy
                            _IIC_put
 ---------------------------------------------------------------------------------
 (3) _IIC_put                                              2     1      1     194
                                              2 COMRAM     2     1      1
                          _I2C_Start
                           _I2C_Stop
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (3) _CheckBusy                                            0     0      0      91
                            _IIC_get
 ---------------------------------------------------------------------------------
 (4) _IIC_get                                              1     1      0      91
                                              3 COMRAM     1     1      0
                       _I2C_ReadByte
                  _I2C_RepeatedStart
                          _I2C_Start
                           _I2C_Stop
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (1) _Delay_ms                                             5     3      2     110
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADXL355_Read_Axis                                   65    47     18    7866
                                             97 COMRAM    26     8     18
                                              0 BANK0     39    39      0
                       _I2C_ReadByte
                  _I2C_RepeatedStart
                          _I2C_Start
                           _I2C_Stop
                      _I2C_WriteByte
                            ___aldiv
                            ___fladd
                            ___fldiv
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             16     8      8    3086
                                             56 COMRAM    16     8      8
                           ___xxtofl (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     684
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (5) _I2C_RepeatedStart                                    0     0      0       0
                           _I2C_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_ReadByte                                         2     2      0      46
                                              1 COMRAM     2     2      0
                           _I2C_Idle
 ---------------------------------------------------------------------------------
 (1) _ADXL355_Init                                         2     1      1     452
                                              5 COMRAM     2     1      1
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (2) _I2C_Write_Byte                                       3     1      2     344
                                              2 COMRAM     3     1      2
                          _I2C_Start
                           _I2C_Stop
                      _I2C_WriteByte
 ---------------------------------------------------------------------------------
 (4) _I2C_WriteByte                                        1     1      0      22
                                              1 COMRAM     1     1      0
                           _I2C_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_Stop                                             0     0      0       0
                           _I2C_Idle
 ---------------------------------------------------------------------------------
 (4) _I2C_Start                                            0     0      0       0
                           _I2C_Idle
 ---------------------------------------------------------------------------------
 (5) _I2C_Idle                                             1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADXL355_Convert_G                                   30    12     18    3583
                                             97 COMRAM    30    12     18
                            ___fldiv
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     897
                                              0 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    2483
                                             72 COMRAM    25    17      8
                            ___fladd (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADXL355_Convert_G
     ___fldiv
       ___fladd (ARG)
         ___xxtofl (ARG)
         _fround (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___xxtofl (ARG)
     ___xxtofl
   _ADXL355_Init
     _I2C_Write_Byte
       _I2C_Start
         _I2C_Idle
       _I2C_Stop
         _I2C_Idle
       _I2C_WriteByte
         _I2C_Idle
   _ADXL355_Read_Axis
     _I2C_ReadByte
       _I2C_Idle
     _I2C_RepeatedStart
       _I2C_Idle
     _I2C_Start
       _I2C_Idle
     _I2C_Stop
       _I2C_Idle
     _I2C_WriteByte
       _I2C_Idle
     ___aldiv
     ___fladd
       ___xxtofl (ARG)
       _fround (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___fldiv
       ___fladd (ARG)
         ___xxtofl (ARG)
         _fround (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___xxtofl (ARG)
     ___xxtofl
   _Delay_ms
   _DisplLines
     _WriteIns
       _CheckBusy
         _IIC_get
           _I2C_ReadByte
             _I2C_Idle
           _I2C_RepeatedStart
             _I2C_Idle
           _I2C_Start
             _I2C_Idle
           _I2C_Stop
             _I2C_Idle
           _I2C_WriteByte
             _I2C_Idle
       _IIC_put
         _I2C_Start
           _I2C_Idle
         _I2C_Stop
           _I2C_Idle
         _I2C_WriteByte
           _I2C_Idle
   _DisplayOnOff
     _WriteIns
       _CheckBusy
         _IIC_get
           _I2C_ReadByte
             _I2C_Idle
           _I2C_RepeatedStart
             _I2C_Idle
           _I2C_Start
             _I2C_Idle
           _I2C_Stop
             _I2C_Idle
           _I2C_WriteByte
             _I2C_Idle
       _IIC_put
         _I2C_Start
           _I2C_Idle
         _I2C_Stop
           _I2C_Idle
         _I2C_WriteByte
           _I2C_Idle
   _ES15007_Init_Norm
   _I2C_Close
   _I2C_Init
   _SetPostion
     _WriteIns
       _CheckBusy
         _IIC_get
           _I2C_ReadByte
             _I2C_Idle
           _I2C_RepeatedStart
             _I2C_Idle
           _I2C_Start
             _I2C_Idle
           _I2C_Stop
             _I2C_Idle
           _I2C_WriteByte
             _I2C_Idle
       _IIC_put
         _I2C_Start
           _I2C_Idle
         _I2C_Stop
           _I2C_Idle
         _I2C_WriteByte
           _I2C_Idle
   _WriteString
     _WriteData
       _CheckBusy
         _IIC_get
           _I2C_ReadByte
             _I2C_Idle
           _I2C_RepeatedStart
             _I2C_Idle
           _I2C_Start
             _I2C_Idle
           _I2C_Stop
             _I2C_Idle
           _I2C_WriteByte
             _I2C_Idle
       _IIC_put
         _I2C_Start
           _I2C_Idle
         _I2C_Stop
           _I2C_Idle
         _I2C_WriteByte
           _I2C_Idle
   _initDispl
     _ClrDisplay
       _SetPostion
         _WriteIns
           _CheckBusy
             _IIC_get
               _I2C_ReadByte
                 _I2C_Idle
               _I2C_RepeatedStart
                 _I2C_Idle
               _I2C_Start
                 _I2C_Idle
               _I2C_Stop
                 _I2C_Idle
               _I2C_WriteByte
                 _I2C_Idle
           _IIC_put
             _I2C_Start
               _I2C_Idle
             _I2C_Stop
               _I2C_Idle
             _I2C_WriteByte
               _I2C_Idle
       _WriteIns
         _CheckBusy
           _IIC_get
             _I2C_ReadByte
               _I2C_Idle
             _I2C_RepeatedStart
               _I2C_Idle
             _I2C_Start
               _I2C_Idle
             _I2C_Stop
               _I2C_Idle
             _I2C_WriteByte
               _I2C_Idle
         _IIC_put
           _I2C_Start
             _I2C_Idle
           _I2C_Stop
             _I2C_Idle
           _I2C_WriteByte
             _I2C_Idle
     _DisplayOnOff
       _WriteIns
         _CheckBusy
           _IIC_get
             _I2C_ReadByte
               _I2C_Idle
             _I2C_RepeatedStart
               _I2C_Idle
             _I2C_Start
               _I2C_Idle
             _I2C_Stop
               _I2C_Idle
             _I2C_WriteByte
               _I2C_Idle
         _IIC_put
           _I2C_Start
             _I2C_Idle
           _I2C_Stop
             _I2C_Idle
           _I2C_WriteByte
             _I2C_Idle
     _WriteIns
       _CheckBusy
         _IIC_get
           _I2C_ReadByte
             _I2C_Idle
           _I2C_RepeatedStart
             _I2C_Idle
           _I2C_Start
             _I2C_Idle
           _I2C_Stop
             _I2C_Idle
           _I2C_WriteByte
             _I2C_Idle
       _IIC_put
         _I2C_Start
           _I2C_Idle
         _I2C_Stop
           _I2C_Idle
         _I2C_WriteByte
           _I2C_Idle
   _putrsserial
     _writeserial
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___fladd
       ___xxtofl (ARG)
       _fround (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___flge
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
     ___flneg
     ___flsub
       ___fladd
         ___xxtofl (ARG)
         _fround (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___xxtofl (ARG)
     ___fltol
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
     ___lldiv
     ___llmod
     ___wmul
     ___xxtofl
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___lbdiv
         ___lbmod (ARG)
       ___lbmod
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5A      5B       5       71.1%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     7F      7F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      DA      15        0.0%
DATA                 0      0      DA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Sep 09 09:48:03 2019

        __size_of_I2C_Close 0004                ___fldiv@aexp 0061                ___fldiv@bexp 0060  
              ___fldiv@sign 0055          __size_of_I2C_Start 000C                          PL2 737C  
                        PL4 7398                          PL6 69D8                          PL8 7D66  
               _SSPSTATbits 000FC7            DisplayOnOff@data 0006                          l83 5FE8  
              ___awdiv@sign 000C         ___wmul@multiplicand 0003                 __CFG_BORV$3 000000  
              __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000  
              __CFG_CP3$OFF 000000                         PL10 658E                         PL20 73D8  
                       PL12 73B4                         PL30 7DC2                         PL22 73EA  
                       PL14 73CA                         PL40 69FE                         PL32 69EC  
                       PL24 7DAE                         PL16 7DA0                         PL50 7E00  
                       PL42 7008                         PL34 742C                         PL26 7418  
                       PL18 71EC                         PL60 7470                         PL52 7462  
                       PL44 7444                         PL36 7438                         PL28 69E4  
                       PL70 7220                         PL62 747C                         PL54 7E0E  
                       PL46 6A10                         PL38 6FF2                         PL80 6DF2  
                       PL72 7492                         PL64 71F8                         PL56 7E2A  
                       PL48 7DEE                         PL90 7E5A                         PL82 6C22  
                       PL74 6DB6                         PL66 7208                         PL58 6C08  
                       PL92 76D2                         PL84 7E36                         PL76 6DCA  
                       PL68 7488                         PL94 7E6C                         PL86 6A1C  
                       PL78 6DDE                         PL96 6A2E                         PL88 7E48  
                       PL98 6A3A                         l130 5E94                         l124 5EA0  
                       l118 5E88                         l151 616C                         l152 6166  
                       l147 6150                         l156 6170                         l148 6152  
                       l510 7AFE                         l511 7B20                         l168 608A  
                       l192 61C0                         l524 7B70                         l541 7CD2  
                       l461 77DE                         l542 7CD6                         l544 7CFC  
                       l448 7728                         l555 7D2A                         l539 7CB2  
                       l558 7D4A                         l497 7ACA                         l790 6402  
                       l782 6648                         l792 642E                         l880 6798  
                       l961 6344                         l971 6266                         l886 67D0  
              __CFG_CPB$OFF 000000                __CFG_CPD$OFF 000000                ___awmod@sign 0006  
      __size_of_WriteString 000E                         wreg 000FE8                ___flmul@aexp 001C  
              ___flmul@bexp 0021        I2C_Init@clock_output 0001                ___flmul@sign 001B  
              ___flmul@temp 0026                ___flmul@prod 0022                        PL100 6A4C  
                      PL110 722E                        PL102 7E7E                        PL120 68E6  
                      PL112 76E4                        PL104 701C                        PL130 7028  
                      PL122 68F2                        PL114 76EE                        PL106 6A5E  
                      PL140 7704                        PL132 723C                        PL124 665A  
                      PL116 67E2                        PL108 749C                        PL150 7EA4  
                      PL142 5EFE                        PL134 6E06                        PL126 76FA  
                      PL118 644E                        PL152 7EAE                        PL144 7E9A  
                      PL136 7E90                        PL128 620A                        PL146 7250  
                      PL138 7246                        PL148 74A6                __CFG_LVP$OFF 000000  
           __end_of_IIC_get 606A                ___fltol@exp1 003A             __end_of_IIC_put 5F5A  
              __CFG_WDT$OFF 000000       __size_of_ADXL355_Init 001E                        l1103 76AC  
                      l1120 6AB4                        l1200 68A4                        l1105 76A4  
                      l1116 6A88                        l1126 6B5E                        l1070 759C  
                      l1150 7050                        l1071 7596                        l1144 6BF0  
                      l1072 7582                        l1064 7500                        l1137 6BAA  
                      l1138 6BA6                        l1154 7070                        l1059 74CE  
                      l1084 7668                        l3100 7084                        l1173 71C2  
                      l1165 7178                        l3014 7644                        l3030 7664  
                      l1166 7174                        l1087 763A                        l1159 707A  
                      l1192 6878                        l1096 7682                        l3024 765A  
                      l3008 762A                        l3200 6378                        l4000 7958  
                      l1185 682C                        l1097 767E                        l3034 7678  
                      l3210 6394                        l4002 7966                        l3046 769C  
                      l3142 712A                        l3206 6388                        l3222 63B8  
                      l4022 79F0                        l1199 689C                        l3056 76B4  
                      l3320 5EC8                        l3400 6744                        l3152 716E  
                      l3080 704C                        l3304 6038                        l3208 6390  
                      l4112 7B50                        l4104 7B40                        l4040 7A6C  
                      l4032 7A4A                        l4008 7988                        l3058 76B6  
                      l3170 71B6                        l3082 7052                        l3226 63C4  
                      l3218 63AE                        l3250 62AE                        l3242 6296  
                      l4130 7BD4                        l4114 7B5C                        l4106 7B48  
                      l4026 7A46                        l3180 71D6                        l3164 7192  
                      l3148 7148                        l4204 7D14                        l4140 7C22  
                      l4060 7AC6                        l4044 7A9A                        l3094 706C  
                      l3342 69C6                        l3334 698A                        l3262 62D6  
                      l3254 62C0                        l3246 62A2                        l3238 628A  
                      l4206 7D1A                        l4142 7C2A                        l4126 7B90  
                      l4118 7B74                        l4150 7C3C                        l3600 6B28  
                      l3520 66B0                        l4240 5FD6                        l4232 5EF0  
                      l3168 71AA                        l3096 7072                        l3272 60A4  
                      l3248 62AA                        l4216 7D38                        l4160 7C64  
                      l4072 7ADA                        l4056 7AB6                        l4080 7AF2  
                      l4048 7AA4                        l2810 5EDA                        l3522 66BC  
                      l3514 6698                        l3450 65C0                        l3442 67C8  
                      l3434 67B0                        l3418 677A                        l3194 6368  
                      l3258 62CA                        l3362 72E4                        l4170 7C92  
                      l4090 7B1C                        l4074 7AE8                        l4066 7AD2  
                      l4226 7D52                        l3620 6B72                        l3540 6710  
                      l3532 66EE                        l3524 66C0                        l3508 6680  
                      l3700 6464                        l3444 67CC                        l3284 60BE  
                      l3276 60AA                        l3380 736E                        l3356 72B2  
                      l4164 7C82                        l4156 7C50                        l4148 7C32  
                      l4228 7D5C                        l3630 6BA0                        l3614 6B5C  
                      l3702 646E                        l3438 67C0                        l3278 60AE  
                      l3374 733C                        l3366 72EC                        l4190 7CF8  
                      l4086 7B0C                        l4270 6CA2                        l3608 6B38  
                      l3536 66FC                        l2904 74E2                        l3720 64B8  
                      l3472 660E                        l3464 65E8                        l3448 65B6  
                      l3288 60C6                        l3296 6022                        l3392 5F6E  
                      l4176 7CB6                        l4096 7B2E                        l3650 6BE8  
                      l3642 6BCA                        l3626 6B7A                        l3810 68D4  
                      l3490 6640                        l3482 6628                        l4186 7CE8  
                      l3572 6AB0                        l3556 6A84                        l2916 74FC  
                      l3732 64E4                        l3724 64C0                        l3716 64A8  
                      l3492 6644                        l4196 7D04                        l3654 6BFC  
                      l3590 6AF0                        l2838 6174                        l2926 7516  
                      l3726 64CC                        l3742 62F8                        l3486 6638  
                      l3398 673A                        l3910 7736                        l3902 7714  
                      l3656 6BFE                        l3648 6BDC                        l3680 6418  
                      l3728 64D0                        l3744 6304                        l3912 773A  
                      l3586 6AE2                        l3674 63E8                        l3754 6336  
                      l3746 6308                        l3770 6258                        l3762 6226  
                      l3906 7724                        l3780 683C                        l2980 75A6  
                      l2956 7552                        l3844 60E0                        l3764 6232  
                      l3924 775E                        l3932 779C                        l3908 7732  
                      l3916 7740                        l3790 686A                        l2990 75CE  
                      l2966 7590                        l3862 6E34                        l2878 5EB4  
                      l3686 644A                        l3694 5FBE                        l3766 6236  
                      l3950 77EA                        l3942 77D4                        l3784 6850  
                      l2968 7594                        l2896 74CA                        l3952 77FA  
                      l3786 6856                        l3946 77E6                        l3938 77AE  
                      l3796 6886                        l3788 685A                        l2988 75CA  
                      l3798 6892                        l2998 75D2                        l3958 780C  
                      l3992 78F8                        l3984 78AC                        l3968 7852  
                      l3996 7910                        l3998 791E                        STR_1 7F83  
                      STR_2 7F6B                        STR_3 7FAB                        STR_4 7FB9  
                      STR_5 7FC7                        STR_6 7F9B                        STR_7 7FE0  
                      STR_8 7FEA                        STR_9 7FF4                        u3160 719E  
                      u4210 61DC                        u2460 5EE4                        u4220 6204  
                      u2710 7570                        u4217 61DA                        u4251 6FE8  
                      u4227 6202                        u3451 6732                        u2468 5EE6  
                      u4261 6584                        u3471 6754                        u4440 7988  
                      u4610 7B6A                        u4901 6CD2                        u3870 6BD6  
                      u3970 648C                        u4917 6C62                        u4927 5FDC  
                      u3975 6482                        u4881 6CAE     ADXL355_Init@_power_mode 0006  
                      u4891 6CC0       __size_of_I2C_ReadByte 003E                        _main 6C2C  
          __end_of_I2C_Idle 5EF0            __end_of_I2C_Init 5F22                        fsr0h 000FEA  
                      indf0 000FEF                        fsr2h 000FDA                        fsr0l 000FE9  
                      indf2 000FDF                        fsr2l 000FD9            __end_of_I2C_Stop 5E9A  
                      prodh 000FF4                        prodl 000FF3                        start 0000  
                _ClrDisplay 5EA6               __CFG_IESO$OFF 000000             ___fldiv@new_exp 005A  
              _sprintf$1014 0060                _sprintf$1015 0062                _sprintf$1016 0064  
              _sprintf$1017 0066                _sprintf$1714 005C               __CFG_MCLRE$ON 000000  
              ___param_bank 000000                 _putrsserial 61C0               ___fltol@sign1 0039  
           __end_of___aldiv 6722             __end_of___fladd 76D2                       ?_main 0001  
           __end_of___fldiv 6C08             __end_of___awdiv 63CE             __end_of___lbdiv 60CA  
           __end_of___flneg 5FD0                       STR_10 7FD5             __end_of___awmod 62E0  
           __end_of___lbmod 6040             __end_of___flmul 71EC             __end_of___flsub 613A  
           __end_of___fltol 64F6                       _CMCON 000FB4             __end_of___lldiv 6356  
           ___awdiv@divisor 0009             __end_of___llmod 6278             ___awdiv@counter 000B  
              _ADXL355_Init 5F92                       _RCSTA 000FAB                       _SPBRG 000FAF  
                     _TRISA 000F92                       _TRISB 000F93                       _TRISC 000F94  
        __end_ofsin@coeff_a 7F5B          __end_ofsin@coeff_b 7F6B                       _TXREG 000FAD  
                     _TXSTA 000FAC                  _DisplLines 60CA               __CFG_PWRT$OFF 000000  
             __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000  
             __CFG_WRT3$OFF 000000              __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000  
            __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000  
              _I2C_ReadByte 613A               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000              __CFG_EBTRB$OFF 000000             __end_of_dpowers 7F47  
         __end_of_I2C_Close 5E5E                       _scale 725A             __end_of_isdigit 5F76  
               _writeserial 5E66  __size_of_ADXL355_Convert_G 0098           __end_of_I2C_Start 5E8E  
            __CFG_BOREN$OFF 000000                       tablat 000FF5                       plusw0 000FEB  
                     plusw2 000FDB                       status 000FD8             __end_of_sprintf 7D66  
             main@acc_value 00BC             ___lbdiv@divisor 0005                __end_ofPL100 6A5E  
              __end_ofPL110 723C                __end_ofPL102 7E90                __end_ofPL120 68F2  
              __end_ofPL112 76EE                __end_ofPL104 7028                __end_ofPL130 7032  
              __end_ofPL122 68FE                __end_ofPL114 76FA                __end_ofPL106 6A6A  
              __end_ofPL140 770E                __end_ofPL132 7246                __end_ofPL124 6666  
              __end_ofPL116 67EE                __end_ofPL108 74A6                __end_ofPL150 7EAE  
              __end_ofPL142 5F08                __end_ofPL134 6E0E                __end_ofPL126 7704  
              __end_ofPL118 645A                __end_ofPL152 7EB6                __end_ofPL144 7EA4  
              __end_ofPL136 7E9A                __end_ofPL128 6216                __end_ofPL146 725A  
              __end_ofPL138 7250                __end_ofPL148 74B0  __size_of_ADXL355_Read_Axis 01E4  
           ___lbdiv@counter 0007            __end_of_Delay_ms 5FF4             __initialization 5F76  
              __end_of_main 6DB6          __size_of_CheckBusy 0008             DisplLines@lines 0006  
                    ??_main 00A7               __activetblptr 000002        __size_of__tdiv_to_l_ 00C0  
                 ??_IIC_get 0004                   ??_IIC_put 0004        __end_of_DisplayOnOff 5E82  
                    _ADCON1 000FC1      __size_of_I2C_WriteByte 002C            ___llmod@dividend 0001  
                    ?_scale 0028            ___awdiv@dividend 0007            __end_of_WriteIns 5EC6  
                    _OSCCON 000FD3                      _SSPADD 000FC8                  _SetPostion 5E6E  
                    _SSPBUF 000FC9            __end_of___xxtofl 68E6                 ?_ClrDisplay 0001  
 I2C_Write_Byte@i2c_address 0005              __CFG_XINST$OFF 000000            __end_of__powers_ 7F1F  
                    ___flge 63CE                   ??___aldiv 0009                   ??___fladd 0041  
                    ___wmul 5FF4                   ??___fldiv 0051                   ??___awdiv 000B  
                 ??___lbdiv 0006                   ??___flneg 0005                   ??___awmod 0005  
                 ??___lbmod 0002                   ??___flmul 0017                   ??___flsub 0051  
                 ??___fltol 0035                   ??___lldiv 0009                   ??___llmod 0009  
             Delay_ms@count 0001                      _fround 68FE            ___awdiv@quotient 000D  
           ___awmod@divisor 0003             ___awmod@counter 0005                   ?_I2C_Idle 0001  
                 ??_isdigit 0001                   ?_I2C_Init 0001                 ?_DisplLines 0001  
                 ?_I2C_Stop 0001                __mediumconst 7EB6                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8           __end_of_CheckBusy 5E66  
                 ??_sprintf 0058            ___lbdiv@dividend 0006                  ___flge@ff1 0001  
                ___flge@ff2 0005                ___xxtofl@arg 000B                ___xxtofl@exp 000A  
              ___xxtofl@val 0001             ___lbmod@divisor 0001                  __accesstop 0080  
   __end_of__initialization 5F88             ___lbmod@counter 0003             __CFG_PBADEN$OFF 000000  
                ___flneg@f1 0001               SetPostion@pos 0006          __size_of_WriteData 0014  
     I2C_Write_Byte@content 0004               ___rparam_used 000001                  ___fltol@f1 0031  
            __pcstackCOMRAM 0001               _I2C_WriteByte 606A                __pidataBANK0 5E57  
             __end_of_scale 737C                  __end_ofPL2 7398                  __end_ofPL4 73B4  
                __end_ofPL6 69E4                  __end_ofPL8 7DA0            ___lbdiv@quotient 0008  
                 IIC_put@cb 0004                   IIC_put@db 0003                  __div_to_l_ 65AC  
                ??_I2C_Idle 0001                  ??_I2C_Init 0001                  ??_I2C_Stop 0002  
       __size_of_ClrDisplay 000C                   ?_Delay_ms 0001             __div_to_l_@exp1 000E  
           __div_to_l_@cntr 000D                     ??_scale 002C             __div_to_l_@quot 0009  
              sprintf@width 0073             _dh_function_set 00DA          __size_of_initDispl 0048  
               ?_SetPostion 0001          ADXL355_Convert_G@g 0074               __div_to_l_@f1 0001  
             __div_to_l_@f2 0005         __size_of_DisplLines 0036              ?_I2C_WriteByte 0001  
                   ?___flge 0001                ?_putrsserial 0002                     ?___wmul 0001  
        ADXL355_Init@_range 0007     __size_of_I2C_Write_Byte 001C                     _BAUDCON 000FB8  
                   ?_fround 0028               ??_WriteString 0007                   ?_WriteIns 0001  
     __size_of_DisplayOnOff 000A           __end_of_WriteData 5EDA                     _IIC_get 6040  
                 ?___xxtofl 0001                     _IIC_put 5F3E                  ??_Delay_ms 0003  
        ADXL355_Read_Axis@i 0094                     _SSPCON1 000FC6                     _SSPCON2 000FC5  
         _ES15007_Init_Norm 5E58                ?_writeserial 0001                     _SSPSTAT 000FC7  
        ?_ES15007_Init_Norm 0001                   _I2C_Close 5E5A             putrsserial@data 0002  
                 _I2C_Start 5E82           __end_of__npowers_ 7EEB                     __Hparam 0000  
                _scale$1713 002C         ??_ES15007_Init_Norm 0001                     __Lparam 0000  
    I2C_ReadByte@buffer_I2C 0003                _DisplayOnOff 5E78                     ___aldiv 6666  
           __size_of___flge 0080                     ___fladd 74B0                     ___fldiv 6A6A  
                   ___awdiv 6356                     ___lbdiv 6096                     ___flneg 5FB0  
                   ___awmod 6278                     ___lbmod 601A                     ___flmul 7032  
                   ___flsub 6100                     ___fltol 645A                     ___lldiv 62E0  
           __size_of___wmul 0026                     ___llmod 6216             __CFG_STVREN$OFF 000000  
                   __pcinit 5F76             __size_of_fround 00DA                     __ramtop 0600  
                ??_WriteIns 0005                     __ptext0 6C2C                     __ptext1 770E  
                   __ptext2 725A                     __ptext3 6278                     __ptext4 6356  
                   __ptext5 5F5A                     __ptext6 68FE                     __ptext7 601A  
                   __ptext8 6096                     __ptext9 7032           __end_of_initDispl 61C0  
ADXL355_Convert_G@raw_value 0062                 ?__div_to_l_ 0001         __size_of_SetPostion 000A  
                   _dpowers 7F1F                     _isdigit 5F5A                  ??___xxtofl 0005  
          ___awmod@dividend 0001            ___aldiv@dividend 0001   __end_of_ES15007_Init_Norm 5E5A  
        WriteString@stringi 0006         __end_of_WriteString 5EFE                     main@aux 00A8  
                   _sprintf 770E        end_of_initialization 5F88                   Delay_ms@i 0004  
             __Lmediumconst 7EB6                  ?_I2C_Close 0001                  ?_I2C_Start 0001  
              ??_ClrDisplay 0007             ??_I2C_WriteByte 0002             ___lldiv@divisor 0005  
           ___lldiv@counter 000D            ___aldiv@quotient 000B                     postdec2 000FDD  
                   postinc2 000FDE              __tdiv_to_l_@f1 0001              __tdiv_to_l_@f2 0005  
             ??__tdiv_to_l_ 0009                 ___fladd@grs 0048                ??_DisplLines 0006  
          ___lbmod@dividend 0002               ___xxtofl@sign 0009                   _TRISCbits 000F94  
        __end_of_ClrDisplay 5EB2           __size_of_I2C_Idle 0016           __size_of_I2C_Init 001A  
               ___fldiv@grs 005C                 ___fldiv@rem 0056           __size_of_I2C_Stop 000C  
               ___lbmod@rem 0004                 ___flmul@grs 001D                   _CheckBusy 5E5E  
                 _TXSTAbits 000FAC         __size_of__div_to_l_ 00AE          __end_of_DisplLines 6100  
           writeserial@data 0001              __end_of___flge 644E              _I2C_Write_Byte 5F22  
            __end_of___wmul 601A        __size_of_putrsserial 004A              __end_of_fround 69D8  
               _WriteString 5EF0                  IIC_get@ret 0004                 __end_ofPL10 65AC  
               __end_ofPL20 73EA                 __end_ofPL12 73CA                 __end_ofPL30 7DEE  
               __end_ofPL22 7418                 __end_ofPL14 73D8                 __end_ofPL40 6A10  
               __end_ofPL32 69FE                 __end_ofPL24 7DC2                 __end_ofPL16 7DAE  
               __end_ofPL50 7E0E                 __end_ofPL42 701C                 __end_ofPL34 7438  
               __end_ofPL26 742C                 __end_ofPL18 71F8                 __end_ofPL60 747C  
               __end_ofPL52 7470                 __end_ofPL44 7462                 __end_ofPL36 7444  
               __end_ofPL28 69EC                 __end_ofPL70 722E                 __end_ofPL62 7488  
               __end_ofPL54 7E2A                 __end_ofPL46 6A1C                 __end_ofPL38 7008  
               __end_ofPL80 6E06                 __end_ofPL72 749C                 __end_ofPL64 7208  
               __end_ofPL56 7E36                 __end_ofPL48 7E00                 __end_ofPL90 7E6C  
               __end_ofPL82 6C2C                 __end_ofPL74 6DCA                 __end_ofPL66 7220  
               __end_ofPL58 6C22                 __end_ofPL92 76E4                 __end_ofPL84 7E48  
               __end_ofPL76 6DDE                 __end_ofPL68 7492                 __end_ofPL94 7E7E  
               __end_ofPL86 6A2E                 __end_ofPL78 6DF2                 __end_ofPL96 6A3A  
               __end_ofPL88 7E5A                 __end_ofPL98 6A4C         start_initialization 5F76  
__size_of_ES15007_Init_Norm 0002         __end_of__tdiv_to_l_ 67E2           __size_of_Delay_ms 0024  
      __size_of_writeserial 0008               WriteData@data 0005                ??_SetPostion 0006  
                ?_CheckBusy 0001                 ??_I2C_Close 0001             ___llmod@divisor 0005  
          __CFG_OSC$INTIO67 000000                 ??_I2C_Start 0002             ___llmod@counter 0009  
    __end_of_I2C_Write_Byte 5F3E                    ??___flge 0009                    ??___wmul 0005  
         _I2C_RepeatedStart 5E9A                 __pdataBANK0 00DA            __CFG_LPT1OSC$OFF 000000  
                  ??_fround 002C          ?_I2C_RepeatedStart 0001               sprintf@tmpval 006D  
                 ___fladd@a 003D                   ___fladd@b 0039               ?_ADXL355_Init 0006  
                fround@prec 0038                   ___fldiv@a 004D                   ___fldiv@b 0049  
                  ?_IIC_get 0001           __size_of_WriteIns 0014          __end_of_SetPostion 5E78  
                  ?_IIC_put 0003                   ___flmul@a 0013                   ___flmul@b 000F  
                 ___flsub@a 004D                   ___flsub@b 0049               __pcstackBANK0 0080  
             ?_I2C_ReadByte 0001         ??_I2C_RepeatedStart 0002                   _WriteData 5EC6  
         __size_of___xxtofl 00F8                _isdigit$1246 0002                 sprintf@flag 007C  
               sprintf@fval 0075                  sin@coeff_a 7F47                  sin@coeff_b 7F5B  
               sprintf@prec 0079                 WriteIns@ins 0005           __CFG_CCP2MX$PORTC 000000  
 __end_of_I2C_RepeatedStart 5EA6             ?_I2C_Write_Byte 0003               __pmediumconst 7EB6  
                  ?___aldiv 0001                    ?___fladd 0039                    ?___fldiv 0049  
                  ?___awdiv 0007                    ?___lbdiv 0005                    ?___flneg 0001  
                  ?___awmod 0001                    ?___lbmod 0001                    ?___flmul 000F  
                  ?___flsub 0049                    ?___fltol 0031                    ?___lldiv 0001  
                  ?___llmod 0001                   __npowers_ 7EB7                 __tdiv_to_l_ 6722  
            ??_ADXL355_Init 0007    ADXL355_Read_Axis@address 0093                ??__div_to_l_ 0009  
                  _I2C_Idle 5EDA                    ?_isdigit 0001                    _I2C_Init 5F08  
   I2C_ReadByte@acknowledge 0002                    _I2C_Stop 5E8E              ??_I2C_ReadByte 0002  
                 _initDispl 6178                  ?_WriteData 0001                    ?_sprintf 0051  
            __size_of_scale 0122             ___aldiv@divisor 0005                 ??_CheckBusy 0005  
           ___aldiv@counter 0009              ___wmul@product 0005          __end_of__div_to_l_ 665A  
 I2C_Write_Byte@mem_address 0003            __CFG_WDTPS$32768 000000           ___wmul@multiplier 0001  
                 main@acc_g 00CE                    _Delay_ms 5FD0            __size_of_IIC_get 002A  
                ?_initDispl 0001            __size_of_IIC_put 001C                    __Hrparam 0000  
                  __Lrparam 0000       __end_of_I2C_WriteByte 6096      _ADXL355_Read_Axis$1707 008F  
__size_of_I2C_RepeatedStart 000C            __size_of___aldiv 00BC            __size_of___fladd 0222  
          __size_of___fldiv 019E            __size_of___awdiv 0078            __size_of___lbdiv 0034  
          __size_of___flneg 0020            __size_of___awmod 0068            __size_of___lbmod 0026  
          __size_of___flmul 01BA            __size_of___flsub 003A            __size_of___fltol 009C  
          __size_of___lldiv 0076            __size_of___llmod 0062                 _fround$1711 0034  
               _fround$1712 0030                    _WriteIns 5EB2                ?_WriteString 0006  
                sprintf@exp 0071                  sprintf@val 0069                    ___xxtofl 67EE  
          __size_of_isdigit 001C                 ??_WriteData 0005                    __ptext10 6722  
                  __ptext11 65AC                    __ptext20 5E66                    __ptext12 5FF4  
                  __ptext21 6178                    __ptext13 6216                    __ptext30 60CA  
                  __ptext22 5E78                    __ptext14 62E0                    __ptext31 5EB2  
                  __ptext23 5EA6                    __ptext15 645A                    __ptext40 613A  
                  __ptext32 5F3E                    __ptext24 5E6E                    __ptext16 6100  
                  __ptext41 5F92                    __ptext33 5E5E                    __ptext25 5EF0  
                  __ptext17 5FB0                    __ptext42 5F22                    __ptext34 6040  
                  __ptext26 5EC6                    __ptext18 63CE                    __ptext43 606A  
                  __ptext35 5FD0                    __ptext27 5F08                    __ptext19 61C0  
                  __ptext44 5E8E                    __ptext36 6E0E                    __ptext28 5E5A  
                  __ptext45 5E82                    __ptext37 74B0                    __ptext29 5E58  
                  __ptext46 5EDA                    __ptext38 6666                    __ptext47 64F6  
                  __ptext39 5E9A                    __ptext48 67EE                    __ptext49 6A6A  
                  __powers_ 7EEB            __size_of_sprintf 0658     ADXL355_Read_Axis@buffer 0080  
             __size_of_main 018A        __end_of_ADXL355_Init 5FB0       I2C_WriteByte@data_out 0002  
      __end_of_I2C_ReadByte 6178               ??_putrsserial 0004                 ??_initDispl 0007  
                  isdigit@c 0003                    scale@scl 0030               ??_writeserial 0001  
                 sprintf@ap 0068            __tdiv_to_l_@exp1 0011                   sprintf@sp 0051  
          __tdiv_to_l_@cntr 0010            __tdiv_to_l_@quot 000C            ___lldiv@dividend 0001  
         _ADXL355_Convert_G 64F6            ??_I2C_Write_Byte 0005          ?_ADXL355_Convert_G 0062  
         _ADXL355_Read_Axis 6E0E               ?_DisplayOnOff 0001          ?_ADXL355_Read_Axis 0062  
       ??_ADXL355_Convert_G 0074                ?__tdiv_to_l_ 0001         __end_of_putrsserial 620A  
       ??_ADXL355_Read_Axis 0074                    sprintf@c 007B                    sprintf@f 0052  
          ___lldiv@quotient 0009       ADXL355_Read_Axis@axis 0095                ___aldiv@sign 000A  
               _SSPCON1bits 000FC6                 _SSPCON2bits 000FC5               ___fladd@signs 0045  
 __end_of_ADXL355_Convert_G 658E                ___fladd@aexp 0046                ___fladd@bexp 0047  
       __end_of_writeserial 5E6E   __end_of_ADXL355_Read_Axis 6FF2              ??_DisplayOnOff 0006  
